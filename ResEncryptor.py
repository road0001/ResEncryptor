########## CONFUSE ##########
___BBonqj57dmEN9ZNNCGKhogIcZPKBDVXg6ejhsI4jxC3lcY5OibHWp1JixAnEb8XCWR5=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___9g7c9K9w38MJOUjdtcbMKpF3D82FUlxxAda4qR67rrNTiX3YOTa4gu='9g7c9K9w38MJOUjdtcbMKpF3D82FUlxxAda4qR67rrNTiX3YOTa4guit579Eus9TV6KgBqtN3cdBhyOmnQhfzbziPoKNpeHR3elJtT6kckQ7xPUlwlfWLPBgdzjuTJbnqy2C2MFFeQ5m1PPiBvNyF8k81PSiv7Epn0TBzokQwtNw645VjJ8R1eTRRfL2nriXGAfhbw0qchpcS5bFqunPAxQA5jHbgScg7nZxzWJJNtTDOz2J5TboTr0VtByBN05LK8N8IxZxo7wtO697USZqHqsxzKWLXW9vtOQo6aEPZPYit0BLjlBruKQjLOP3LiRXJSuj8nIqCAmbQ8GdsphB6ic1TujXGbpG7TBACNYhuUgrpntUmiPKISGf1stuFdTXTAJflNouUPIuGfxf6uI3LnB4O3QyHQjayzW1baYVIe3vkY8qYvHhdN2yW1W2ZNGMNBo5k0KxPznEdvVbJ2qwCiS90YNdJT9mauASWqXb8jyfY8Mtz6Rhupb6OzQQcdo2Us4P6XNCKLrVgYtRA9Q9bDKGADfQPFAhgP5pNQo1u9WqijB5ArOJbwRJYYzYT5dF9H0PXzB0QplhiAfeDNeQ0uuigEK9cNaVb9rwmXw3XqmpCVhVHz3Lmjc9VE6hVzaqUcjwBMcnSURtQrQ0CSjnkcyaK7l2Vq47wPSuCvVOl3TqfPqiX9CAo1NETu4bO6DghTuGaRb0dbNOh7m0g5WOxtNSxsMetXgTB9tIdTIgnZWlV3nHgJuzwQFjOny9u3OEYmysc6tCIN8vIJHfyntTCLZLegJf05Dkt6mD2NKVATLiBFYaDKIwOcWpek15SZK6WyTwT3zn14d0ETQvwiyKL9ZCeII8i5GqUH6ckdsyyOSpxIx5u0bVlQ8iBclVCftltZ5IgdF9ykcLsBYLu1gwQxADEMl7r9tiqa14kC43nPDd69xFhWUXQczdnxBPDuhjaLeaGhdEIVEK2sSDsPuQuUfgGInY6S4rLi1vjIeHwkhHEYd5NDnKpsli62hcJkYyr689Vvo2ry44cVcmqMMdxEaUNtNwy2bO9hK0OTL4VfN7HmOiRcnBDgDPMkvHwbCpl0j7Pj01NqIE5zIYrF9cCdktni8s58KQysQ4ExsK3QDirr7yBUzxPKrJ7C7zZHoCyhJbM2xID6nVRcdN17XdPnCpMbM8H5kG2u9msV5SkM8pqCIDzZuo8ZX8mwof1SDnAqzTLyXhQtnJlZrvvDlqVI2hf2neKm5vSaOCS6WOTdv0XwakUfRRzYU8OOSREc7ocNb1NyfgwPfNZCLSt4w811s6UbLPXqF7HnKGeDWD1NaV9zO313iFkJy85LtJOIAgcJE0qLYKHTzoXCMoYj2zsRQitMHmi9eNmaEIIiOxejXhxC5oEE9FDexJ0mQy9UjY1u1ozV5GjRC4Lj3yahnRWV11GRuB1cmPaoHIClmgji1DSbn4JMwCbaJkKOkvZp4VCgO0UTVPoun9a8wddtJuT3mCUIvdgNC1d6ObCwbeqkmj7pQsSgwbhMzpglgDkomRdSJQSFP4wsPdEoyjDEGVWJjPja3PqEVhwxJuhveRFTptyZbs8w53RHEL3uQbTH7ybVt7xYM6naJNw63yKS4AraqBFpSAdPxPfj8ETYHXDLI6ed6UPupUIqAygu73cOFrEa6guLu0wJK6nhTPCU2Tl3kOqopvgnaHF8i01BTEdIytR0ued8gQJp8HIbkTIv73578zi7z3vBEBscI97xw6vyzdXjnGBWsJoTF5oc1rtX5uLYCfHkPPntjO0ehWTmYOI9bDxHypda7q4zYDWTgaZMy57ZuMuaxlkH3WEryaB8Y9n2fNIoIv9SWvTRqgvKWRTo1m8NEqHfZ9oQ1dQnXNrJ1gczUVlH2jtaLLXmLatBwUL8K2ESjDV64jNfkmB1rQ9BqpBeAlEmcMAgrJHuGLbrSNIMhAQsttDpGwjBeGpWt5SH8Oz1jBm0BinEu81AX7Xc7g1aoU05ltwdSQLvvYbNsYjciP6vg3D51hrUid20MD3dbU8uAGt3krRPAVX9VW2nYWoUe0aAgRczgDtuCarBwjMnSdnutz6Ie8oWkNSDAZvlT8Nd0FmiG6fQfKdTucNKscFLeoMwAdzJK2Mhb8MytpCgPq8yjEoWNOASqVGefAU0kcSK5NOgmKHl8PwpbUMGcauEpNXshFnunvyVofxz11pvBrV0CeOHC3J0jjel6e2ylOKX1jqs8OJgmnUg2XhWPjWwtDZrEnw8mW8KyZ2p3uqr58Z68BMUja3rQ4y83Tn0uOV55xaEGiPCufQRLvYLUFbYanOaPKMGMM5vEXKdgAtYTiEitqz24q0WD3KIbMkcaWGTnjzk6I97cnycHEZle7V3utW1qPa2FMG7Z92lrtbqXFm2Av3rV6JFC9lDu75TG6Wl6AzzL1nBMerAa8yy8OZzFxKVChXSzlrR5KXoLaBTWUH0MjdHF7i9zYeYHbbvGGQIs3xMAXmF2tVhHwQmZhBlcKcRhTN28f1l1VIg5C50rTEUJu2pM8c9Jf8oWRuQajAHnfiMldZvMo1v5jjv8MjjCsv7miIQrYdqWVuGMY4FRr9OXjq4DkGpjYgK0mspY1XdrZ9NdmxFiEpGxiTrwUA0ozuCMk0XU2hugIlLbn1jJXwolkzQgSSsXGFns6I0Jki63sDo5AYr'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"author":"JMRY",
"versionUpdate":[
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___9qp385uJz3YqZJUVnz8Ez67GcJrL3uLa23='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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4270000000
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880

########## CONFUSE ##########
___TeAjjgBONWNMQSy1ZVgDwtpNqMXGdF6R6nLxo1nNcrOWYqNYQBD0ZS0iVDyoXScibW72GbMelNj8PTl1Zpm6osRkNp5gK=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___q0reTYknx7f5JZvu=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___O9OLJ0YbNNOx0WfF4txWBcHojwhe6eIfGoEQdQvXj6cOqLWRx5oOPXdzpj0esL1GNMqxud4LCUVdmXuHAVzO5rzhq7ojnacq0LmC820I7ZGEZnMYDmv8Ows=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___83bq7XdDdPGYLVoGG=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___HtYt53XvnmQrdsn50mGIex70Bct1='HtYt53XvnmQrdsn50mGIex70Bct1nVWsPzhLPdVywOUYs2RAvKSrLDCW7IutXmMtrcTKSor7XPPVI1ONM85ucp9D9xC6eG1NoGBP7Z4pnmJ6kjaIgrbdsTANekMjBit2BrJBSkhYoe9gg74uX3kuo6g0gXailN2K7wyj2tSv18yuBW0gyNZ4gRpmgaGA33r17rHDpGu0pPRxoYlYoYrHZSQcXztEDIJLwdTs8GPkadhesFX1KbEnfXorB1UDlGDMyemwUBuDAd98g7iHvKSHw14ABxKCxGdLz1FfNGQUNbL3S81cDg6gAPBevDmy7754pG7vYZbALZKTBlpSfRulQxTOjaMLdmJZtZZDIRY3i8gKUBPF82LE1bj3n39htBxemvoQEWVz88XODsc2u6oc69hOpnF3TabRXZ9ERM2fiFinBAf399NUCWiTKEm0Nzdr4SU1eoPNo54cb4ZxTthNeE2CusS3k9QiXxxsNNLTPQmmZPKO3O48So9QSzjRCGTO62xEUw3nlHc8Z7DsxXGn6BXF9wijOrkcdkm7SFZDQxYrYwsoJF5j5WtE8Kntb9RkiaYDazygn4nRolEQlzmTMUKThMPVxgP4cL3Hpy1eEKfFKaH0ovi6xWU2BrUMZDSh36gXPWCMfvtTxymRksCcUIQ29MDTDSdF39gnZ3rKcXmwoQOP1MvwLBMvonJnV2qPaQCtfSXRK0pUOgyzQZBkv4npvtjaRu2b5kDwyWNEYiMKxra9sebYBSRWEsH5gEqpApNFbd2iPGcSIxwNB6lOx4ejjeiMjSmqQdQTjeYgHXtxqLpWkLoP2EFxThTsZyO9yiRtS3BWbMyisErIITi4iOziDaNwZWPZKilczKipdRK9YXrPU3d63OorWBuoAxoEWvgknpIbT6ZGI4jHPzmnuCLO9RmVAdcKcZmntqbAbUThy0OTuzTaJc68UZK1b9OXUb0g2JyujqJxSmzmwD0KpLGFY7QnGhplVKbiOyBAbdz2zi6Z1toJohIvOWeXb8ZSnMrgAib6dkTRqiegUwCsInGMt7NAFDn3EYa9MdJ2p96zR4OdQ0kVWYyiTrmMBJRbXbcCllaXLSuxn1iILsoXIU1Y3Cep3lOG53st8d7AXWKVibFHBDBoitjdZCzSaFbGRhNFJnDGNVFzlsklKCHQJj5qs4h0ENzBa31DPOvLiAyUR3vNQwz1ePpF0J11vUObTinbyUkyBLf7BgzO59OdqlxpFqFDiI1VKlzUI1xzPb4Ttst41QoPCoaLALn8NVgMcc8kbARUxgb2h7I'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___It4MdUVWwCwmr55gCedi4bW79UBGaYKCGjf7CqBf22yPSTL1b=''
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___b8QMesawTKzjbOGIuek51gLN5NjlLWx0KaofI7HGm7kcyUN2nloNQBshwAyYPCFSdk1SAUKHIHNaGCx5caYEilRVL3MHeZdSd13wOBohzji3Y0NVDzXs='b8QMesawTKzjbOGIuek51gLN5NjlLWx0KaofI7HGm7kcyUN2nloNQBshwAyYPCFSdk1SAUKHIHNaGCx5caYEilRVL3MHeZdSd13wOBohzji3Y0NVDzXsBk9uh4kZmqhAD5H2eTAOhjiXY72xgTezfgTmER78YIxa0bu17HJe7TIG9XVTsGJR7xz4ychySPZKmEiqLn7N6GsUAqyrOXWrlmXZjddaJDzUNRj1f73Ex5Q5L0IpmUho5NejnCYixSmbApWAk9E5LO9kB1rrZzWwX83i2GLAtJTrMZXxAjSCrHKW4QCx5p2in0XPSu42SmySbMEaD1pWrtSU9sML30a3MJZEZNPKX1r5izo3XSjWLsjBechfBXpiIy9weP5aQWWiUvkuYVK5CambsW3mOuUCFwL4JrDdjD2gRJ8yOgvH0idUclhgx3DP9YF5eKBxqC2SaO3eY58UZRyyvgnPtN4gYiDKkxOY63xEPyIrPOozFN2AJQZwaFoclirwRG8SnogvL88D47ZAHwGUSycfFbsyxnu1tJEVtONMMFM4pHSOAhgoxsyI7VMkQ8ShrHbEGltXHcmpX52BePQgod3LL7MLlHf0i51ejKGp4WdKorVbirtLYlgi9ciiwHYQ1hzvSz1rt98byJPCUrYmfZFasOFE5b6BYqPSju8AJoosGrRBM8yoTYkrgQ5Ks0GlkTAb1cb2Im9jCJcVFa4h7ZyrjYr5rnovZ40rDP6YWtRNfskGwvKgyXCXURhSU4ck6Worv14kpHqMqpcMQJfs5BODjgVCjhJkUkmuKuAk1JZmI1q1jTRMcCdlBKxbvGPcgoAZjrMLMftAS9bvbD54Ty3sn47CWdFsZTlr56uuzHSeEsQyuoAZX8hyEw1j1c8Z69yvoIdcDg9bTiGr13YiODpwY00mpnl5yVjRgkR37f6xhjEhBWQleVR7QaO8gXI7UCf91LfE0Jigx0NySfp39xHlDKKoZYpHVTx336KkgP2I5v3O5qLFekknzrmYoZrAXkHO4F1wYZvN8QYnxg42AXZGugqiiV4fJxv5wwuRmZljLtmUBUUbCZKs0oVLXgikObRRpG8KLCf2lpPwruBDZ6KaxBOYrQqZ4EKx3hVdfUh8Olq6OfuNyWlgHNomviExRy7OaprkMiStOmwS0ETnzIse4WNp0HuDvVqVAUf0IW98yABXapWFOM2ZQMG4E9EQVSIQ23ZK5JcDALjbciQKBYpzcev8rydagRAd3Mcqg6FGYEEmfR8nBMilmuFlcFjFdCNOfeMxF6gH9VJMNpT6VxuSMzgHAo162JLcOZJHIYbrA6Q4BKJTDxNW4toqeBwDOpAyoBs1AAkduW12bMrf3z0zLxI1qICG0T860cjgu8bTPgUPQQxJOArets2dMcTN4Xm78Ear7dS6sJXZ8IAOFYBDEbtvhu3tW0Dg1HX8ZGQWlyq113g9GegLn6k4DByUXvgdpr2QLyKj6S0Z02lkGch1hTLW2gaylcJH0jF1Q23iu5l01z5H39NRChrsSZEcn9TS1lZ84gM6lRm7laQWY0upQN9C8ms5959DKi3r41a4dqwa6EGBKQtiv9h0qW3zfI5o0izPicInWRMJyfWCrLe0969E2UUWuJYS7Ordxc3qYwC6FD7nitU3CdnyPzLAU7oO17269NIMNs6pnKqu3zN2mqtEtymtjILtW3LNjeIqi0Cb9qI8G6LfrImm7GRrHRCOnZjN09Kgn8t81SwdbhIaDWNOErF55lnZKSDPHfKRaDsQHO6aohTiQepM5Nvr7hoYH4YIviEihnSSlRonaf4RDzy1pIQE8UJUKHFDNOArs1OP5ovzpQA9eWP4lM33aID1D9XByXedP7BygG4lsvPKLcRhrc4LC7fjdSPVJHicRntMg6iEfgBUws0NSgaGzghTBJ54IjSjjFdUFkCn15iyrqMyzY3wT7Svw6va8snmwS5JysMFMDUHbRgIjF4GoJfwFOT0xrzw8qVYn0JjodNuvQplcQMFsk6EPJl3sKKVgBJVMuoeMy88fwD7E4xl7tYc7QNkjnEHz6x2fgwHxcyZcGtD6imKORaao34YyfdmCAwYz9uCvn516b37bWe2CYmaqetceWi3hSuXvb4GyWupOOiTZJwg83egE4XkejdT0P0B6HQvxgqlJFTvPCjtXnVlj5GAORtxjTasPjbxznpBiirSSX1i5frQaxTM59w78g8Ii29XqQG9ZwVyztE1NbvSYm08Ib2medRo0PMGIEHUrrCaXpKQEd9JU80buH0aa64a69U5E2iulaMO6UE3dJO6HFmoGpc6ZUclDMv40IRelOncNVzNJx8hE0J3sCnc4ZGXUwGJ5G0hFHfXWiB7GmZrxc2xxTLGJCtksP0788mUWcPGgKKpbKTSSgpine3hRW0gAMQbOMMIktHtgngCVr37epUoTNEOwuCGFiT2s0HT6cXlp3MT72IBmqO43j6RhzsDYVdMEjhCBnxThEMlGCvLeZWEOStaEKCaAxKJEBqypdv15Saf2uDCl0452WFXPGpZwC4zVTRPIL7Okv96ycWKis1N3JucE5FhL6vE4iyLjth0DKQcCIvTYLjE6TRKGyzYAjJWPLZKPravv7QfEIXDIH6DrqncG254yaf0j6VwJlfeDWOlz5a8dAPS9KaMXv6nanXgjAHOmEA0I0TgG4AwVhMTznEiVhP53ZcVqQxVQi3Y84qX0BUbMNoT3Edjb3tOFnAhmtJmShSvBMTMHm68xGg0vGC2eQRBTeYqigTBLCiqVZiPzE9GVdpMieZWROfdlLHn8uDZnWCBKdTlkWoZMneTd01Z7NYyJ0hSIwFMO1sKnuhj9yZnC1Yg9ZVimRnlcfOaUWnChavqNrq78kLqmlyA0nPIDEV47pRScwqD2f9A1Lr4009osIP6VaaiapE6MhvWYzGYMqUaG8py6HUF0UZ8Pr15TYRSqSSUoHuWL5twBfwZIUj8kluB39qWGZBXmVLw1Nt5eK1oFref76qzyDsrsOxfDqhmn56wb581uVJeJIlvydzQd2Fn1DJ0nqv9RsLKAmnwJZEtz9Y7InaUkvX5UmNBCCAJ3w5kdT2YdAMbPPEH66msNa8aWqQ9pqa4ZTGmUjZWa3Dz9AN5LUSPxeNk43reMeKcFj0Tj5gozUnebDBYZimJnJS1IIKjS4HtvhPTvNqOEGbXPQfKs2xkiqePBHuulF8NFz9MR31d0E9XUetrch9MjY3FF6MxnaoWBRYxg9mzkCflmFYiyqO5tr0F7HNpeoTNE1JRvynuk7kl8HVnd8Az4xKfdKhtSbkQ70jkYFSQLcMTAjgkeIHy4tW0R0pEkm2MConiJhxxoslu9bqQXomE5cZyO3Bf4LbkQu39fXzPosyEvl71jH92wYL9oLPrfVQEb1C6bQxs3OCkw2bTqMjkLMKrdhlAJR4JhFo9wq15KNhyr13e5Ex0MJoQM6jO5ZCHJqXC69EWJLPFytvr5gUvqqNDvpBhBjbT5rSFOe7QLrhtyrUYz10EKvCYIa0xY1tllHCzMtG7Qerl8KdEeQTp96isRZk6NTslersp0dyJ4FY7ZoZsum5NkvZmf1bEfljXmw2fei3ravdXPyJJ7ZPharuhzzluqBEs9DYNaCoAmf9vnY2AEaPN4vYB5zoBRa3DRcmE2XYlVPfIiFdd0muwtiweOWPLUrPQ0GAXKyqnrdNqcg7iE3VCxDX5SbPd3ttwLRc4e3ffJFHON5SQ5ueZEKMhXxi1JvWGpZb3kPlXNsbjpVqbmKh5S3aSMj6vGW8EIjrIWbewM01hxGmVGDw1ikyqIJhJltMsfMQfhCrNCwPfHgOh8sQK5tmAW9DwhZjbc0bN3aucuQkBtuOOz89f9fJWYF5ZvKYLGlv0hHUpEXEkqVWBrFEyXFrbNytdQdu9vlQkATIZZNkrgxfveFHg9TQsihQGfdpLHMAg3OglszPxmAEkVfPR9QYi4BV2a8xClesJGFZTHgF0ZY0kmxg6gQzsmPoskiPTzuPxsHgfcY7MmFWS9O29sTqtaa9aHlOlCAIAfabAP7fMklqa2n9qFvMASJKBvrX7Om7uW5f88pRmgZ2d3QdMIRaCLYXTgj40mJDDjBymyBgASOry5kbXUppHL64HdXBqPDIGKo1iW6gQcBjoQiAl3OMH9EoCupdy40NK9LGckXhMJb8Rtuv8DzKj1nQZysbMqYqIaj3mSyokpOJSLfCnwiPaxaGRKutX65KhxDk8ecJQseDDudmX8IyKG1WPxIJVR89YGGa7JHMnftrWXzOE2cF0HUTr0kPmYer0g2NxfLATlCM2J00Hz81IRaOMEMXK0nMPKzdgjRfPkAWbSiDDCIYBOXskDJddTOF3RehZZ0NcdjTyFpRVKKlyZhbduIaFnAqgjt7r1jNP3pDFUcDspOFGg8Iq7tgOdSlYyy9bavyQe0EvTnceFB9t1dlyWVFZNMovcOLUBnI2UkGYmJ4E2aaKq9hpGApqetKGCkPeIeMZWlPc7q4c6pqy076FpE11kFvs3voZ2sk983wdSlv4wOwQreEKBT6l7UIblp6B4VtiL8cgAnJfVrdHiXaJ8dKvGQJHBhlgoiht3M96z0iSMj6Td44Il4KkyQ9p7RJOV5PuLUmyQgyHwpLZvTkgNyGALKTcxgjEvO4UNOA5oLZm8ggqLNJdUXgmfKK2OF7rBhqjXhYVtz74gdX3ZkS8XVQv0Nzph2Tk1EsYGlmHun3aNb0Any1DxFa5oqmB3MJeaOop8HUjxUFr5R1E6jixFysqUYwYWRo6pRe0mVnbTvI9RJKNl90pIDcjZg2it3VZsC0ZnbDZulcI0v1ORfAkoFVN3HWDtZ0yQqyhL3zRh5mAQY4zy3sykvwEy2LOTUjpboU3g9mNse7KyfwybCB0GBwNNKC899fQUBgBbOqw0PIxMDBJqrSP6GXs2NgikMfTzPIcP2op3CF0kGAJVHjpa35Ubzdtx8eyX7bR7F8jjW8enshSJFEUjn6rDP4thN8t7LsPj3ezYzfnrumoGPzON5Q3JuCgRWTX1zWU9E4Ao0xC3pvOck9wYLRRuEiMJO5iMyoknnRCzk5rsyxC091cll7jUPhZwxvR7qpDhuBcY7KpuLNGRx4EeZblJmkvmN6jg4MevGlZCGP21gWgqI2Jhz7EmETTp4TKroi3qwHm3J2lm6kEXTV5EBuPAtOw0r7T1nWS2TVt9bWP7FWXNgRtcjfO7g5O1l4AZ7BRM7TW0kE9WQugSQYrWeUJ5XXaptnARBLOqtEQqeGqFZ3ZDevmqho6CLsk4kvFGMydZtvSedUEomZaYkciC4iKSgNvrKSvEBmCcMvkOmYpN4Um7oQWR8Wo93iEJRMplAE2X9wfrznW6SNBJE5qcmXMNbbFGBQGfnQTCp1xx6ZpDCwcJkU6U2h7ovI1fhtEzhn1wI5MaXxwIYlM6L3rI9SVxM14jxboU11VPyEGO4pQINuG7ehPyzWubDz1SadUTc68Tw7lBBPFYLmi42tr0buat28r40Ucwvjt4c9oPQniPr0xtosrgyCEAuZsNmJiXWnsWoyQOZI87Qme4xhPl16LCshbZP9joxmkDV1idsKE1pTIyDGZTdpfOr4Smn7RAnbxHEGZjBvuxrJJ7CbK2yjf1QhlwF97WXDkkMoRN5DKslA1yPziBqMe9y0WajHIGzZzNKfTjQ5JPfquGq7Mxft1EtgMWFaRRYZprutT36wh8Gh6gQPa2h1QSeEwefkZcIcSRkmH7NjxhgCsfKJXhXlOBq6hBl5lGUuPnxBUuD3BqEXIpvofKYWsvSgi5hZaO97dkrUrzMXjSBwt4bwQkoXFa0I1afOmgWIoksIy8rrGZX4pw5u2jnY5UfHdcz7HI2px4lUZvQeMHODj4zmvcdMp7dleIT8DUbuy8bl2fZrzHpSjUOH4XqjclP37SgQVZqmQRuIkRTXSiSfa4AgZIf6vq3w5Ua3OFdYufw2vxENdCZPcPpQW3cyvNdLxazAVexupFmGoegxxsLvq77OPkIu7rGOex9oQNEVKztVNtbWqYbHCxHyjlexl7kJNU3g9pHjJlLNEkgeuK2tTqO03G0djGRpJDF0FXzwZq9LLNMudTxUJzv602qNZhUqkmwafszEvn8X3JeE1HifwoDln6FLJXevhPkGavsB38Y7paVbXrs2ote89HHd2C5PnUzDnGYUlLd92sq6nhpzEEkmYkksgfdRRderJDtSVW6JV7DmOewvieGawH2nsqcAfbORjYCNrWaMEDrmgAtbIAdTIq40IAaPCVnMHRGCgY5gS2d2y3EY2pqQ2RmM20IdMw276AoUy4pwaoOQXioLCASot1RbzKwTfNX2wHSAw9rn9Nd6rQ8VrDgeGkferNQ7Rg9GlsfcvzQTbswiwaShHCOQ0ZXpTZHMyY7o6FrbszJrprT8MPef6TgHyDHbCgLSpuC89WGRjMWYy8gOjp4aCywF5RuQ325mqQUP34IeRZUXx4pKov1YQmFLBlk2w3n62Om95FCcyzz6YuXkr8nwbfTr6uO6EFHr33psjgvbThYH5KQJmMcPiA9AffSe5aReeGzexB0OxJntcuKq5at7QlySJxl2nh1wFfsM7T0Gk7R5hE77tqpLsKLIdfr7AKj2VaEGzWS08EjcZmOzFdGPlLn9guAkqT4Qm7EWT774qCqXF9jLAtwk8GRJiHeyui52imC6aXhaKnhcjYxoJpoARsGZufkQR84ZqiRfUVemdydpW1y08slCE1OnDep5ZYXSz0APtcjqOKknPk1L4wYhO80AwNYa6c4EBhjr3kEr9dnQq0p01KIMmiBRV0cnSU7ngFZojxYbiuLRCtrbks135GCWL2fRbzo7Fp8KpCPBTn42eU9fTKStAlKzMI44xRROrNO2mSsTIXo8I3vCzwjuiWKKq2TjEoudTE7QnU1ySBXol8hDsogEfesIhtlwK6DNv9i0xH6GHH2zDHy7ySckMYDJG4HMSBLy6Ax3QG8agOQKZEyUMCbP7tU3pgwo2888nMqcq6I5MMc3fIWiPOIggUr68Sdy39Lz2KVbztSHuhdNVYUzdaKwPfKeuiLYf6oR8Md6tCrWVSZqWrE1Fu540ES7XMTqdUx8x8G5X4aHdWM17g5CstYFxTLRiZnczJ4ACaB5HTqlW364dttXuEboCYqWGCIGWYpBSfEvFiuJF8RTxvNq8sdSIZfm0lQmQZEKLtHMRrGO5OF0BbMC9QFeEYtguoMVvb4ExdJ6CSgTzxEZyfxRS10DkB9BbI6G6Az1U7PH8847ITC2njgtkRJ8SCHTJ5iYwDKV6L9DWyvs16or2x5VWmGU54vKUGPmhP2rehmee8txlfiUIdcszlfTuW4mEWW8l0m7b7F85B2Dsuz1q4PvHbhR98m6ByJiCzHuEGJLOeXftRLUQ4hfKD5gxU6elU5SAfSJWpupH4hJ6XpTFDpYlYzAXdzY6NLFZsLtyE68k5ixzxZcnG4Uy8SvSEZiLcaWnPigiOsT7UTCANTM7fOH4zCGypPDOoeDPalmUJ8RuLfLE6BOQXGBHYAPywoOEhGQ0tvgB3ga0gSNO88MT7tAwKRs2QbXff0uFLxqRjbo8OFSvIlrE2S7rT34FOsgDJyNh2gycIVh9CHe769cPTJ5qX1SritDLfIudEqFdr5YyRy9CmGD03nyQQWT2m3ExGzVc2533JiBtJQJeFGoeSMsR5LR2PQP0RJt5Jw5Wk1INCGN0T3FrUR7Fb36lfVZLqCE1jgW7XvtOf0j8BGca2u6qq6snDpqDNbWLQxy7CifEz5CvvEdkZJdEXDRlW4Kg4JsN74DXU3VCa8x2uwQ1lKtr7o5vqaG1U0TV5rTxGV5IPKHCa9JXWUYDcm12C29bidcoT8JwUeda1CZFxtCWSuAqdemFN4cY574DmyJrjVgcOFgQSvzZgS7A4TCVSE4ix1lpnlVvIdJ4Ntf135R6MhxnWWiYRfK5NAHuutgrabKd2mRyN0xwcMOlyPAPkJVeJMSr6Q3EUjllX3TMtzbJyx4t4Pmw5ooUY91YPUa3fHSnVOBM5NBSKxylmEISLbSANXJ5t5th3irfdrOPaYhqr0NbWPp555u3gMdy1Gq7pVTP4VoZQKDaNLRFBSmwzMNljw6xY5VHggM54CVtIqGCw6mMhfYYo4z8Xk7G7uJIXGwsvH8ZXzj4sDAAxcpzQUncDXRA4UuF6kr6Snu1oE3adWhMAr4lCA66zLebT4gZC5aelA9Dsij7iRhlLHca1lncivCL867KBF71lt9Mx6clCykYaol4nE7a56ujkidse3hogiqzmnwCNB5eaTjLRYIKrTJAGwh2Mm7hXyDokUFSVIC2TenxExpb4WHhuodrVUoaOeXsUhNAwpyLQ86XJUKRi35DO1loeE1JgNmg1aIOFISFLhQH7ypXNTHcm4heG247Mrxuo0tbViTZpsZNyjU56xCqbft5LT3NrjsvC68ISRtWp4zkErk7zRDFJM59l4sqO7xKGda03C90aXpK9XZH375qXmo8teG3tFXsdAjjwYX434fHS5dt1TekJUbrK9qSh8gb6wVODQsRWRx5Mfo8O04OWCVv7wJTIJhLbxZ8JO9skJSiVQsqxZiHtVEifTfhizxThvvJ6ymNNS3hwU0Y7lL0FLBDp21u0dKxTGrLqwXrE8qfzyel0uBFTj7isHXLA1p2qNoq6TPsXU8Rj204p1KOzNYGjeljw0Ou8mdCCp3bU2ekXaKGLXBTOLRNeSXgll9W6tUWtC7iTPQ9u0twdeeT0XI872feCPVJIWzKA4NulvFnsyeqfWEWdCMXhWCSYZNSt3uhvFQ2qKnpcN8gfb0JZSBEHz3PKQ3pqsfxOfkQlp0PVzhvlBeHH6lcwXz98KByFqspxl5eKZZ5TnmV5d4awiB2LXYorCnjiu5v3QUyDTmBSUHKCpmsm9EnGx8oWQISU6fa6YrDBiI0mbafpcpugvAm82t4r3r2V4WS7ykWvlpl4mCmEqzEFAQ3hqPRfFBiwaaslVVbthfVj5rOUpdhEQAaTRQUCWWtU39xgg3pWvNn7lbhNBiHudk3JvN0LAfajUBN418vJYMowu6kf78yDUbUhBQOnOZmHYvDy0HYDJ'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入1：')
		if isDisguiseMode!='':
			isDisguiseMode=True
		else:
			isDisguiseMode=False
		
		isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		if isSingleFile!='':
			isSingleFile=True
		else:
			isSingleFile=False

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==True:
			projOutputExe=disguise.randomSelectName()
			projOutputDir=makeOutputDir(projOutputExe)
		else:
			projOutputDir=makeOutputDir(genRandomFileName())
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		totalFileSize=0
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==True:
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			else:
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		random.shuffle(encryptConfig['fileList'])
		out.outlnC('[完成]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+'merge'
		copyfile(execFile, execTargetFile)

		if isSingleFile==True:
			if totalFileSize>singleFileSizeLimit: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile
				# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
				lastFileSize=os.path.getsize(sys.argv[0])
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{execTargetFile}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		if isDisguiseMode==True:
			execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		else:
			execFilePath=f'{projOutputDir}\\{genRandomFileName()}.exe'
		os.rename(f'{execTargetFile}',execFilePath)

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___RI8hn7fH4khdNSpQjtGTm1KJdh=''
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==True:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			with open(execFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
				originFile.seek(fileOffset)
				targetFile.write(originFile.read(fileSize))
				targetFile.flush()
			# fw=open(fileName,'wb')
			# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
			# fw.close()
			out.outlnC('[完成]','green','black',1)
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

	else:
		out.outC('正在重命名文件……','cyan','black',1)
		renFileNameFailList=[]
		for fl in encryptConfig['fileList']:
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			if exist(fakeName):
				os.rename(fakeName,fileName)
			else:
				renFileNameFailList.append(fakeName)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		if len(renFileNameFailList)<=0:
			out.outlnC('[完成]','green','black',1)
		else:
			out.outlnC('[警告]','yellow','black',1)
			for f in renFileNameFailList:
				out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(-len(originTail),2)
		originFile.write(originTail)
		originFile.flush()
	os.remove(lastFileName)
	os.rename(f'{lastFileNameTmp}',lastFileName)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{firstFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___miN3jM7UPOM8mHGOVqbojo07CvE5xY4oDEAbvbZCN7mJ6O9dlT4NiSwc65ysXsu7vouiG7d3putdtqjMED7=''
########## CONFUSE ##########

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system('cls')
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(f'DESIGNED BY '+VERSION['author']+', https://github.com/road0001/ResEncryptor','cyan','black',1)
			out.outln('')
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___9FyRbaWCLp0TZTPowr4ZczJuffmFwtgWOAua3ywATY2WMCUsbHl64XZsOErUrAiirR4=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
