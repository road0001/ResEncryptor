########## CONFUSE ##########
___pIRj3PjtzABDJLNJDgtJegZTRiKA4nCuGYvkg5yIj5='pIRj3PjtzABDJLNJDgtJegZTRiKA4nCuGYvkg5yIj5ksgHlW4DEoeT99XXeCGcITmFEHFzjKVGCeDFY7xfZMmpfRoCY6EIWbzEbAYkfpBD6NTJEFoqTrFAt3zUXHDiuIc8HqQLyTrkY8FNhCoJkBUmfIfVqcehvRWBR8vLAHlsdkViftr8sBijZEDOmcVXvUKJvrUe5VInxfrJiL5qt5clm5RSb5CNJTsvm3W58xtOwkEjIfYa8A3lOG3nuNEnV1iEDFl2h1XgTksYUiMrmd25z1P83LlqkjpxzvRyIQibPeKbYdpjYD0oRgpVYy4YsNpGuWI2vrgTNtHVLbfUcNSN6Ysntvx84iFkAi4zGBm4rWpYmvN5euqQGXVqls9lutV4njDqR8tNut42HTS0MyS1TrVRSaa8IpxWYdAVQ0k8aiL5CAY0PbJw3buIPxHsAXxZ2Gv27sb9rFW9TQFN5S9SnH2nL8CnEGhxdDmlo6ZFNzujhHSuWmr9VGx8L3Ga1sGvApLZUjz7ncp6lnFJapg9zhKyI70qk7bHSSbLhmnUYiiGTd7iBNScucqNBeCUjiV39OJ8wDtWkQhlL8hcswlzLdtIcImIjbUWj5YPk4Z2VnM7CdWN9dfqAul0Vpa0uB18T93mxq7iUFtYMiUbbtgTsdoebpRTO7QMTw88SS0iASxnZ1N76SWhEf7Ygc4zzA2FfdobGVhA43f9XmbgGl10wuW68egN2M4j6svC3sPVcb09FIS9knkLUSJnDzV2n1lBCkktHpV0oTxoUVgi76iPNNXe6aeqD1oBVRniuZW4QcSjaxsSIZZoaviJXlZSAH7JROKvBdwYhbjr8nGnpdmdcdrShxVgJvKvtxVgSXFfTiIpGBGrfY2UkNyG9dabkc5nFpZ1sLet7zXcfEbxOxkB9zhIE23WKzlGf877XugZp5n372FaLmrqp3TMrhCRrhaxPRUtsJFMwBD8cfcyMgIugNDksPNbgpVmulj764J5HggkEfUeB11LoL8fuZkTyATC3oIEInL01f9G6w4mBYL5U3DSZOJgtaLHn062sUqFTsc0elfO7x5PQ5mwNOa1SaNtsMODPjfrcbewc3apenIUrZ3uYMnzl9UCO84ESiCMcldcdpcavtd6LjrCZW721A1ofsUtGDfjiBAQCMlIr63ZjxHjwzXqChEjCihToEb6Z8ljDKGaopFohYOKiXbb73FCwIfOfwsXxS9KkB587WEROWIT95QwO'
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
from loguru import logger
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct
import subprocess

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.3.1",
	"dateVersion":"20241016",
	"versionDesc":[
		"使用Python3.8打包，支持Windows 7。",
		"修复全部使用默认配置时，报错的bug。",
	""]
},
{
	"mainVersion":"1.3",
	"dateVersion":"20241015",
	"versionDesc":[
		"调整菜单选择顺序。",
		"文件名支持使用原始文件名和自定义文件名。",
	""]
},
{
	"mainVersion":"1.2.2",
	"dateVersion":"20241012",
	"versionDesc":[
		"支持空密码。空密码时，使用默认盐作为密码。",
	""]
},
{
	"mainVersion":"1.2.1",
	"dateVersion":"20231115",
	"versionDesc":[
		"调整AES密钥算法，提升安全性。",
	""]
},
{
	"mainVersion":"1.2.0",
	"dateVersion":"20231101",
	"versionDesc":[
		"优化代码结构，移除不必要的代码。",
		"修复在非标准路径下，解密失败的bug。",
	""]
},
{
	"mainVersion":"1.1.9",
	"dateVersion":"20231031",
	"versionDesc":[
		"将7Z执行方式更换为subprocess。",
		"优化报错信息便于定位问题。",
		"修复打包路径中含有空格时，会报错的bug。",
	""]
},
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___5StRU7zdDDIhaTppEboOzHUDQSetAuAd9IgCZvgyIwFcXXy5L5O4qjrhs8JPKlCffm5NsMM0r6qT=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	batFile=f'{output}temp.bat'
	writeFile(batFile,batStr)
	if not exist(batFile):
		logger.error(f'{batFile} not exist!')
		return
	os.system([rf'"{batFile}"'])
	os.remove(batFile)

def run(exe='', params=[]):
	exeList=[exe]+params
	return subprocess.call(exeList)

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___AzFzPoOPBitQJxoKPLFMX7K56nL2Ci2A0xNycE0Hc4LIeH5mfDQ5uIODKeKU4okF04A9JARywqVGTjKtrMqjRzpjZmhjMeJJHL7FDHDkyX=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

def getCWDPath():
	argv=sys.argv
	cwd=os.getcwd()
	executable=sys.executable
	return {
		'execFileName':argv[0].split('\\')[-1],
		'executable':executable,
		'argv0':argv[0],
		'argv':argv,
		'cwd':cwd,
		'realPath':os.path.realpath(sys.executable),
		'dirname':os.path.dirname(os.path.realpath(argv[0])),
		'realDirname':os.path.dirname(os.path.realpath(sys.executable)),
	}

########## CONFUSE ##########
___jD6igVow3fzAUEnhHyIgM03utlhUnCnY6EO3Y=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___3fIOjIpNEGGkIORpoUonN1uzyNtrjsZgq462HvP4939j6K40=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___EPr91YgDIXZsdByFGcrbTvLzyVoF11MW=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,cname,config,chead,ctail):
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,cname,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,cname,data):
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,cname,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___cAB8E6VbDSDgxuSl46wyiN5SQ4rBX04n=''
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___1rRmuhHCuq6gWlIc8XypcTsvwg3IrYlQ8NMVPX3tc3F3pS0sio9bbJiLQJGeNB6ReERDwCezwJlr6Ajw7wj5iAkS8SfyRKBdeNTvJ='1rRmuhHCuq6gWlIc8XypcTsvwg3IrYlQ8NMVPX3tc3F3pS0sio9bbJiLQJGeNB6ReERDwCezwJlr6Ajw7wj5iAkS8SfyRKBdeNTvJRU84rvLbebVInlNBSOTHGodysDc39YtWQvSu73CxEODMkueaHfvHpzTusfi4xYab0pS8fDDPtuQ4DpMdH5psZoNRE1z9P23Y5pG5MT9f7PLUmzluyI57LKQQQl5H18Qf57uyKBSNPD4592yFC7TdI9GgSQAZsyOMiXEEnfMloD7APxYxc6vzwy7armjpSp1QrhYCKVIZHCrAmGIuY5wrVSFMyGI4JfXtb6LHqSjwa4VnxjeyHce0SQ2sle6olHtvV0Sg1PYFVEzy00lAvZN8udDBIdDDleVSVpe1PVTIooVgfR7bl2Uz83xfIf34KV5Oz8qjSviEX8VFAkRlhP7bMJPGBkv96woneucd4ICuhBqnDeo08sEgfzjRlaXFknpi3E3mvIibd2tpGv9chc2gmjtkH7vw2QHwi9tSJgvNPTzE1zo3EInTZz2tU7CKf0nDhl5MbjzygkcsGdZLOhqG6ikRroGKFFBYkfMLZRInWjc6rW8FLroghG37sI3gN6ptRVu4aH57AGMacvgyDJ8y259fCZj3tX9ofz4DbkOTXWIQgjqsywoYt0HOtoBeOGdXAIz7n34M6wC6ZigLbmNCy7Ce0gOKXqElBY7ZK082UDMS5heaqiDF6O00pn7M41GpEF6a427FtJAtI7F8P3ZIlI7awot3TXBDh8noJCv7lSJPTLvVVgJjxlFFPdzLxBstfGTVrlvC2aK46GMn0wwQfN7OUWWJ7swExmMYnv21dxiJOFMpiscNCC8J8JSfScD3EMbyDY904ms4thTHy5xcO3AGTKUVX8RxWAuqkm4JnLh3MUC33GEdcyYXTNUwc1HYM7VhDQVzFYmAfqNX1JVKyNNKXNkbIavCGp5JjvDuvJvrEURal5DyVDKTM5nYHtQxeJFBMbsukXghOoQWExsN6wqSLxPVBbfIB7SvjXlXkAaPBQL05Du57JCyoe2Cix8SyZ3ZD2WLt4Lw27OLrDahV1b8QLDNmdhi9e7dX1PXCqZkSrAxrT1sJ7ZIZoJehheeZJeG6vQ7CUlZc63M6mqOGGZvSz6DrU37Brx8vhonDC55E45UUzUZGYYQUuSUJUGGR0Dc8Lnpy1d8yNWQVbQQTPBk1PZUr7Gp121RU3xyEMDi8kQ4eqXLogyIk1GCVre5vPcJaMTuQisNJcgoz3yoiUK5L1inl7ZICFHkgnU1Zlk7LfQf0g0BolEcRCkMsymP7MlFnxUr8Prejhs4S9hzrzBleooFlemjHdWbb2HB8RMk20U2feWyzqIcKDzSnCkWJzESVgvzyGMmWOaahczaH94sCa3kvszAFfSkhXIeEJujKPQNLaKMv2dfLpPt76ODmzDFoAViyl6XNGBGKE9OHaTBtvYh2P7j4HnXUVfq8Xxw0wdF1vxy74vqM8YHA4Z167ga29bfGI5KbTBdfmS61WCRULYs2iPTClYTOdVT0m2wIoy6BKrXrIj6fhoRsd0Nhg4WZr6po3wWKUzMjbYUcpj92utCBW2amMDkdPa4b6nPF1m2hangZnI8LlhEh81CYQFigXuFOSYYch0QLaynutJhfhrQgyX1EB4K2pTGzfBdFSe1D9NmbqCO0xIFP7CT62riD1RHU0cFqdVdnCh6rIjlQwGXXBERmaFtCXtuyoHxo6cAfXHxgVMJ5S5MpDd2fsgu3l349ICt5luNE9eYq0kpihL8MAURSBlH5DuM0uhXfEPfy'
########## CONFUSE ##########

disguiseModeMap={
	'-1':'原始文件名',
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
	'任意字符串':'指定文件名',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
				if password=='':
					password=defaultSalt
		desc=input('请输入留言，如果不需要，请留空：\n')

		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择或输入自定义文件名：')
		if isDisguiseMode=='':
			isDisguiseMode=False
		elif isDisguiseMode=='-1':
			isDisguiseMode=-1
		elif not isDisguiseMode.isdigit():
			pass
		elif isDisguiseMode.isdigit() and int(isDisguiseMode) > len(singleFileModeMap):
			isDisguiseMode=f'%HEADER%{isDisguiseMode}'
		else:
			isDisguiseMode=int(isDisguiseMode)
		# if isSingleFile==False and isDisguiseMode==-1: # 非单文件模式下，禁用原始文件名方案
		# 	isDisguiseMode=0

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==-1:
			# 原始文件名
			projOutputExe=encryptConfig['name']
		elif isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		elif isDisguiseMode!=False and not isDisguiseMode.isdigit():
			# 任意字符串
			projOutputExe=isDisguiseMode.replace('%HEADER%','')
			escapeList=['\\','|',':','"','<','>','/','?','*']
			for e in escapeList: # 处理特殊字符
				projOutputExe=projOutputExe.replace(e,'_')
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		if isSingleFile==1:
			projOutputDir=makeOutputDir('')
		else:
			projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		fileName=targetFileData['name']
		filePath=targetFileData['path']
		zexeFile=f'{projOutputDir}\\7z.exe'
		zexeParams=[
			'a', '-mhe=on',
			f'-p{encryptKey}', f'-v{volumeSize}b',
			f'{projOutputDir}\\{fileName}.7z', f'{filePath}'
		]
		run(zexeFile,zexeParams)
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, configName, encryptConfig, confuseHead, confuseTail)
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___RnNDBh4naEMCsfA3yYU5f3N5Ofj3C2wCjJRI9=''
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile # 此处的EXE使用绝对路径（参数0提供的路径），避免因为工作路径不同导致的无法读取问题
		# execFileName=execFile.split('\\')[-1]
	if not exist(execFileName):
		cp=getCWDPath()
		logger.error(f'{cp["execFileName"]} file not found!')
		logger.error(f'Sys.argv: {cp["argv"]}')
		logger.error(f'CurWorkDir: {cp["cwd"]}')
		logger.error(f'Executable: {cp["realPath"]}')
		logger.error(f'Sys.argv0 Dirname: {cp["dirname"]}')
		logger.error(f'Executable Dirname: {cp["realDirname"]}')
		return
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()

	# 按照范围遍历来确定配置文件名
	configName=''
	configNameReal=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			configNameReal=configName.decode('utf-8')
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
					configNameReal=configName.decode('utf-8')
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
				if password=='':
					password=defaultSalt
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configNameReal, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, configNameReal, loadFile(configNameReal,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			logger.exception('Exception')
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	zexeFile=f'7z.exe'
	zexeParams=['x', f'-p{encryptKey}', f'{firstFileName}']
	run(zexeFile,zexeParams)
	
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具开源免费，禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		elif sys.argv[1]=='-c' or sys.argv[1]=='--cwd':
			out.outlnC('Get CWD path','yellow','black',1)
			cp=getCWDPath()
			for key in cp:
				out.outlnC(f'  - {key}: {cp[key]}','white','black',1)
			return

		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___cRO4AYwtCmqvLQRy4dS4vWO20euCAli8wZCK9j2DtDiixyhvMdRVtTta2D2VqNa5AngKBUIJWpsvCw7QkiisrlboaV=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___Umwyx4AcyC02VpeGxaZpGQhZzM5pfDhwaM4090WIof0tqywZj1UidvEuvujIjc8pSQvdixNBdXrZ06Xhz8zJ8XFXHnUFYIkgYWSczbNIi4t89=''
########## CONFUSE ##########
