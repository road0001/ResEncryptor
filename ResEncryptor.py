########## CONFUSE ##########
___sTmRO05ec9WGYv04paC82Cswzmd4wTbyc3h5kdUqMIr=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___hTpqlXQi5KTkulEj0FDUkPpQCm39HoqQw6wxspVAiJDAVgiP20wjR8pjfb0KmvFBbLPADIHwdLgTVxIX0BsVUW8qsOHHLmA=''
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4270000000
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___C4hud6XbgQB4TPO2Kqea6JyGrGo='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'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___9F4YwN8Q8Ki22CIPFB1y36hi0Jj4twQ1nhi40xGA1gU2xTRZ15KlL1GmVg8Fm9q1IK4Kp5Ah1e4mzMDtiHmsUBoyk3lMZGVuVZraZ=''
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___g3JKDlKq18Zjric93B61DW5RpbsE2mHH4PEzMEWWOM6urd7g0g48s6dOYsk6CPuU27fzRX56=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___sNC159zvfSxNUoXBtFyUwmEnxgA0Fxf6FqRAiPkUgq='sNC159zvfSxNUoXBtFyUwmEnxgA0Fxf6FqRAiPkUgqfpAGgzFh5G3jgLuT379kf2SyqInBxdaHg1GSRFMVb8cVG0vhnPerqDZnwwkSjuELdsnNwFktPBkwfoWM04qkKl0oraSQJoGPcYT9tooaeQgxANSxV06KROKhPyIDR9A6Cram1OV6XBxtLxYun7T0iNK52b3e0a6FIpZsgkdoQL8hmPbysAOi35WxchZjterlZmjgwPmnHbX7zr15QBEwnxCb4qs1HVia3as8J0NXva1UjseZBhrM3tRhfeatEkh2k8etl5MSSKDCSvlJHrRD7o40XCkZ5z4tmwAs2kbG5UlBgZF81HrN6NP0WoSzt8O3ZrgOVyBzAbzg9YgXwKwRrJN0tNRwcaTnhnfAWrF48aQODIiKPc2TYGIPPbGQEpmUOHlt46KxGGMxpkX5rhA9VZQRKmY15jPQfzSOVutIzkU6xv5PaOCg6yczlWJqfNoYrhu8SLhQG2pabTEXIVgciF3dZhLwGx3A1LcrwgJPYpo7eLyGOmSusOpCrKjIRmnqeGi2eJCDBUXiUcXojB5Bhu8A81sPfnpjw3fHRWu3nlheJADk9jYjwr3NDPzzSiIPkRCZfgsQ2Ri8tMS3GdeZCrQS3dJAbOOFYHCmrJBMHSdHlt3vrbNSRntHYSiRQbRJmpjqq0Ltfu25ukeayBgJoiR3uvEbKnhZzwWdDgl9jiu225HAzwFrFHrmfMAEAHH4Apj7EqQVb3C0KwpAPVygSlcyDDsUJ7kktoJPnYjK6A7XkaCbAEbVM81MSHiBWkGbt5ZesX5KPgLGS8bvosFbvGL1Q03hTLa1sbkCxhLRxNNnxAxvkoq3aEI9Loo87lUQwlTXLRg5SZPzli2F8mO1yoKDvRb9x2dyhPh5tfbWjoZoiCDoZl93C7I6O3dCf1ju0KUUa69qdZZ71a4Y67It7MvgKVImAbPCyWyxWxR6cYIU65sYqfDxrQ2yMBFUw0wCwh6VmjeDsjQpYCMk4m5DCmutXRoeC6IzrqsiIaTPHD5rPdeFHX2eD88piUMRUi8hUDg5Rlsa3DjkzSKbH3ZVRP6Kso8a4l6IqYN2YgVPe8avFwvk6hKVEz8QMh1Z7V0jP70414W7fSmm3OWj8ZgwbrEuMS5uF2KHUICbM5eQDZ9r5Cp2AlNPer6U0GyOXXReHdnFIOkIcgWz3KLPmqb45w0hWkifW49Ca9NUJ5O3kNwzP3cmY54tYdBrIkmwWRofAi1SpKOCkr1d7XjtpEdcK1Gz5nKTBlJZvos6O3KWgjWWVGCHqjLaLZndUQLe4njmXaKZk28qKqjv'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

def genRandomFileName():
	return randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))

########## CONFUSE ##########
___pVmHTWN7sPsyyNEBeSjsf05tfeltyApPLNmlC0kEZCJRxH5n1TfwE33syYXUH5maCtBQr35GI0HqR0zKoPuVVUcCj9msDeOeoEYDWoFp6h8F=''
########## CONFUSE ##########

def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入1：')
		if isDisguiseMode!='':
			isDisguiseMode=True
		else:
			isDisguiseMode=False
		
		isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		if isSingleFile!='':
			isSingleFile=True
		else:
			isSingleFile=False

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==True:
			projOutputExe=disguise.randomSelectName()
			projOutputDir=makeOutputDir(projOutputExe)
		else:
			projOutputDir=makeOutputDir(genRandomFileName())
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		totalFileSize=0
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==True:
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			else:
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		random.shuffle(encryptConfig['fileList'])
		out.outlnC('[完成]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+'merge'
		copyfile(execFile, execTargetFile)

		if isSingleFile==True:
			if totalFileSize>singleFileSizeLimit: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile
				# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
				lastFileSize=os.path.getsize(sys.argv[0])
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{execTargetFile}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		if isDisguiseMode==True:
			os.rename(f'{execTargetFile}',f'{projOutputDir}\\{projOutputExe}.exe')
		else:
			os.rename(f'{execTargetFile}',f'{projOutputDir}\\{genRandomFileName()}.exe')

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___6IB4xSYf8bPJyvHWiA4vVbqJPbSPtKubOlifavD6EE8A4lzCV1cE=''
########## CONFUSE ##########

def beginDecryptFiles():
	execFile=sys.argv[0]
	execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False
	while True:
		password=''
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		out.outC('正在解密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC('[解密失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC('[解密错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)
	
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==True:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			with open(execFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
				originFile.seek(fileOffset)
				targetFile.write(originFile.read(fileSize))
				targetFile.flush()
			# fw=open(fileName,'wb')
			# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
			# fw.close()
			out.outlnC('[完成]','green','black',1)
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

	else:
		out.outC('正在重命名文件……','cyan','black',1)
		renFileNameFailList=[]
		for fl in encryptConfig['fileList']:
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			if exist(fakeName):
				os.rename(fakeName,fileName)
			else:
				renFileNameFailList.append(fakeName)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		if len(renFileNameFailList)<=0:
			out.outlnC('[完成]','green','black',1)
		else:
			out.outlnC('[警告]','yellow','black',1)
			for f in renFileNameFailList:
				out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(-len(originTail),2)
		originFile.write(originTail)
		originFile.flush()
	os.remove(lastFileName)
	os.rename(f'{lastFileNameTmp}',lastFileName)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{firstFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system('cls')
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___Cd4nikJC78lSrc8t3IMABeaXLasv1QKUBEVH=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___sQlOINAagP4B1GDkNEFY2xoGO0xAcCZUTS6WVwLsGjmcst0m=''
########## CONFUSE ##########
