########## CONFUSE ##########
___aTim6yCICtzMBvd8Li8mpXXt0wf6e=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
from loguru import logger
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct
import subprocess

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___6QQ4u6Db7aixadGzkwYtRpzxZe9SmJPN9Bo8PQJW4JC4G3Z1IOhN4RxcuXiUP8oi8CMrI5IJY1WdM6c9ixKPX8ewyIQ=''
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.2.1",
	"dateVersion":"20231115",
	"versionDesc":[
		"调整AES密钥算法，提升安全性。",
	""]
},
{
	"mainVersion":"1.2.0",
	"dateVersion":"20231101",
	"versionDesc":[
		"优化代码结构，移除不必要的代码。",
		"修复在非标准路径下，解密失败的bug。",
	""]
},
{
	"mainVersion":"1.1.9",
	"dateVersion":"20231031",
	"versionDesc":[
		"将7Z执行方式更换为subprocess。",
		"优化报错信息便于定位问题。",
		"修复打包路径中含有空格时，会报错的bug。",
	""]
},
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___sCHy81rFfnwYP7sdi9AEohsVu2GsZLDq20JRiIY9d9uddc818TOpJ9pPzxteES9AP79KHohB8mrIMZMFXu='sCHy81rFfnwYP7sdi9AEohsVu2GsZLDq20JRiIY9d9uddc818TOpJ9pPzxteES9AP79KHohB8mrIMZMFXu6JG3uM3ibdtJcdDUgXsT0MwxZD2rRDRGjlpL12n67BDkmwl5obnLR3yuxUaBFTfJmC9ezwO5uTR5D19JsOLDFkmDQFq0HCPISrD79VO3VUQyCfBk5pVlQhxhcxNBSkgNcfF8vaWD1Q8oudWfpkeu2zOBqozweOWC28q2dHXj7BlF916xeZb6t7hgSzN0zf9YqqmTIle6ARMTIixu75OJuV0JP1J2FRqfX3kxdJSYcTnc7BdG88PIvojw5ymJ2aq4mltzxZUe3JOn9aPHkVwblGvktYXPTWpVw3mjwbCELfChp3845aqz57Yl2wnUzAY9b5IBj4WaYi0hDmLlX0ze2Ds2pDJ6fI8CjRHLQEcegi9HTYyakfbBudcCAIOKZZQSna6GzESw3gs1SSGoVE9n1809W5xSBuV3AEJFM5CZBR2IZecWTk80D4Lm5tPAYu0W7x0RIQW81pBXTx1MyPb8jnvnQyOZTN5rGkLBR13EmGypp2dxRNusug8DhqiRUgFEa3eecfUixeNlVoY5KOUYhyeWUor6INo2I7ZI3InN4Rp8GzjGpKKY1oFfznmOFVJOMJZUzDx6eCTiWXXAGfQVNrSfuyz2EL36OE03qRWmbBKvkgbdBr5R3B68lWa2l0PtnvHtGpyjUFpFouc9zQKzYYehUAzCa45f2ST8WVULMUhMwNsO55H8GSdOy2MFZ6t3D0deQ0Rwjebz9bzTvcdz8IAiyw3ZDZNClIIzNuVVgCiGE9vp7hOQC2iYLo187QL9QiGeQspeEVcrGh4L6aiiJiXlBIxX0B5SNT4QXaGn73vLsjqYhmgPhEuRJTTEAwf6WDtFEG1z0vXwc1NQb6tIdwubBzw0rogoWAhf1v3HpRnTkfPvn6X8ncuaH0TxvmdjO7AkpgBMqIzoQdEHD8lcvGB7PpeG8yHCE1qAqM4qVXBlsM4vkGr1WehJtblCypafwnd9TTM8kvcExGhjLIJzcbaqSPxTg7iz8q4w2d6ah9mX8Nqgs6DCArsZquu2U8DmE3lYOF0I8niUBgMuUTiwXbv2Wzz6TdKemoGNYPmqXqi3tEbQzPZra48MEQZhG6h2XWmXApiStP7x7HKcgVZPgRkWxDdFvI5kgYybOkWG4gLVwmD6kSiWu8u0CpCstvXfVYLGC6SjO5heMBkvBdxlIetrueLgt9Q4soYwHaOJMVRgBYRxVWNXyZeztN3bklmpxBsGuOPIPSzkghVFjlm7sv72yClT89YXGeHtMIxliSw1B5ZrPMvADD2lUvEJDw5kAJ58Q5mZBKM9CIZkkOydLV2PpzDjWITJBtZzN03bt86IOwTVgTL9siKgoUnnmVQHUwCK1Lju1LmRiFsJDbVXEjnjbGypSmA2O7zrfb9vvSBAynPNuu8G3JM3Wxg2bcn51Kq3JnEPbMOg4yVcqNM67Ebb1w2s7CQp3jp0BJpnpL5JxCA4VonD4wnhHVxyXohWyLJWtZnx69MKSrFfalpxgZ3EuugSF7UMlQe542qibm8pGzcXdbmIQXeIM5kpQMsNkmZwiAUHA3plVZ4JDxwIWsb0K07QEe2Bn3TSZvv4xq3oFMVCrmf2WEy3YXhymRlFXiFzLPHgDaXkryPNeUQ5wQWxqr0mQxwyhCZRfmvGZg9qvQsjzSRKNlZagqFsTComDpH1UDVNb6pwXB1ckySqeKG2VfRr6lz3dxDv6QV9s49CAzIThJgCJeLTSaGoSNKuNacPQNa14oSSOSyoyEd2cXyXVSfOFAMXq6ho2iFXVy0JbbovKp5iQZjyoHhzVH0xL2Ruw9TovULvuVHGmMib06BEFOdYlCrHx2Pby86AaDuP4l9XHacTyQd443vSvfL7eRU97SPsF9GRocsIPaDvWWY76ocXWAFFklSdV59y74A1p4jskq2sc9MJwfEYjQ7cZucql3ZzQuj2HRbHdqQOzoeRHRUK1G5bAA0CcfF9X5D0nqG9Lj25KjPVF0r7ZjrmchWHPIFUDD59nUeV1gzxiRAtaTZ7i8eLPcSk8PycysqwvtY3Gs9FamHfYsRc36V8KM6OIqIZTSBFrQ5dNXsGyU3jPlwpUC83IcNGV9wxx68KIlDNGxPCYg2Vu6UWFFZGKypT1hbT5Esys5CsXAuAXfhzqb0uj0lUR0GRun30WhIpDRrAeX3FagK4ZX7arAdjh7iFOknhc5ErXsYCmnmMVovzIXJL8dO2AO2zV6Hfbmk5bXpv4kiwRTE3Yvp5lCR02LVPoi5eY8StSydtqk8E9iurPlJe48Tro6s6TiSSnFEvQN2iybf8pa2G8dPnDxqUkmXzsdTcJkXIsmzePdWQjU0aNnuWtaNGKT8C6w8Vk2VPqWqOo5mAsQ8CwUVMlMI8MDBb08jjry8U9WXnMOr5yCxYTV1ZTvr0m2C9QJv1IaB3Ru6pjWmV08w5YIrMv1HdnnJqDkrhHPT3HsGNiMsLMLSXuOOu02IZU1CvZ2MbMhilwCaMX6D3hMq0T6dnyLOEQze2V4fawcGmEU1dud1p0Tv6KbfW5CHpDNZsbJSQgP5v1x6SuAdOv2Z3IHmqeYf4xmEIAFrePeuZgHlI73rMJm2Nz057QLvtKDB7KytpS5KVjsJYjsUjcLUzjIpibpJkLCrh4PyOyPD4PBIvcYb2PapjVdAAbWnLFadn2wNkYqEHCvGkOr6e2INkySSwFXWPqBXZ4Vpjru9szrTtv9gza276AwK2rKpIdOuUdHJMA8nOvGQJd595irZzFCTl1LSrAAdQK5j2eg6CzF6CP63lDOTGKwGfP9rcadGKXCZjE4TZUePsqLiPSMyPpkDrtiGNohf0P0LAXhq7b1ebDxr6v6HUX3DRGYYIS7xWMarrvZlmbRo3Pcu7PsKaSecwxfSGkwQNhWa6cMwoeoInJEGvL8xmxzfKX29qRzWkh7RtelJ7i81yNFmTVptA8F9XXFLxMfP8qFkz7jAKBwxHtdodFIJ6e9QxePmqYZXph9vHgwrjClBUIsjn7SCEf7e0DXaV5fF5JzxuLUj3ZfqYbpwcTh3j0MZa3rMpXjmu916PgGvXMtteqx9w4K4n6ItM2YZsqEXcQ5UcVNaRKMG3PfX67HjGVHnWwKsHfLX9zzhy4mDnTEsfZzqGIKHjd0R4YIIURhTmBbPTs7aV7k9J3IGjtf1cPeOUyzj60YwHTJTZqaS7jMZCAxz34I9MqTgKYsLXU43KOYQezvEGCAJ8N5I2xBD4gknhpTuN2cffnFPSE92nyOZ5i6ZLQwt7awts40blny4GLSfeKbb0wULUWKHAnaOsDaHuLYmOX1CMhFzjU2Tu5rpx8r3fQnOhQiIVnYmS7BdywwzV8SkL4iacq5SqaVSBcvaJ8u5CoRObKEEe6LaCt4Ya6nnq6fTmCcgquGI0JDHeMjDsF0zjfV56j6TjRjxCvXz16RkdkeaOdzIyN3UOfNC9zkMdZZdb3tq6zLPTtH7iLpcEATmjzFV31o2ZrUnXRcoNsFNAOjfqSsFkA0Suci5A71tNV7dxGa8QoIUtADp8jjJkMuel7jV1fVO8W8f2YZbcxve4SSIAt2uxHZrEi9o4o688Dx1y9yLjmJhNFZqQhbsI2VaaZ6Fq67xRf3ZC11yTnBpGyahBVwMx64G9XYtKnDC1xV8MpCAIflh7X1mpoS2827l08pukY4MXPcd3B7kj9zHdPrDROFSR45NwQRtuUNKphjRDeTufKKbOuv0mSUTDIDcOpQNV3hVDjH9cxN067DKMkUk4GBa7AgQpADZoZmLZWXvmaOUXg8NC8PWHlqdlFBXvCOdl3H5aBQUuK0St0LttuwuJnS4aeLhCtj7JeRhLAsqBQSfACv2Z092pcLF3iKJhzHWNJ3IA5g4Z2pE6pM5Tlu67Xx1ZtsNBvf7lWzdQ78nD08efQhrFuAJbE4sCM47DNvRpnRrLFa2YkN95NumgGL5NBYEWXLoVOKvkkhgJQeYoAxFMx1N6IVMyFIx1Dw9LBf8drmKrNbpcAedDNZT8zLdBDpHiQCOSAjMs5lPrWplw7593XgqEyJ6p81dx7tLkmgHv4Gt1s0NlwjM9ePVR6gwCNIIDg9s2LxUMYfznUcPzOxhheZLAQsLGwJJRfkLw8X8IzFns0kqQwRhmNzDDmz1OCzHALLGH0ToWw7Tm6u30Qy8CbKQh6CooB0gkU1ajBLjS8NblvPetUnaXitz7swMuXZnsZnVr9trP0QOH2GdJs1n6LBXSqzOuC2qYv9syKq8CMVhzerXdHm4cO06s1b3zDVhRIP8Zvx0tZDCCJflHdrO9Ei23CsiZ19Nh5GdS8DK8h5OZNRHGiv94XW2CyqUJywEJHg5fKhbksYpYVwPKm2oxu19Xl9bLMJHr1CjIlmgwZqLjsP61qvN21gwj3UHO2XkKQA7WS7Des93OKsnhMw6wKGmXArgw92VO2upL1W5AJR3VBkDDMow3iHWuCdnohhtKAbY3x0qer4FqQ8YAppXKIyS64vkkQ44vnzZOdAXolxeqPLKURhTuhN4NFjmoC93XmanekVh4sYh5ms2vk11iQ62wcee28gDVqZsmBw3qq4llT4WNKZb4ydKqV221WJjGDQz2pWXMpngHL7bFJBUs0GO9m9QOimM1RzUTbRu03S2NEHiZ4X7uXpZuSimW3YoKYM8UHBHms10w8Yg2MyrLnaIpOFk92z7AakwZmRg5GTfzoF7PcYb3va38IBf47mBk8pVqIZg56i20k4B2CxN3zlKl7xgqHpKzwzquKW9aLsFWC3qxajEHL6vuB0gNEX1NIojlWWyCXXfKygroeFn06KETro2YWizzzlvNYFfttRS348NjdAcax8b1dn1csOh1tEG6wrnVy31b7xwpVwfwYY7UP0wtTKfqK6y1bWLjzbGMtV5V5MArnZ3o7d46Lzzo0ylJBmYqaMR652EdHe6QAIfN1yzd1RhFDt9RqGBhEcXkv7ElBASvFKX1oAZTYWM6UueTJE6ljoZOYKP8B0bbuUtwFGrn8CuZcsVhmbxDyvtlE6Wmnvn56aIYOA4D7ybOncxNcm7npCuSFCf4VswP2HF06ltSgRKO1cn2ofOIHgetBzj3PSVq5cm688pO9lhnMtjQsCK4z2GWGy2Pz7YHmO2uLocOZcAPN9AD9YErpgYO8W60iEfD2OH3gE4gfC10NVQgPQc4IKDGL4dxmQ6nMbPp2gWJfpNtoj30tkv5p8K9Vlv0b2Ejl8Sn4p07NfPd4570SuPLLZqkTtlSh6fXo77zMhpSi0dn3VtsssGaREFPzZvrejBIQrLXogwkDCj0hIH0JJKjaM2zNU2Tx44eYCn8G7SqgTym3gr6M7gTLhbLrdsDq9zdp1e1edk8sREQiDe2MqfvKdDfyv5eN0TjTVIHFgZstJ8CZQivj0cHIKYYtJVU42MTgUpCfcej8yt50jTh22Kl6lnj0Ifz2kLYm9QDF2DwdpHvgA5iEaOWQ79JtsEHhEVrcnaIcDcQTubbpRaDxC1OM3DVfpA8CBzNeDJpczGpgzbER1FDUsjxxdJqha5oL7oX4iyCNSaXLt167cLsMQtmKRjxcz3p5VS9ffumtKsc8GfsbxEuHZx8j1v1uiTLdUZ3mcHRI1v7ptSrAwjbsUDBH3AWEDcoUMS8t29sa9mf8CMVYFstvAuFTeWXlEXODlGihIGa5L7OargJHCO12iDSD9kBR3O0F6yKBywiuOpNqEMHMZcL06wo8V49MM9IQgwSWw3Yk4tWJYUNzmzOSCYsWydJtZxUgmWx6VPSISdPSlZc497924EpHOhJCHkuI2tLtx10ASPMymki8YeRVt2sTKCtSrIWD0fXHMgyi8gx0MT3bQA9jTCFq34s5lMipWYenaYJlrsqZ9oSezEmhTa6CP4J5B6ACj9kJHBjydJgRNtB7ftQ2YlSdOH4TMMHzXvFAOvCZ9U3CAx1Cm8C0rY5n1QLUsDspRvr3O0NaoJUxgG30UFLfBQ1g0egKn0fIm20X1nxLnwrGNKdYmo1RSHrPuUl1gKmaQXquw7GF3aoYoE6Uk4vrUuJHL6ParbH7pPFC8NYYGVJGoMAvJVnqODnA8Z19L2eSYWBo6wSvaWqF0qPL4ubJJJYvdydJloX0d9inPzRtsLlAZ30LchgPTcPPQBwwjdX47gGylZ0qLAIGSxrHnm3cNS2K9eDz2QYaZreypPYPpWKU7bLFLd2UcCb3d48rzGOaH3CIrE8dfVXIN0rtzPXWr4hvD3zVl3pZGA9XMxmqNL1B9xwDN0zCOmfOQp3Xb2UWulrunxu7p7of8GArZQ8putzCraqrFxcZyohgGhVjSitd8aXWbRBIvbsUFfm1HVP7QmE1ZA6SPFEg9bzVomwC0wmfvP3dPnKxiovuspbhcUWEfsgboFG1f1Nb3eib1WQvKcYijL3O1q9XJs508jiirDFNL42snTGqdC6aYA5lCP4XB8t1Fj16wgBsRSHypCv8rJlAXGmjJImG9ywPcq7jwrQ1hBcAONIOBW25gXSOJBylSqSSZBJGqLwnwPyeNbbwxsOMIGuf18sgsijDlfPxhRySRPuOHInXZ55t3FgtHkYa5fceFfpc4wpvsB2uRD3uqboynpNkeUi06gHT0d9qZ4BooLKPRj4m4aIY24DEEMydPoYYFfGWl1Ykn4yChnmfiWyQMR4pYQyg7SxgoWljY8lUGjn2O3XKComBoUddnufxSjVIvXWaWZyeA9t7VYMOKQ82bvCs7zhLJGLdEsumQizm8wNVZ0TF5Jp9Coq3MReD5uPEPSpspI6QsLX5wDSjnu9OCm5egkdNTUPqksQyclxNoEsbmBEBmfVpIMNGJM2tH5nrkEuG5YRSoMclYDxISgybuGPTc8YagNdRItBe1hedrxIbyZRZkQF4XMJZZ4myXhSeEDVY4yOzZb1dnrSR3Ti7pcVRjYfWqM7UQ3PNG4yf2vrhegmCxYhScHC9LF5dG6yxCfEMwzRkAkoyNZmmhGci6EKDIpqeFODnCwqLVRUM63dHduohkY7WgUqJfB9npzk3g1ARWDj084b73Olx2uv2LGKJuRKaiPZV8oYgDupkouimrjdcusJ8ucEzVtObKvyaHeeCodaI9rJcKOzI2YMJqueZPq6DscY0XEe9rUmcG1tMDjRAB4G3mBYltZq4ubujc43U9kGw2uqOF6BFnNwBoXiIas6Bw01OixheAUOzZaKg67OX7mvebnRrDNVM6D5q2uSD6FIYKGAR2622qhjkv6zqtcSFFtRtjuNvYkqjFULpYW9x30ew0iVsAVD0PqsfUP4hMJQ2vMwf8XZ6UOxw9mXam2NRTrq0y2N5UUs2WUJYE60lnPzE8tp9rFWt8KELu9dUPwrZggxQCPqj8ckxQrtvIKJ8fNOLNNbvbnHKfoyvJWaokZ0uzTLyh11UXRnFpSL3qhQu7kUNNbnEVpaxwe0HdIsZWknkQJdZQmu0X4pwaBD29pHDCrS8rKwMnqINk5J6C2BlnUCuJnNSkkT9i0IlsbZ08yi74leO25O5pKM53DYlZI6uiS21zVrQQ0bhR8oaeD9l86KuX6BN5LitU51uZeLYTUq9u5QDQGop3CpwcxyRYEQWR1Bj9vlrfplJAXkhuzQ4hVzB21vvdgqwntTFUD7qQ0wKI7EynF8UpPAseLaFz6GjFGQqcu2jB0hog5vSCLSmZO5sQuNIpVsrS2wm6gx6Mj8reRS4ZnUs4WQJ9m93JY2b0r49WdxfnJpizswWjPuB50ZKNzzfU26SWy6MYHMtdGO3mndMzsoj6QiF6AVFDrwr0rYGsEdM20kMk3qHbuswpm5cTELppVXcUE9Y5QJamrjmkpGL1Vqi7Z2UPDorNwdd2NOr64AoGKtXtgIGEIrtqpBHZWT2EzvwIX6aq4RpDXEKQI4wixtV5ffMbRGPq5ILWSzgQMC6PaNhwvQ45WUhNM3mSCBPsPVXY18ZBH2QT0FWQtWzFPp428CKWB1eJOVue4UqYJuw1lTS40ucO8RudSf7TOCZIXnSyeQUSYnCnQ4LU9pjDdxgf9IaXoy42jupYLyDEXBKJTH9O9C99TcmDqqWqliYR6uzdEPGWiAW29bHImCrCh0BNUtvYdAVcRWUZaRqXDjpUxrsSJl0uWz2IRVOedFIJBI3ICo0LYqGM6sVXuqq2llFnkpEQrVLuK9loODdf1PAukz0JnktDHAXHkYUXzV199EAQCzz2apyvPoCBfU949V8rZWvgkfYO2WMb8mG3F0t66UEUyc5eiSPYhiGhAMjaDfx6jtCdH6pJgZG0m0TKy86pkjHbLdQD9mES1vjGKlwfPM8YnqZHS3h3aPfEUiXJ9R29hgXq1y7q6wIRxqoilI3C9t1czQVFkQ8mvPbQBrcDfdL3OdQUj2Nlgzx4KVK4Z6vvdczp7vzdBtibLUAVfBg7VQvnCUZDHxKgzb2tgEkDR9Xk9kQe9tCeTowXovPLBgAISBcUtN4ud5B31mauoJ9IpB7Ka5485J6H9iZvbzp9zidyC5yv76wie7keZnPJE1XayfNuKH4Q0QscGBLORLPGykN4RS5yUJAy4vbxhHtzvCCJf6KyIY6eVHA25yAaRDrKwOnpnhGlAMH6S1XnR8tdWTthhD6YmXJEZOwlNrRTDrP6bp90yahhGrAe1pD5ScllYNzLjlCUj7HG75SIeoQAUTm8z61BVBaRscZoWREe0OKfIEnnLCPkYKyRfYj2lxv1iKY9K7J50sYWaa3JwWBBVi4lrAlqzaxCB0nCUBGaroCb0RLEwufRZGx2mpa4i7F7u3miZp8IfVhSU4nf89hbgLHwoX8jBr7qxggKMFKfrUtC7pey6lgKnFtuBT5GRQskkzTZhHjTGyqlBcHnBz6e3KWms3BWvTC0M7faxt9umm2m5MEGDlMdiZ69lKDNGNZGXj2LOw6GJQAhJhs9jqc1SqlByMyMFhJWjfUxUKMHW2vu4QXwr7LHQ4sk6YVnbzgLxtFdIgDrtD1yYAzUFkeaslnYwS2O8ZGvCzG7FDYzyqh2N0YVm1HHhv4O9vvFBQtZ9KYv8UbvkXoihU5jKx9fkinZyBvRUif9D1kbeEqnGmk8Xie0UV5eJ5WtSJaWlaur265nfonvn0u0yE5QaAviztVC7oErO0eTE2yIdlhu4Kkqxsgo9DWvwJL9ghvbku8tT9PDTa90DXe4gKY2xvl54FmR8xrvq6E7xr9gemDJTL4Ft9XGhJjEW6yzfU1WCzljjVWr3GdF8rLN0MxGeIvSicFVjm5xvzhuy2URgaSLmhSkARCDzYNrGIVACduDQWTPPM8jhj6eDyV83eRbpfQFcIRX2mOnrp7F2Ox48fqovKihxEs4a7Qmi5jmc5Wo80BBmF33DKdjrZo4lurv1z6rrD0equyd3DVag3tAzLyvDNJfjqmAsEyG9Oiov8KApgmVXk7u50kcxkTKcYjgBGGOh92JJ1fvkzecTl7biIn7NseNlEz0KhXo25fdFWnrcl54nXJ1rZKUHDA6cUSrTeOMRIweLyOGW5ZToYBTu0sSXaYPJs5xBvwbb6L2tDrcXdWFKCij6ZHeMFsCT5CIf6YnCeoLqYrTYZ8rfPWnTJOzydaFaPsdiYnyBA21Yu5mFL6bGVlqp0UtDp35wUGE2Gu3JArHVh6kKeRlBH8tzbugv3VaF5P59y8cZsdW6j4qHS2dB0UHrNGdZJC6tdFHHjVSfD1MyfYjOqvmHBW3JT1eRbfp9tl09v0MQ0QIVtGQOwJvJkpOTGAau9Yy87muflPRaM2zLU9Rw7HOhzaN6yrUdzj78UNz9FeMp5AB7VcTpmAbUUTrjYpz3jdedhueeLffHKiljkhitHRU78tBAo0NqQPVB9NAvH0FbHt5uh9n67Hhyze1uEHhBmVJdUsSfsiTYTADwnZtHpuMgeu5hSZU2qxYW8PWeER9uKFd9CHtSGtqylGM8qXxMCZ0VqhTiFrO42AB0yeK4S8rgSFePdzjDKKW4aZgApGN2p1qVaPr653binbjRuO9rIZkYSh8cwoIZ65fVxqUxjMziyn0HuJi0DmScLiZRZWx1MPVJ5bNbRGn2FO1UBgJ9tHLybKIz9XJm40Kzccz6gg3FG39ljmh01y9wzN7E7OLTsTwGJePYnve8v4yy2BupEHYsg7ySNnIXMP4uURHPf8Xj48Dw4ByA4LSyBcynk6rUnTaz3unxjHMsUlrC8vhW7zV02vK7x1gPdFuN2XrJPxLEdqWvXaiTV7lh7FFf0uvpXtuFpNB0pEqMSgfu70hLZeSaBcVSOci7l05xdj1zi5TTOVBU3zLeKpnrDGGuW5eEo6fe6of9zDGb8lutPeMEYnI3mui5GcGwubpP1YD0GPDmzfxe5L33jORooa0Yh5z2UK0kpG1og181aQazsonUQ7Ryld25GekxJ6TdrSKIl4giKCWACpWftV7CvKPDqHj6bGWwettLzjghQ3QXcgAUweQjJEuBdnnz71oHLhjy1EWiH96fcxq9vr19hFkwQcsX9wprz6whaK1K93vF5jOpJE7bSYC4vkGqtRnucgnnWjGwAGSAdU47KwY06iY2x9EMLgUQoAuux96LRDdreIHMF1DEZtrnHzIt0SnoU2yF2BS718CAQxEz1PUV39StgFP1f8qSLU4VHLMNA0lxM9ytLvOG8IACnxChoTuWM1ymkSm6QAXCRrkirFOIhfS38TslaZd8JZB5Q9hXJCzdr6ILHRgKUCs673Ol5yVwUUqOGybL39jn75Bg669ON3uzB4QniltmcS7tb9USkb3ejH9RBTiPLfUZWqTWB4fACVgFA8IZnJ3WqDRGhOwxR0t2sYf57lMfnXydlVeDlMQQfdDZ0SSBPba4chhQUByqRw1wgDHmJiACd0aX8CCNUOtqF9Xvns5m99Bo61y1eNvN4sLuJpK9jQ8sy1IxG9GUXETvvDoXbGDKDfR5W5EccGfk8xvVPf4KwgqacFrfGcfHIRG88REjjeu8Qnxosrc2hnSd14qWwINXEcXbafXGMUyUaMUFyovYmHxocYlaRVQJJwm2HBdRLTUjDdI5FjqkAcE82wk7PVZ1B9XQMfALcyxcqqD8KsYOFjWeqvTO3YQpX0SXVLYyuMR7aaV4QEhNzkPK3cLneSDO6QkUuai4SS5QkpFcHq0LtSCD1SjjK4vKXanPoxgiasN0D2p7ea6IKPGPf70fKYOsex3qrk1J8v5T3RLvKlro9lQLzW8c32B7ttyvqJeK4LbWaYArb9oXDyTYxODwOlwreXANaAJatvNCLN4l0UEila92lmfBbP7l0TDATPh1KmVCNOGTVJYZhrY8KbdtJWw4clFYBBSpWUtPkJ8oc8dSqh73HwgYrqY0GxSg3gOlJaj6LMTiMLVLCmReKYdjcAi28WTCdVVZysg6gofc4tPMB02F1jA2WAj3qACYlRvwWX31XjqOvFDBJnH3O7HgMXgqaubTptuG7DbF9ezei7hlmapACdTiCoJ3E7LDD04G3pLEKCI30mB5v6ckLNL1s96Q3N335pBlzALzwg5AXe0fzHOscDJat41cPXqFiQZFRKQ5ni8kYVjJUdAeVe1agecZx3c'
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	batFile=f'{output}temp.bat'
	writeFile(batFile,batStr)
	if not exist(batFile):
		logger.error(f'{batFile} not exist!')
		return
	os.system([rf'"{batFile}"'])
	os.remove(batFile)

def run(exe='', params=[]):
	exeList=[exe]+params
	return subprocess.call(exeList)

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___SMSGV7dApq9YZgGeZM3OXQf=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

def getCWDPath():
	argv=sys.argv
	cwd=os.getcwd()
	executable=sys.executable
	return {
		'execFileName':argv[0].split('\\')[-1],
		'executable':executable,
		'argv0':argv[0],
		'argv':argv,
		'cwd':cwd,
		'realPath':os.path.realpath(sys.executable),
		'dirname':os.path.dirname(os.path.realpath(argv[0])),
		'realDirname':os.path.dirname(os.path.realpath(sys.executable)),
	}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___SAZcz4lDBOLDfWHw2p='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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___sRPZaQ39OPiIN6WMSMsW2xRg1Zm8Ww8v2frulD28S5np9iYxkjAczFxst2p9AOvKbFSMI3st57WlRZrvPHJczbUhJ=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,cname,config,chead,ctail):
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,cname,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,cname,data):
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,cname,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___UgHbCdBMS9yQCurmJyzOaQzIfn30vlVUYMyqQEgHS3HQajfvo2S83bll6covhx0WfAHLWm=''
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___ywLpfv9FODpCgrJHtuLtk9iHGNVJG4aH6S9ThWa4DmwU4zwmbZQ1d44CtlIP2iNBDLY4p3BOgsGnbWBa=''
########## CONFUSE ##########

disguiseModeMap={
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='' or not isDisguiseMode.isdigit():
			isDisguiseMode=False
		else:
			isDisguiseMode=int(isDisguiseMode)
		
		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		fileName=targetFileData['name']
		filePath=targetFileData['path']
		zexeFile=f'{projOutputDir}\\7z.exe'
		zexeParams=[
			'a', '-mhe=on',
			f'-p{encryptKey}', f'-v{volumeSize}b',
			f'{projOutputDir}\\{fileName}.7z', f'{filePath}'
		]
		run(zexeFile,zexeParams)
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, configName, encryptConfig, confuseHead, confuseTail)
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___BXuBbjl9Gq2wuq4LfTngeg023kx='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'
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile # 此处的EXE使用绝对路径（参数0提供的路径），避免因为工作路径不同导致的无法读取问题
		# execFileName=execFile.split('\\')[-1]
	if not exist(execFileName):
		cp=getCWDPath()
		logger.error(f'{cp["execFileName"]} file not found!')
		logger.error(f'Sys.argv: {cp["argv"]}')
		logger.error(f'CurWorkDir: {cp["cwd"]}')
		logger.error(f'Executable: {cp["realPath"]}')
		logger.error(f'Sys.argv0 Dirname: {cp["dirname"]}')
		logger.error(f'Executable Dirname: {cp["realDirname"]}')
		return
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()

	# 按照范围遍历来确定配置文件名
	configName=''
	configNameReal=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			configNameReal=configName.decode('utf-8')
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
					configNameReal=configName.decode('utf-8')
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configNameReal, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, configNameReal, loadFile(configNameReal,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			logger.exception('Exception')
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	zexeFile=f'7z.exe'
	zexeParams=['x', f'-p{encryptKey}', f'{firstFileName}']
	run(zexeFile,zexeParams)
	
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___0AM96PXENIlQqLG9QnFLxX5Fvh9rB='0AM96PXENIlQqLG9QnFLxX5Fvh9rBO875FPJ5l9zQYH5HvfsQBo9SugZjV8lzs3ZmtoNmnijE8lzZoCsS5Cz2lLklISJZkWGGLcafWpOVeJxoofOqDSYO5uw2sDOj57MtfHfFvkjVi8pa3iIOwo4vGpxkOjVrr1KguDdGwyOX7YdI3yP7jx24Wo3YjljkyMwnGtfVXjA4rV2oMrVi6OGq99L4z5X0KLk9kPHqWnJM4wBuleo2oNQEOhznMEeaPHRQI7EZtbGYQbWt14SHfy0VZ0ZXd6BrE034tysA8DuiKaJEhLnpvocVBQgCWkvFPI19WDSjuLuhdiFZvqUhDtiEcAL2Veuz76vzeYoEtHawCHYe9GUwzCdhvQ0CYkIC0teGqlqclG7oJUWjZhylrgFNZXKmKQuC8NcROsltCwJPlNbesCqfYYl9LRzlqBc2mlCeWyavAchk69CMBmDwJmp4d8XWL0Hz4gF6lZ5lhmaxrXBMRSZ6yWZ3lM2Bzxjrd6He7vHQHLDyrEDdnVKfHlKnIZmdBj3CeVtTaQCAZMG7DumRvdSI9YAWQcFzj9P1DCWdXYr4r6V0z28zqvnLoqSyXxYVW0Khch9JUmOHZsoFTMCy1r10XZws3JGf57z454KaVwuNMNaU3lP9BX7fCgfA1edjA8ocjdXp6zKMReQrtEzFBkKnjMTBpOhNqMJ6PT03syz6mqLKPmSDYoqVffr4cPyRuBbbv3mdMYqqYgNb6Sy0qm9KW9FlYDEg2eocHFUTrY5uPzDr6hlP5M5g3WgWEj6QBCcO72FBNlEXsqdMtLrI2Thxnwf8VuEihQfeOlUSoHfeojUqid3OVjGTHcPDepM9fPvzKEPp1Djgvwh6YkUvorOsJsPal9qfvpnDrh5A4xD2ktn3VBnzEi0djVzSqHbw245eCqrmbxiWUVfeYlxTsxGY7mdq6kpYCwXoaMfzVYKgJjl94QcBq2ZE9rrpf18JPpJG5LOSgxxqbEZB5Z8BYAsmBvcH0kwCIVD2CYfYw1cPLi0rWtQvgSyxU7JwBMF54DE4waOe8WI4bUPO5XX7pVIGDgH8ZSSCTo8x19jDvx4EuQ9uWqJpXOKTlxff24STfJsDhiBordqItk8nre2MdjYUsTNddXqvzs16RULMm6sjDzxEz8tTIycGWDu1LskTqBuyWTyjYnjYGNU2hws0QQZC5hfF0HKiYBVgjN1ctcgTgUh6M7MXHjOtXUNe4F91jW18QaIzKPOGVff0AxBWOTIHhWM3fCUr6OQ09og683ww20PuH9V1pndYX0vKVwy0od3kM1bsK5K5TjAPSAicWouz2oxcXhDbi5H5VWy9yjGFVJhQ0U6h86BxgfH4lPytngNkx7x6CkP2GvFN4GS6NuEVrEhG11FTM2cPkFnnRG3zoOE5XUUVJnai2WQYaXyTP32WtaLk9A2327062SPLrcPNySJT7fmDeskkVab66LppM9Ox5PyzgGGINFX2UR3G70lCtxynIHIrfrCVq0i3L0yUNuKJmzvACK9EGOo73lxivxEQMeOjUUy1LCIZwp4Wdi2MQmjCW14xBfteJw3inCpp1EiuPD6i90dtn0pQjMMHAXhYiBnFh44JRuNsDefdMmfFUA5FdfCShG7qSz267b5MYQWP8MA1bCwpgWH2Q9wfzo3u9ZYILiWdMo2f8O8iA9MByZSQeTKaahpsSkLYJtmGsafDTjFWUD5Lc6qM2o07J4zR0U5d64fw57jkGBJ0O2XeLHdRwVt2sKnsvr2zoqnceN35lrHdDEiQV2Vim9tJJGDNkVEO6SbGV1LoTumLWUpZ0KCZ6YDw5xEZ38ErMjovUbKGGz5HbGONEAffFPfyt967HCK7SWbAtZoHHjZdPmWbalFaqziSVb0heRx3vXpYlJt7YLm4ghVJqAUztQxrDNJcp8S9aSxd2OiNIHKbSbtW1Z5vDKVq1VD0wfr31JzDj5tj3Hlny08WVzptK3NLf5Jw4Oryapqc8qAusEJe3TCuJwbdWJJXsNV54WQ9O2HuPYA08Xbs81ZdC7BrkNZmFblAgS71zTzivhIblXUOrkFICfnraHUQGKS65hzWu9TRaWb6wm7SISQ5x5kjyt7eZnmGBMqFIiMQh3rjDvtFam9BLJCZth4eSCK2KD6afcH16rO1WI9UxoLykCd7RiZWBXi9An4JsR50t930dVM7gzEnXsS7grlGsVidkr9Mp6VOhyzECkBKs8Msu7B4aaFbfxeuHrpSOaVB6RxW0gXJsdDncQrcYmg2VLHg0oX4FYuAyf1PgXnaguDDBxB6fB11GzjkNIrvSww2ml8YTuDH46eMlksoGC7aozaL7VWOEDEHhEVA24IqBoesBc0OsqMCK4ETkZzhWz9CKcknCpzhe3csifmISSBKyUMXqvUazUJq7jE0s7SxKuUp6k2XLOH6ih2aNlao5dkGmkTjTYj2YIB5Uuhko39UKl8XFLvnZVBHXK75VFwn8a613gIAeercXzqrRN5oiwBNl32kBmKlYoS71abZfaj7JAcMJ8y4hIdaHKFExGIfocu3gGyGC5I1CpqbvKLVOIA3pC0Mf88teXrqbnJ4lr4eWI5MUSdYaSdxAgZ9xcKUl6PzGY1Sl6m14SFYwZfeC7C9ILnXtXkkyeuNC9ZeK06MXnadR2e95pQTBxoEu7sME1QEETc17vdfpcnNAW2tqzffd105HTXrlLuAuSpe70wkNG03axIHO1CfJKf6T44OzM9MPM3F5SY2G6jZ6eZhOvWnLIWzxel7G6ZWl23ZTgIrr2W86ARzVuxxeJlRtoKDMz1jAdAq3HCt4a224Y6QTRdhi0j3mp3G56VhLme2AewW2aPNDliCJG3nJuq6fLLIsy62rQOmp8ePfxsB3S2kEtohm9a7C3RjJcacvowtvi7pIxF433ILXFC6pN0X4limTMyNbS6t4OYs6UvhUInA8rTzBThjlyGDY8Fa0IMhO4BhzoXbsyldYmXkd8l9P8yR4mJmQAGKzzbSe26cACXgjeWhr7eCaqKNlD130XzEe76TwOj1iUgo6zRe5d8xrcqmONouNa1wF5OBEMA8uhWi3Hq6sYqmhpBiQQj4fI7sCO2Qg1JXPBoOxq3LUwlwFFMud6BRNm3IXp48tLwGnTUIYmp3nai99jo8ssuqEOFWuOihUY0bTAp6sngmX7JAvSDiBa82CfeXgZtBHO7FEsjayCZljRFRSDyVSxhApTOZOMpVq87viR1foKba2dDV7jSKcuEpgnQIGzC9WSwbQtJo6GowsbTkb5z9LiEcKDWVD0wU8Q4qvufKctu0Xca0WLhDTJrRRYoanh1B0ECTYDUwooWqWhxbN3aD9C'
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具开源免费，禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		elif sys.argv[1]=='-c' or sys.argv[1]=='--cwd':
			out.outlnC('Get CWD path','yellow','black',1)
			cp=getCWDPath()
			for key in cp:
				out.outlnC(f'  - {key}: {cp[key]}','white','black',1)
			return

		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___1udg1dQor1VllCqNd4OgOh0P9w9PqzmDGnps7AeOqdPEFhvqGBMke19cIZuqkX9KDSwkMF2BkLz0OAq5DjNKmDpPGGILE1YnPOgVOFzvHGNdFbExxF2NDUO1OOh1=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___X9aiMwNoWg7PeHKVpWbdB7Uzr5NXBK7D1Gxf1Ubir2AaoQAnykNxSatgwQE9HkpwwEF6vlRFUpyosFVgFYVJqkky7ML6RfLLD6TpCjzxTZ9IWP9D3XLBT91WRXLq=''
########## CONFUSE ##########
