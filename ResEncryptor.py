########## CONFUSE ##########
___jpSzm2hV3sd99DnaiTb4VSeGJJB1ToAHevSY5LdxMh27o0ysIMLrBsnUswfQUBQSpOSBhdJv1I5ypgcZf33yCRgOHbhnZPEsaY1lnbDg4=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
from loguru import logger
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct
import subprocess

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.9",
	"dateVersion":"20231031",
	"versionDesc":[
		"将7Z执行方式更换为subprocess。",
		"优化报错信息便于定位问题。",
		"修复打包路径中含有空格时，会报错的bug。",
	""]
},
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___2F99zsOv8xeoW9F2McFit4T8ADrnuHav2FkJNzK1FVl4FgjsPLJewSSZ5vAbJhOQKbqjGOROxiyrZ2OwCGbDkE7d=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	batFile=f'{output}temp.bat'
	writeFile(batFile,batStr)
	if not exist(batFile):
		logger.error(f'{batFile} not exist!')
		return
	os.system([rf'"{batFile}"'])
	os.remove(batFile)

def run(exe='', params=[]):
	exeList=[exe]+params
	return subprocess.call(exeList)

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___wSOAtJilRGLFz4mqsaGy4mjGcHrABCQ9vb4D87AHtH6PkPQezPMlComrsmbq016pEWCrXpD0yu4UcYOst4p4S90NrZJ=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___TacvB1XFTU5fSg70vYjPhOynEqAsEQ76Ih6EOi='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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___zTOqmU4fmIJd2g5kaUWO8vB4ESQFzHBFxSMrLcG2NSdVSwUCDeIFWjsCDbj1e9Kk60xUVMqOMfYPwYxztwhaY8=''
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___XG7RPFuvZpFI4CGpndWVL5wMqkS025wdHC3entJF7t4YXCcGDod=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___bxh6FHV5OmXPvMC3QWxLzh6GihrzaPWmUh5feil5OHpUbbCNp3U8YpkiAOIUH9mwLYdfuRFeuy2h0EdrAzgiA4t9wYmfctBKVVs9JVev=''
########## CONFUSE ##########

disguiseModeMap={
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='' or not isDisguiseMode.isdigit():
			isDisguiseMode=False
		else:
			isDisguiseMode=int(isDisguiseMode)
		
		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		# cmdParms={
		# 	'projOutputDir':projOutputDir,
		# 	'encryptKey':encryptKey,
		# 	'volumeSize':volumeSize,
		# 	'fileName':targetFileData['name'],
		# 	'filePath':targetFileData['path'],
		# 	'fileSize':targetFileData['fileSize'],
		# }
		# cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		# runBat(cmdStr,'output\\')

		# cmdParms={
		# 	'projOutputDir':projOutputDir,
		# 	'encryptKey':encryptKey,
		# 	'volumeSize':volumeSize,
		# 	'fileName':targetFileData['name'],
		# 	'filePath':targetFileData['path'],
		# 	'fileSize':targetFileData['fileSize'],
		# }
		# cmdStr='@echo off\ncd "{projOutputDir}"\n"7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{fileName}.7z" "{filePath}"'.format(**cmdParms)
		# runBat(cmdStr,f'{projOutputDir}\\')

		fileName=targetFileData['name']
		filePath=targetFileData['path']
		exeFile=f'{projOutputDir}\\7z.exe'
		exeParams=[
			'a', '-mhe=on',
			f'-p{encryptKey}', f'-v{volumeSize}b',
			f'{projOutputDir}\\{fileName}.7z', f'{filePath}'
		]
		run(exeFile,exeParams)
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		# random.shuffle(encryptConfig['fileList'])
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		# if isDisguiseMode==1 or isDisguiseMode==2 or isDisguiseMode==3:
		# 	# 随机英文单词、数字累加、字母累加
		# 	execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		# else:
		# 	# 随机大小写字母+数字
		# 	execFilePath=f'{projOutputDir}\\{genRandomFileName()}.exe'
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___ZYk0AooJvJv0MOCT8jsi1f40ImcXtHssNMGo='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'
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			logger.exception('Exception')
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				# fw=open(fileName,'wb')
				# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
				# fw.close()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	# cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{firstFileName}"'
	# runBat(cmdStr)
	exeFile=f'7z.exe'
	exeParams=['x', f'-p{encryptKey}', f'{firstFileName}']
	run(exeFile,exeParams)
	
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___kcaY2UiFl8r8op0JsNpf4jty=''
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具开源免费，禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___k03EQ82oSeTl9IBtKOT7Rws3GbigrphzUVV96Oo1hrGiHfMDLfkH5eJ9SImeaONHokujLR1GuaQN8oRwjxnPguLN4eh27jVbzf1yVvDh=''
########## CONFUSE ##########
