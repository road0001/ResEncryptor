########## CONFUSE ##########
___dtUAFeuu1Uf3GQGw='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'
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4270000000
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880

########## CONFUSE ##########
___sNTADNK1VRlANHDYvcMMIshD0AvfXUUr0KG7JRSixsnH=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___tPenM15QrcR61prd2yG1kgzmK5kT7rx6EtjNPEsnyrFcinKirwQMjpBkcMp9XlY98WDvxSqCwIdH6DAdZ=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___rtHIkKbozKPCxoBOjt8u3Zur7f3vh5gOzCX4YpbA03y0a5faInG64XfE1LwVgQ8KcUWJrZUpGYKDTr1SgfNV0UXcpQeUpzCP1mbmxo7zqX7f=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___UK6f0CwmAeETEWuKkUun1VDgUcwofIucV3Gy1Ebk42LAlWRG4oPzLLGVSa3P5eOpa9Y5XDdaUqhtkGjMDMMSFnrLx7dESzuBDErYI3=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___raNCdWo8GJYx6LuzVsscaEbGAFEDEi32i5NVIWeBgJmGghPOyorNCxy6BVAkVFDhF0AevNZQXU6UntAFxYdhRNm8xBfD4mWLIMZKmEfwdIVG6nPdAmoK7Qz27LN77=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___UvzdQWXojUmXZE3CrJd7RUxvG6Q3jy3FY='UvzdQWXojUmXZE3CrJd7RUxvG6Q3jy3FYStlRqcmTwyuoqhnf20CPEWkJN8ri39dj3577cMNYBnugXCq6gqldRboSCkbE3BGySI4bsDAbdwhYjxGBLfyFInom9NBDTwXf8KslO0nqng5NDCDEWGD6OLfL5y0dsysndoBcUsRurTA2SnY8TcV1L2PCa4TOVs3oOXtClBmpkIzGJNgEFUy6CBNmBgCnCb5XLpCC9cG4x9PGuQyDylkNhQxErIZZ3FgVFMlQvuFUxtd5zr6mBdBsrTJ2LLn0xVLsidTFE7QaSCe5MJyMbdTykpZzyGyApR7m3CsgkUSt2dcJL6XWoOT0yRpwxLg2orGKQwPKq7XChfDvhQGfAuej0EkKwQcJWCGdGQ2utEah2xNATyb9XPSidfbwULW3O2F164zGlYteSIyKacdHLxYFeXyI589wNqzY5Qo2aCwjb4bcIUt2qB20ko6pqwQsmx7wmtpTaHgqrCPue0XBFQypbpF8nvERYPVPIdqISH7oiC48W4utove57zvuFNlYUm2n6mtLtlB5iN5Z4INvxlRFGTDmiJpgxC76SZFcs5gBSnzhpq1KGPxt7LHrV4Za7JkUEIvvbMh0hxaUZDengGP9mNku9i1k6lqCQeKpCuiCAhfFyiAeLH2LL9OPuDuzbqQReMlaCQt533LxDUgJIT4PcT414L4qzG8hfP0H35UsnOwM8KG59tkgzeI7MoJDNwDAySyb8HMZoVzGy3dp9jCWPeVicNpsdegRRGqY4zFIirgosXGJjRi3atM6DC9QKuyBIOgOg1rKBfKuJXvvHgkKxykLrASTb2xiaLqE6x3eh5bvKsbjuGSxNUel3X2pn6bbguAv7kPg66HaHg8vAzmC7LWgSNH3yqxqhurDyYzpRhwJdcAZQFGmwLxKBqwYUIL9UQw0SH7HU1Lz0d40y3SmUh1SnXtydT9UQs2B0OPknrRVs3euMb6DrFnuRQuFFSCZKYguZhLnLccg5rWG38Jymgb7OC3uJYD9bCyZfTdBCJyH4EfJVGxMvh6HRfKUM5m6ZYfRlRysKGIFM51wfqG81cus4IGIgNWnMBkW6pxgPwLo92BtAOoODLmWjZyxWqt8R4aMIUCiGjTC3oZYliHH1qQSiyx7WfURiLVMlTG9pDCEPumGES885FKfALIfJtWqBRIZM6gyRX8kmZoARxwvp27gNcbsidUlMqJP9BjR6VNVMz7DK2LV1O5bzx6X3wjUomsyBghaafsG2432xJGvnF6cghAWS42s3vzPivuXUhVZz0BKBkbpJym4sD1rwYiYEDJNqkP6ZYr8BEUwHBZO2dJigVDUzgr8vBqx29ZWcK8WMuzHkIYbEFq3SYfmGvgvuvyfTXEjTluBPHSiQO9hbTwo8WaG7aMsQZJywn7yMfP26ZSmBDVcQ08h0J6g9ceBefeZRnMa0IsXYOOQUqYzO1JruNOBEFxbBNkwDgrtt3hj5vOt2A1v6vK4oYecWux2xSUKcgvqIFAi8C5bOwNAkpV7k7AuAMdv18f9vTcnQIxshagfZv03Fhiq5c3P0YIybpugc3mnrm115BU3w2OCmpn899zv8lJ7VmhJHkZYAohC3cEGBNpusaOglaz54gN5U8Ib7rC5Y3H9sjAa7YS39SALHAmMhueq3ncPuWskHsfVM1dHh6uY8fYPrcYOWZUsSlNnI7GAK0thBNm4YKVjTQzVhs2f06KdwEudliYpno4s6qClDmpmhfa7zXK6htHYLd05DH5tREfolZoy64kw8ZZxdStr9ruktD2YhZMWpRlkrXmiDgdgGEBDOr1kV3s9TlNQeKbhrG3akfhaxIYxl0PjHd8RH662YaLHXYne2W0sTL9dfon1L1EyPEb3FyJmsC1HvKb589IyR8ceJvB4UK2VT2YYwq9DL0xk8sA12822cso6BNnboUINAsp0ol3OfRBKsqxm8usHt1IjGKbi0bZinL4SnMyKmG9O7nLiarMutFTMJITu2CAXps1VU6ZBdxHhPNpWm1YmsTJOHapIZS8hl3xBChROvW09cId4ZGIiDGuQFipUjScbM5bpFdeztJ34hAYSxlgTwA0dtJBEPQW3cbeLpMT9tVMyxr9XZo'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___Lfcwm4ItV6F6MCBHpglJI='Lfcwm4ItV6F6MCBHpglJIUZEIdzuKAOGhPcrI8l46mjJYf37IMXLP43nnAhl5NBFh2VJMWzrMR9QAr2AWBx8TelVliWViqNfKOERrGb7FhbWQ77SxJ35yoB4KuCzlSGwXn1AuajOM5wusXFZk6M0HNJOIxRkNc8iCFJaQdsTh6I7MDiynCWdWVmIlMfzLQTdwWsONShvHj8A24eeIG8WTmwrxK2OByKBjooi63K0rb53R8huN9o5K3fiPTBn6rw8JtAB7pPUWuMqoajDEUojQvK42NvhuRseVqMohnhx42rD2eWmLiC3qCkZT42W8efdvWeEAMITsjpqXt87XdLoFW3P5lnP7acbLLtldjFGrOVfkN9q5jBzzKLs8JXyqGSS5FsFX85yE2yBFejCd6fOi7D3zVdTrjYBJRKYCOP86DSDhqjmDwnV5GBRvj8D1iBaDNtyxDE6E0NUqvL4QPh88uZ0m4wMLev0GAense6qyiwXIgnKEJbKhJwvdhqkPP4LKQ7DN9u6Qbo9XCEo6ubRCLA9qbnfBWPZnQy0j3yidQ0j4ZKJGZphMlcvoXKhwH2MZb6PXX61boOD7WvmCmG95IbXxvJCB5ckmyEALrtz9VHwO8Xff47lcskXOrS5PSl4B9QvEECM1x4cJPMRVG3yASZKD6HF0MlZdVD4Xzr6EJyvG082NQcjSX5l7uvFgF5bejbChvwynYVC98VlP9oOG5brJxLzcD4848JnLGHdWDrUyQPC0aXNXXSy54QhASkWUvDga1Djb8qaamj2XqwCpxdTO2vHzaEPHkSqvjHnCW7ok3we8U2F5dKhg6A1oit5EATMGYKSoyJEuJn1nxC5PndSNkGPAZACzzb6Cy16ooaAx1vwBgo1Nmam9SzLWzehC4N0sgDmrLjmYFCZWiIwAjDp5Yg0V1HftkaXagOyROkY1xQL0JzzJAqJZ8jLffGPx24hcXyQSIXbkhOwrMZEsfPc99DrApDFhYY8qSPZCjBP9h8f1qV4THojPaT48LukSDZSBHqFA2f1glGKZ60JLSg4KHsKJgQH8kjyN7t9kVfTEsOhR5kdKe4kC2Si9md7BUs6w70Grfw7NSLrvxoqGIcc9AUikzO2sDSyZ2jNuINW2Gx6fzeHN58Dc2pMkKsbxdUPotiokO6VSfcnlvvjYW78kz9EwEAd4HPhfK3pcYSENSzY09jBeA1Lj6CobAUlnrn5ni9fs4ft32Kdl3Vl049OBuNxsysm6bUUSQfvHwU0Uc9t7mB6sG5ifLArOdShh5lCWeLvcIxH3rVd3gThS9Y8irQGSfi9YQ31WjCG2zy16ia5VYls6TYnHxWxl1x0GEGy5sHAg6RBOOLEbek1Ru4pVFlh6js7hFoRHxR8gclZYxznFdIgJNSORuv3GfEgWIVX1LtmqOpjreSpYDyX12mtRtiXOWv89mJZyiq1TVpdMKro7Qaiwfxl2ZBopyQDDDJke69kWRZ4n81Nkp3QybfZH8zT76hRaMBccy4kvOIvnLRyEQ0Z6NF0Wb1cLYk0SUTzEY9KpbDDNaduJMdKV0xWmg3NP6onFxvZBEYr1MboSneUfJKLl26e2OQCCzHCljLQIK8DzGg7JnPQ1WfbTRIOasAHHEpgHfDl0pL0AQho9J3B19Ezoh3M4z8qxexJBkhcVL6CEhvCoTs5xYEz1ROgxVlKf8igCznJ0c1k6a0B22MVwu4k0JKMizxgv1pnGQTlT4fnH2PGHDXpxKWwiNJjevvUnsWRiIfSAF52GapyDnv7X8ZtSGGlN21tNEY33Ot7zsp45SQOn8QPdESAzEd4u6COC6WiS51BwkrCC2UyeQPUUNxS17hdjLDbmKHYApb5fFek8ubC33k9JEH6GPUSshrqFuISd8FyWtpVS61LjaG0I1RGlowKEr8EvlrcVWX4FkiRB8CKfQNO6je4TjhKodO8noutxCSkzOQ3dsLrbvMY50kdZadp7Oiz8DL9g45RdlUPZMKljJEv28V2neUWlYDckThaDLh7rUkneudpl2xEaLKKTR4z1MSJ0YHaQO5FcoRByznXiXjfE1LZgcGkPI9ExmG9Vd2oPHtZU0EF4d3UvXXuImmz3doiUMEjAcdjz4UyCkOvjaWT32615Yuin3U4i4QFtOvomCSHMttmyzAJbq1FggJTvySuhpJWF28MNKVLuKlkGBiiiPvGvGsFDbe2W8onYg121TLYLBNqPgZVtlmuititiGBDlGaSGHFVgTU49A8IdvvMzRyOViAm6vHv8OUUqF68bzzzB88DVjNxX8yAzmImwtDYpZiSHkjMjRfYUffJn56KHYfiPWXYPa5uaJs3ydErXqJOJh9lsLGIPjEZt5IXCrQdMwZkSGra1rZyXNV3pSfxhGQBZxbX2rQX7i8l7WzVMKzu3ENM0UDiwNc484znnAmgyzWf7V7i4qg3MWiQ1qKcqDQ7eqsnC0c1nV6kE7H4CbUgkW4XTCcgZepzC7UpkVPTSUTcfr7o7IUYxUS40dRsa1hamUbY9Q47DFTgVtMhJPf12f1lrSqYBdBDh0ZvVbio4KAkO78T3m5GPQcKjqnShu0pu8dQCvPsrKTHfeZlXPVtWUHnsEE0WwLU3D0YBtLgPhzDwBnKFHz1WPVo5xApR4pWucx95a7dH6x7EB85PWYy8lkY8L2SVb48i2gCUnVogdW51sBvi0kvPPwgtE1vzKZMEVSeJYbZ3Z8QF6k5p5G8ahKm7M64kWkcujqyOcSkKgedz8Of3nEglTNsl6OTAxGRPdbAe32jBojTD61oDdXvqSnnO3S5rmy5dg3hfecdthXOMVgxn19ctHj1TX7NvR93G8zc1XDllZ1Teaszooy0WGOuTHdceOEiu6oOsFoBltfDb2cv9HydC0Ar1pzQVfH9uLtNHkL59DU2y3S283MiUdZygkoupdRg8Cngm2dnNe8mKfKKqXUTuEoaT560znBXnoRFn4glL1hmPxKa4yLJxR0uRU6UcEWq8zyKTGLcQk0j3yj4USuomfNKX7teZiV5SL4jtyBfcCXCkc0d0VWI93yjxLWIXTKhvfccEFR3i4mAB1BMDqTiZjAdbSZpdgMtww0JXMuPa9kPEa75vJeoGHyRuSvZACEe97tQr9abJLRoiwcgJgEeDtdX65NVtfjJzX69C7tHgCUfsyQBSGx85Uvcb2sh6vEROHSm25YzfKlhwY7gOX6kE18dPUuX7YAnVgTAxM5jLPNXevXQ2Ntyb8PbyjxyHIYmGOX6rmtykn27vOh2tgMoMIkRhpwU2Nu6xlsNxzSM338pVNSBUuessvpj89BG5vMy5Mjz906he44CcLqwilTx4rYAghY2IY6JShbgrJldMENVA1S6b2vO7O2CuSUIt5YIy2q4BDnYP1SRmTuo2eVBHwlqv0cNF6X42jHgwFel8siHmqgZHq5yNJvaoOWOm1vtyK0ipfGtJ0Jupphd12B6G2UIIllQ2knkg9rQ5ZNO3sO2bCeQuUEHSUOOLvZFDch0yc3zv8Z36uCqWhA66Lob15pCxytOgYpqQMhiD75bdSroVnGychTN8QpIsWwNmOq07F6LIzUqejDAKIQRILiOZe6B0BVuhKItsLse8ROSxAI3BHw7pSDVkP1fns322cUwWSSnoSlKbxIsrUYRq9ObiufmSLpZuM4UjBfheMNi0nA9oeGUgnjqqga0Kl6iJ4IUglDJjioqc4mw8z9MXf8lTUjyzzvltfw0hchjexal4vtfw9Xq3wwHTYwwds7Bu7dRTtlcHPsiiNENJ0GQxFZhOsgXsIAjywaK9iuhnTYePjhl1TL6RE0wED3rBuT5rizZXyG0pTgooaBtaEzu0zUaweDyxEQdh5ItyOhJoXQ5efvL9yi1DNMd6WNmcyumYBu7A32oBx22nQ7zrZhnux5AdS5rr96NogIKP6fu6WVIqgdBy6TSvq2IQ9MpowHdwaitD4bL45n6GMEcfhRH9KYp42ZJpVUqRcn2r7bL0304isTekBn0advSya9CqyKM8hOdMbAysZHnMzFJvIQ7mPZd7Liwfk3vLmAuKzyWxHwKxVp7b9wer2Yn7wQzjdkv88G8F0aSFQB7kwt0o03V6qwPuQtXGFIyPdrUYVqTOdq7lmQRvaLo8ctRlY6hGddQvlqUkCG4U6ya931rY9UIqKFoiu8ZGI8uXycwq3aXlK9SoqO53bL80lzGy0LRBj0qLqzuHZu3jYpOEPvOuuco8I1bNyEeiQngoWegdnPoPPQx6z37V3Xx5yQqs51wQUUcrbUOUsAn5IWXMrqsvNgPZ53fG2F0D57XDsjH5TTiLla2PSA64fL4NakrN4UVichrjUi3oYd8e42eGU6V5R3GrfIuZzFelySzSaM6N9zY5bM9Y456s2OpmUQEtvssM0nFAELItFNiWZHpCBLmcicEn2g8MM6PIWT41IfcUhazoKXr9EtBdaLGdC2nnuwfEeAvwTsFsgsEPuSEnr4x6MMycsqyQqIfHL1Ag3LssrciOwc2nwmmtmznQVUeoAFs8CqFNBAThbPOaHZhTTvzdZUmM7ZWipWMnKpOvwFZbdl51Bl9SlJejLRK5dGGshJXGp1p7hZ2wH0RaYUFsULlW8myWGzcps1F1gAL5fuohkBN9U8XP7EzQDnjlh9mM71XJc4VV9336BL2FxmV6uAhlLZa9YbVBJaT0g1stno3IdPK57AjL9WEVmhkF6FROKcTXAywf6g6kjiUZzltQVzTwWgWDEcYnfbTTnFL6geLsPmXNEd220ux5JQWDsswfsVvcYOjcEbsrAh2Y7oOdzsGgZ1Ep1BqS9VI2xWoFrcE3iBpHpwgO3eCYV9VCymRtbUTP99ERk9VPTYk3N10D4k2Sc0kfcfVTvUA0NJACifSn9Z0NESYKJMlArqUrlV1weIK6jOARMOPVtgynYgzrJ0vjMcwPlNRFXzx0XmklWAFraKEMyNWDY93r7po7HdSLQuy9Zo1wO8Pg1OHvcIfaqPozJ8OWZ3rjUm5ZXqIiMnI1G7rcaiH4yQysnUfyqi84kjSiRati99TetnlydgewhYop9NFhAG'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___smLJdNyXtRbIafmq5P4Kw22OkQPNfO1UfP6Gua2='smLJdNyXtRbIafmq5P4Kw22OkQPNfO1UfP6Gua2Hdhs2N63PGr34uTUlbZCcv5WXccFTmVSXZXG7vUXOrpqtMyI70Med4OaPUtqpDKLoeQVeBbsArzts5Soqipdy0rYeXfVtA0Dxeftjdvbd8vlFfvEvX6WHjUUyNd1ZCqiZjq0B9dcqZQnQeig3tb5upMXQRhCuDWNijkzkvviCSARSmS3RCwJwnSqy9RvNNBJZ3khMaXvXdTvq966wzlzJfCKDI95ykL92J1CouAUUq2V1VdcUTOpyeV8YpufErVgYMrtPBV4bE0omf1yzmCrcd2eZtzFDgGRKSWZ3wyefZwXXfNUTfMYcZdI4ZEKNUYjsBQK4oHrEu6MTUiRGPpXBqwNUDM4bBW9j1DNGh1KQ9A4Xy9ZDvTWkrnoMetO9ua1QXwRTIC60n1vLfiOvhObhIiRlJMk83sr54YVrd4Z7DJZ1C0CAYBuMjMH7ts2yTy3K0vCxObrQWWcR4ZB6y6pTL1arr0YuWZcfEwhzubitE0FmbCCd4J9Id0vPHal21lB5oAq7o2XGTZGcOr56WYN5syIryn6CZChJrJ5q3bxhgnSNxen6zd3Ov0Y45WTUdoBrHUl5mAGoZqnFYcewaGrA1Rz5t43ehMRVpTyPZeZ2jfmKKE2eB31v5ePIPUuevhM8zjox6satUphNmzcpCpXE1zdH3PeLLawM48hJSoMgnpQzONuHSUf0t3xzCZxZNfkSViRkFkIPqCuNJASe2vzUjnpdkE2q41uliFCgKEbKjBxsnYnOjVtOeY3Ll8boqFqUWHgBy2ziTYFucTY8b7QJMsuWsnbaEtIl92AC32faowPOBecy8CybQOyjBONH4gly1DnMnMQvst99aQEX89qMo9BDajviHkctDDoyjOSaU6TpDYEuvvGaimrEVhmx7WmEjEkhGY5uyZMjtUSrT8leeI8ad5hqdnFZaRN6jNa9iLYL6xTIRnBXlCarR3ydtV4HLkP5brWKKPHEiCpZRtsjPiRwkogQX401DWRAw6yPPj0zONuFA3z3Wry3sKa1N9n'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

def genRandomFileName():
	return randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入1：')
		if isDisguiseMode!='':
			isDisguiseMode=True
		else:
			isDisguiseMode=False
		
		isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		if isSingleFile!='':
			isSingleFile=True
		else:
			isSingleFile=False

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==True:
			projOutputExe=disguise.randomSelectName()
			projOutputDir=makeOutputDir(projOutputExe)
		else:
			projOutputDir=makeOutputDir(genRandomFileName())
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		totalFileSize=0
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==True:
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			else:
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		random.shuffle(encryptConfig['fileList'])
		out.outlnC('[完成]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+'merge'
		copyfile(execFile, execTargetFile)

		if isSingleFile==True:
			if totalFileSize>singleFileSizeLimit: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile
				# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
				lastFileSize=os.path.getsize(sys.argv[0])
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{execTargetFile}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		if isDisguiseMode==True:
			os.rename(f'{execTargetFile}',f'{projOutputDir}\\{projOutputExe}.exe')
		else:
			os.rename(f'{execTargetFile}',f'{projOutputDir}\\{genRandomFileName()}.exe')

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___C7h4vNFVc7AhHeGyvXXgix5nYcytKHVQFmo=''
########## CONFUSE ##########

def beginDecryptFiles():
	execFile=sys.argv[0]
	execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False
	while True:
		password=''
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		out.outC('正在解密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC('[解密失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC('[解密错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)
	
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==True:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			with open(execFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
				originFile.seek(fileOffset)
				targetFile.write(originFile.read(fileSize))
				targetFile.flush()
			# fw=open(fileName,'wb')
			# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
			# fw.close()
			out.outlnC('[完成]','green','black',1)
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

	else:
		out.outC('正在重命名文件……','cyan','black',1)
		renFileNameFailList=[]
		for fl in encryptConfig['fileList']:
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			if exist(fakeName):
				os.rename(fakeName,fileName)
			else:
				renFileNameFailList.append(fakeName)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		if len(renFileNameFailList)<=0:
			out.outlnC('[完成]','green','black',1)
		else:
			out.outlnC('[警告]','yellow','black',1)
			for f in renFileNameFailList:
				out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(-len(originTail),2)
		originFile.write(originTail)
		originFile.flush()
	os.remove(lastFileName)
	os.rename(f'{lastFileNameTmp}',lastFileName)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{firstFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___2LE5CmoP3pznoohNKicNa6dOkis8PBmsJ2yfNQD2dSp8MUNmsV8FMKYkopcdGVhqTZl4TRT=''
########## CONFUSE ##########

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system('cls')
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
