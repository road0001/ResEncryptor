########## CONFUSE ##########
___E4O7eKz8Oy3LfiV0KHOH77jl4ZQUY13mI0eliA8FVDTBe=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
from loguru import logger
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct
import subprocess

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___S8zx0XQcXF9MkM8rUUfhf3K234E1xDzJJlnV='S8zx0XQcXF9MkM8rUUfhf3K234E1xDzJJlnVO438FekDL4Co3JB9yWmbdh20ba72EiAX5SIoRBCXPNMgUk9QvEkCw3W1VAvR1U5VLYWynTwH28heeIEZqq9QuVR5FUIE1aQPgoQlkgJCl6eyoJmcrjdPwI9HklN7WrdtZf7ohGvTfBLlHCub0xXE52FFSprAM3igISYhw6MFtNulHlydZO9lF4oubzfSKPLQ6QbMyV7LbKw1UHefyiLA5cK4kyf1PoNWUtP8kPyF1mIYAEbqwK2n4ULxFscA43Tu8AaD7cvz5KQ0JE5EfhLJT5KyILofzBZgj7i0c7wwfnvlQF4WT89ayBZaPpqxDRbInKDpx1KZBTqwJDppscuu3RU3WNIQE5xT6cdHkNPl4LEyn8fxAJzchpmPrB7jfB2Z6GfD568VzHEuCfsUPrbL86SQqMhAnRWMZBIBePzz3XIygusNFjYxZZpa67OXkP3ppiUyz3quGPoOUuKkLVcufgYWJB45c1F7CXRZw43yHT5cfIuZgSn0UjfXTlDmIx3EkTl0ta8Mh0Eb4Uy4ytBqYtq1j4HXbaA7UFBsMwBWKstjqUsuXUMRe1ChGiSKdz5xdUeLh1FK6AlKb1CxA6ellXfOXS2J2A16eWHtpgQom5xFADFU0rBID6qcIkQGKQpOouQfQNQgiBYvaLEKHHo8cLHaNf8TPfNTfJBj8dODJKW17aIDlivsQrfkO9wo1CD5KcEKk3E4cYVUu7cyuMrWYPoYJ3SGuXj0DPN57kKT9M92raOtPii2ULQDeKYVI8uPBXeHaT7dUwtrof9LOj4k0UZlbZBmahdtrKFiWfGH4sJUAV6oTNto5MbVAUo9HBlpDkRcbloNe9GlPUIuYurPdVbNo43gGK9286G5mXx4GzaRz1I8GbcTqyv76UKjLoEpG1eiVnfQGkAMjI7bRyvgf9nQ8MUrORq2sQNtfZtas0EZ1XeABfNFkWeN8XIc8hxa2uGaUGzRb91cdCOVbhIbDr9i4HZq4RwRVGrYqYsE2gXEWCadoCGSyiCTxseI2Wz5OHXmU8xgEcDlf1Qkdpo57JzSxhTEhP3TXehHcCKCwR8uE6ktkz9IN1v58tWGTN3Tu7I855ksd0u9MDU6rJ78HX1SOe1VQcf0Hq5Q4Z1u18CIQ7KO5GvuvHn2kgu0ITaLEN8WUbZGyaHQ7i6GGwq5KpyViedPO6dAPvHkUYNEoflGLMl3nfE8jvRW17QWTzk8JZhdTsb8Pt77SF3NvgxAiKJo9cE3BXFtnx0RA0SthsOjyXa6inp8pT8t828RJ5k30tw10ZbUAABRqCC2gtFL7BkckhaXQFNV5RDdB7UYbq8pSxvhziDIQ55xNbpoPzDoa4jqJbMr4ZNusQfKEEnlhh3Ann4ENce6NKjKRaDX1V5OoRKWczl3jLAEOiuvQ9PK6ANet6akFUmmLXHuI0CifZzpSuhX2t009iLMZlUJ8pL8S2nlLR1Bs'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.2.2",
	"dateVersion":"20241012",
	"versionDesc":[
		"支持空密码。空密码时，使用默认盐作为密码。",
	""]
},
{
	"mainVersion":"1.2.1",
	"dateVersion":"20231115",
	"versionDesc":[
		"调整AES密钥算法，提升安全性。",
	""]
},
{
	"mainVersion":"1.2.0",
	"dateVersion":"20231101",
	"versionDesc":[
		"优化代码结构，移除不必要的代码。",
		"修复在非标准路径下，解密失败的bug。",
	""]
},
{
	"mainVersion":"1.1.9",
	"dateVersion":"20231031",
	"versionDesc":[
		"将7Z执行方式更换为subprocess。",
		"优化报错信息便于定位问题。",
		"修复打包路径中含有空格时，会报错的bug。",
	""]
},
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___LNCNKf5K9wHKqoiInOuPRBW=''
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	batFile=f'{output}temp.bat'
	writeFile(batFile,batStr)
	if not exist(batFile):
		logger.error(f'{batFile} not exist!')
		return
	os.system([rf'"{batFile}"'])
	os.remove(batFile)

def run(exe='', params=[]):
	exeList=[exe]+params
	return subprocess.call(exeList)

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___rvpSduonoZq7Id9RpWjJkafgSOI6viid5o38hh6jzSc0k8hrNWaakPnyUoRWxIdGFsy8hASOK05HRYoF4i8fRr0hEVaprdqjvCx14=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___sQne3P16JkTeybvo2sHF=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

def getCWDPath():
	argv=sys.argv
	cwd=os.getcwd()
	executable=sys.executable
	return {
		'execFileName':argv[0].split('\\')[-1],
		'executable':executable,
		'argv0':argv[0],
		'argv':argv,
		'cwd':cwd,
		'realPath':os.path.realpath(sys.executable),
		'dirname':os.path.dirname(os.path.realpath(argv[0])),
		'realDirname':os.path.dirname(os.path.realpath(sys.executable)),
	}

########## CONFUSE ##########
___AK0gClZpijKgXQR3hZA12BWEM8dPSjFV9JyEIFsSh2IAS9bUxsD6fasaTABGby8LUJQIFvw8u=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___uJRU1Y7ZWZEiFuvH9KCvd=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___D38ZhLLJygOVDnRyPOty5V1PydpvdGBBnB5IGSYkV63p9hN=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,cname,config,chead,ctail):
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,cname,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,cname,data):
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,cname,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___75WRbCBkuxNXzmLcJYXLutAkMoUapPRz='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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___h5Fwogg0P2ey9trVfkJ7oBgEIIFBJMwv0gqERZgINxc6tVR3m=''
########## CONFUSE ##########

disguiseModeMap={
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
				if password=='':
					password=defaultSalt
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='' or not isDisguiseMode.isdigit():
			isDisguiseMode=False
		else:
			isDisguiseMode=int(isDisguiseMode)
		
		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		fileName=targetFileData['name']
		filePath=targetFileData['path']
		zexeFile=f'{projOutputDir}\\7z.exe'
		zexeParams=[
			'a', '-mhe=on',
			f'-p{encryptKey}', f'-v{volumeSize}b',
			f'{projOutputDir}\\{fileName}.7z', f'{filePath}'
		]
		run(zexeFile,zexeParams)
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, configName, encryptConfig, confuseHead, confuseTail)
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile # 此处的EXE使用绝对路径（参数0提供的路径），避免因为工作路径不同导致的无法读取问题
		# execFileName=execFile.split('\\')[-1]
	if not exist(execFileName):
		cp=getCWDPath()
		logger.error(f'{cp["execFileName"]} file not found!')
		logger.error(f'Sys.argv: {cp["argv"]}')
		logger.error(f'CurWorkDir: {cp["cwd"]}')
		logger.error(f'Executable: {cp["realPath"]}')
		logger.error(f'Sys.argv0 Dirname: {cp["dirname"]}')
		logger.error(f'Executable Dirname: {cp["realDirname"]}')
		return
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()

	# 按照范围遍历来确定配置文件名
	configName=''
	configNameReal=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			configNameReal=configName.decode('utf-8')
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
					configNameReal=configName.decode('utf-8')
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
				if password=='':
					password=defaultSalt
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configNameReal, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, configNameReal, loadFile(configNameReal,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			logger.exception('Exception')
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	zexeFile=f'7z.exe'
	zexeParams=['x', f'-p{encryptKey}', f'{firstFileName}']
	run(zexeFile,zexeParams)
	
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___iZKpxDNmh0Mv1S7jx8N0VzVebF2FA0XmW5TavJOGtsWdByHfbzCpf8ZcxIMKEPgHjZIIwB='iZKpxDNmh0Mv1S7jx8N0VzVebF2FA0XmW5TavJOGtsWdByHfbzCpf8ZcxIMKEPgHjZIIwBl7WfOSR2ydJTgQ2DOkd7t0mofGEXFKLSTLv0Xoh31maKb7BTEK3wLKRWKSUGuM6s9iF4UfLFcGEej2RiyMM20PG71vZSWx55R6nfERWQLFOeKpI9cj2dZG5VSPYlCDkJcL1rhnOt0Pif0ABKnDDlsxfFwm9tqnkndErXQkrO2umHAspu1gHmdAlOD431HRmOlQdwbuqxlmBUVnp3qcEbw7QfgbxeNZVLhTSKPONasLLIrza1p8oVYTgvoqxfEMaY2WtpFKQAOzzdGe9UvtEAOaYR8vfLvyKQcf8Ju3dkEU2w73TUsUa7wwsVYTDcqbU8CUzh5oWei95jr2YktgFLKMRlnNavlutFerAj8uMiwcSn1yXRYV3fgjEry9EmNwKXMyt6U6l4KZG2l6IhYTkgr9bzrX5yDjHUQk97JRVbmktKiKcK1DTMhtEmp3jOyTksz1eLeA5Ph4gCUFyIB2BVzikbln0dIXQwze9fl1hrXjAbe6bDeOZdEqFBPycH18H2zPOx62qVg1EWIvO7U5LgBlYErXEY93ZUppHs5Y4RoEdF1Jwga4bFqAyTh2bPpY7kn6kIRzamCBtwPYqdBAFL5WjEm4CSBDGMC8N35erg2DidnTjpYEVXTP93XQckE77Q3W3WrJ3i6M7qE3fEZbunrwumwz211HWVZVsy8GFLoxv0lBB9raN1w6M1DmTCHp8av5yN06dba21ZeMM3ijSXuKgPbuC0MaVEAHjtMZgo61VG8LMYFZvBd3mEgGp8VI5liClYhUV9sNQIR1ABNZcRwDcC8a7Qjdo4TNTZCQmsQfxRQmLAXdtmC7ZuFJq0wzBnF0zavCDi4kF0rTeXrD7u4a3dkrbuzqc2seF4i9fjHCoHwNegjZHxaDFhMaYuN6xznMM3V7PjTa1QgASGEpFYyuVp3QUWk5TBpGKo1Dx2wBL5ZAnQTakBfx49BULBtDMTBofMxsjO43bSKDQDkQUJxfB3EHFTzDd06kdyylbn9N4BuRFCZzYnhaki3SjB2KO5UCWq2e5hDBD1LsQIOgFZKAokwerUGvx4TqouYB8WSIEF9HuARWTuzaAwkpo6ak0gXzpWZYqUdwGDEuuRZFpfvqDll5dcyUV4ukEcavbf1B4ZBpOkf0T4pu21cKOsVmnAIaAd0TYLT2ZbYb9gq3RwbWe4CFoycR8LY1dfP945PeZl7hFrtaNj5se3lPQV4RiNdsfNE3B5AQkTv7ei9BEZqgLgDvtTcI9B1eGkqyIjsJrXsmZiuOdt7CxRGAmD4qNI1UR7Zu2WGk27wXfVKxfygAPEBHwNUNoWYLhzRgRaV5z1OSkqjvsOUda6Ou5XIcuYYxZUjiESH3Te76ffUqhV3iyWrmllhD84XCYUd5WIJrINTjlIxjvyt0l3sEoftLHbDRCtkxulvFC1x0P5hcRY62qlY9wkSyNOnhHX3OBBGvTViNuGsVdI0SfAFIL4bKmKz1RaAi6BJ51aEUi5KWpiRhxILMbEWRNMe6MS7oxTwezwOVe5mzjvtO4wFjGFHhThPiKxvNKeBf2JKFOq75EEWTuLcfF0zM6MrRf5VZ6Gf53ob1z7A8G7eQjfowkpw0XH2dn6CZHENlRf6gJBYH6b4T7cXqBvM0NcUIGgvZVuXXPuRRcsS8IoThxn5VeMGOKwSNmA14JL70joIsed8iewM25N3CyyI84n5PkoCoq0VxJpn9adGTbj9iByQAFkW0G7nnHU8tDwVJHbQwisoNXR2TbzeweAQl2T23epnExNAHmwVGRRawNED5M9TVvbL4kPZdf66J1Nygnq4SjTJISwyi1DV2Utnv1kvtvPq8DOTxnmB93TLUGXHdpR8ooG0AdOYfDHTWFlqTLnYHPVq1F8lH7S9pKM5uFxFfNfQB5LAO2lTdrphULJwWELA8YlAAWIWB8TaXvc4TALbtoabaSiJqlrFA014BzrKn6TvSSMM0JtY8LMeZAXTZgRTdwjhaJngeb8iMSYkFHoZ19JxltoKR39TwyoY0BS5bQdaAlhWOvSJawrcwcZTW3L0exiUgEMPmUo2fpO6rWuhcVCjO6WDswZTAwzBcmg6s1lrHornBsikVbwMB3j8EF7KsD5FpuSp8Q2GbtKMQlaoAr151GQ7nNrsKpKueYmumo8CTEuD5kNg94eM5SeTqbEzQ1ztHKnsprdEP4JGhIi9F2Rkx53uVkaeppRik0VhQEoQeRXWkB5MUZ7XVv7VVfL2KL7Ejfz47V9965ViEU7Ro2ZXBoMbQZa8N7P8mfJMuwCTu9xB7Z'
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具开源免费，禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		elif sys.argv[1]=='-c' or sys.argv[1]=='--cwd':
			out.outlnC('Get CWD path','yellow','black',1)
			cp=getCWDPath()
			for key in cp:
				out.outlnC(f'  - {key}: {cp[key]}','white','black',1)
			return

		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___oy8qRut3hiKzd4bNJZvWEl6mf8Fsm='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'
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
