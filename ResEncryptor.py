########## CONFUSE ##########
___93bKNbx46BoNLD4PKx0d4YUpcN50foSKohgbzrhNGN7SSqb6Fw5JWTRiByT=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___ngyQYlXGLJa9iLBkmweQDQ2Ukyxb8q4z=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___UZLuGhPDkgJZRacemhciZg6RMP='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'
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___w0W8dEAC30xtMZDOwDSUhq1PomWMDdy53gul66A6DJtAjDvT3MScvHJGQXPLNEEaaj6fQahHma2MrYM0ZiCNduYdEPZP8WEZtKR6K2cP87J6qROZ7ZT2tOZpbyYD='w0W8dEAC30xtMZDOwDSUhq1PomWMDdy53gul66A6DJtAjDvT3MScvHJGQXPLNEEaaj6fQahHma2MrYM0ZiCNduYdEPZP8WEZtKR6K2cP87J6qROZ7ZT2tOZpbyYDvoYtxbYocNQR8mu0CpCdM3offdAeEfHnX78RHXysIfK5AYww8f0uVXDnRDbifKVF3TLYQFG7taeizcCPmKZJpZHq65zmSRt1CM9Ag5H76sdewkKkCITzh0Xzt0r7LodkL3tA8iclBARiim0YEhc8ImON3rze1uE5JEzJ6MDk3MHkcoc1se0JAOUZD4G5y2iBZlPd57fs5wmc1SnJn6rBfGngedEkTyI9pHi1xO4RvsBIPsCbUjEQZWkJjQxqS03cG7Dk6mmaYVSeBJ5YgEXd9zhxii3YrlxoOEmZ4roacLuLEVAU1LSb4xOLj4bIwgk3QxFr9cpD9qnaSZOlD0KrQ91r3dCQg07EQCzDAS0OwTkddy6D9KEAIlhhgvYWGxAZjEMxe7eVbOMsA2SqI13ODXFs1JYiNuRah7qy0JTLEKAkPp8NTj3SvoVeA3TUEc5qUDdUSapuqBEem9M1XRkHd83eoKZKhzWSD6FogxKIqGIVXjU12P07vzp2gp6K4uCAlFpRZN5hKtn95NwbUaKmdLRhdOwiCZTNZCTal6QBwLUhnpFate2WNJZ621v0jHT25YsGnHLY5xLu4toHjiq0Bys9rbo5RGZsaun0p7n3yfHFbfTnAjLaUyeLD1pM7P2zsXxEUkY01IdyYCRkNb3tnnvyj6sMO84PLOhscmasivZKYeDNnXAfdd3m1H92y19ve3V700I5wCpYVcrhhDdnHOaGrUEhXxr09FKZiuD60NClVfFRAwAOXOC1uR5sySylQmJHajN3lQ6SHWp3SUJd27xGkIGUVktERbY6frYMCkSJJh5cyRWa48cgRdWdhyadA1FsuEX6IlAgBIGcuWRXoPAH0knVK5wpCXDqrEE6bg49fooCAaNw7q6aqhPcWWMopYV3GmbfSfnD0kSvvttBUiucv8rOJhDk0Ems66DOSt8eyBGtEJIB6kRUtM8ft9573jqi1Xf6k0Wx75UtdjKuzTPNUxKB7gAuOIeoa35k44qgTknRLXgySYUnUibyCYG2vxdJtsD5DFw3sd3Ng446X9Pd3ZABUnM5ji5DF8HWyQpuBqi4mpc2hm5fNEBC5zGvfOBqwRnyLNDUYVtlY6XbkAd1OVTwAyQFQVHpuboi4StRT7iDsGgXpC7qrQaSAvBCBgIGfHn2WhNO9HMU62aoKk0SwTmskTnEloFEIhdrC6wAlPuN7rmSGtBuYi0roJWWUJJnzvk3aUD12WFzk4FCvysqcEbOP1DZ5tmn4FIZm1hgyXt9RhL0fjMbc3GbIfGVOjFG8ySmMJMCQGuRr5GNrI1fKTJN46IxvhrKiQE2ZrHd0dmwuvdJunZoctKPySRUIuZZTAYsLMjQSpSQHIQ1wNRqsWKCvHZ4hAGC8eQrHX8DoSMUwidyttpUzapurvQ7FhyRED0yE4VcrBWEJz1awAGEv95cWkVAbSYG8R8xVgRg'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___MWwrzObL5MkMQdLWX3Vo9Jy4nMgi4yQDOfS17KzVdkLFyQSxMc5VxldHyoGGKAHx9QFghDvp=''
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___ncZDqyrYt3fF6M5XJypCwkVt6ibqYRrI3CB9YDpdTRsWsW6UuYcN2I2w1gjDqN0aH2MEKPIDJ5xAftpH3N5mTIKn='ncZDqyrYt3fF6M5XJypCwkVt6ibqYRrI3CB9YDpdTRsWsW6UuYcN2I2w1gjDqN0aH2MEKPIDJ5xAftpH3N5mTIKnpSZ0HNi5YQdtMFOhiALAwF98eXcQ8cIHQIkCfhUUpDA4gMf4WYGHB6W3lxqZ75kgPu1jIQPjOwNhdmGXsXfFvYMTPxxyD2Pvw5pEqrgedOcpsvjvohgiEFPXKBl7JZCzCkPEnHqDJuAGq0idyeRDdGmtgu2HMU4G4wwEZagMcHSRwaoqKXedhqfJc5h0LvxmdKyRQnJdkXp0SfZSvYmfRcUEOvM1GWzmHHbCDQLeCqxghwFMFvhiSZqQMkOEGb1Owx7hIqPJ7z0P6P66fCoOTP1LMNAQPfo6vB08STGUYyfBteJE6pi8seK7Pvmf8yTd09Zv9WxYp3HkObuISZr0iy0ZhL9Xqr5nqO5eTJUKpMS2GuUThdbi0OcXoEwGExJDQO2EPLBbzd2qGOpQgyuRHeg3GshKR53oiKnNFtOaGUeNpNV89VvNB3PAr9cFeaAQQCJm8ZG63YnOMO2c2RUQV9f1CTRVhg4Ps0FqweJ9a5gDFNWuhrZIz74ebadYLFg5kyuy57KA7OwuiF4pguD17elTIA0eFG5VkbRAES4yLYUgoUXp0riSQin1vwihB5PghfpI5H9VoQ2vwn9x1b5GJJopMjaYKW8AvmXFAaguUfQ9F7yQUMrmNKlMCWZvnWn4l1PKdmLrKCMJ7MrG7AcrmrA9ilXiP7zYtvMKyENbSmp7XkuSBIfi1UBy5KV2W5fos984VOya3XwmvlaRKcYR283B5ZZ1VvecdDZd1RjIMtFqsZYN8zV7FYepUP12PyVKdYDvNkaT0kwdehPUPgZNzOxIZKW4XhBigvQdhp3jm9MVEENdTK62oCO65lFnFdhOh6sLQumM24kgBtmCcZ0LLaxLH8Ka6Oah2XuwAiXnVSL1c713xYxMCQiLoMARWQTtWJQW6jE02mC2xFCNH3zWTe0LyniTdkHXFumEyBxcr9pCQz35eMkGdCCd3Jspox4IyDsPnssgE7rFbAGaC9an4bOlokX0YbO2aa3LWuVluh85OKJlgMDZPQS7vHU9Sf6t3IiCTiMFK8yTcvPXyQtMHcYnZQILBamuTEp42rLhaq7FEFOUQ7SUwlfTrxU4U6xhhHSqxgGnce6WFx6tx9Brfo5nNf3LaJUBWSQdl7XglWfU3xm5fTHS7IUB1wcvBQDHDajlOoTOqXuN8tuG5iP8p4ri79numyYd5q5WT7yiQpPPXuKTuFmCfzvDJgppN5AVEqlUuFibBHf3BTQs8Yee6nEtGKCPLxZ58o920Ku9DYPGsu4NlPaRlvq4TCYrROINi5Uz2Yy8knGeAwEQpwOZSs5mzcxiubdk3e3liDph9pGDykQGGYyG70GDgXkC7M7x4dh0v02CurTlJ6qJY0EQYMBmEJnqGy49WjzqZcIhWxoiOT3DAOfbNUIGeEpMyQEjhs3tMu6SJKufK7QEp64cweB78Xb1WhS7MzVp3NeuNPvL4BxM45xWY51BZTBFHg0UyT8EXPDeaF5Hz04qgi6AI6xogpnmflbrcfG4NlsJ8DETUIpP9sn8M6ULqd5m318vPo2iF559A5fCb7oWBnEAAODFJ12T63pM07EtoyFEwJrBoH'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___beRGh18IUREFF4fWARZ6FMadaMhZVszipZaYojQzIhnmLupTJemZkGyJTJ5ArTr=''
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___dm8LhTXHqLeKQha2dyJ95YMz8d3mxmm2U5hYODUMQvCJ4s8JRwHhFprPX96mQqo8Iiozm6TcKASKsPuoec9WNja85MxZB6sUWQUvUdSVcTw5EglBQzI3toZUX1=''
########## CONFUSE ##########

disguiseModeMap={
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='' or not isDisguiseMode.isdigit():
			isDisguiseMode=False
		else:
			isDisguiseMode=int(isDisguiseMode)
		
		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		# cmdParms={
		# 	'projOutputDir':projOutputDir,
		# 	'encryptKey':encryptKey,
		# 	'volumeSize':volumeSize,
		# 	'fileName':targetFileData['name'],
		# 	'filePath':targetFileData['path'],
		# 	'fileSize':targetFileData['fileSize'],
		# }
		# cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		# runBat(cmdStr,'output\\')
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\ncd {projOutputDir}\n"7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,f'{projOutputDir}\\')
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		# random.shuffle(encryptConfig['fileList'])
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		# if isDisguiseMode==1 or isDisguiseMode==2 or isDisguiseMode==3:
		# 	# 随机英文单词、数字累加、字母累加
		# 	execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		# else:
		# 	# 随机大小写字母+数字
		# 	execFilePath=f'{projOutputDir}\\{genRandomFileName()}.exe'
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				# fw=open(fileName,'wb')
				# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
				# fw.close()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{firstFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___ZeozktxKP6hGD0L13V7ORc5meaV=''
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___43ZzzPr3vfbJrQCdavIyeSK97uuYec3RHKVjUirPj73XlcskBYkCnODy75hGLW3fyLWi7lbCctchoOQhAB=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___CVGY7JNgZh0vSQn6IbOHMT9VQsBYzjtE70sjb9RueFNuME9utBpQT5SMrMyVaNrmEZ4AtzvArmmUftZ9lc2uq6reBHBtfan9nMBcjtG2xdT69TJMQ6=''
########## CONFUSE ##########
