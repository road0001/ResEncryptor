########## CONFUSE ##########
___7N3vBZarmVr2ZefrtRc=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import _7zexe as _7z
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___xy8yVv0tBmrQ0NkbCA3RCi8K5RTCFM1LdwkD9D5='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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]

########## CONFUSE ##########
___IBcG8BEzNi87YywGqs2tnhOb1CcL030=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___GHddjg9Bc9chUVCn1jYjnkyXFF7HaESibmwolqhuMvPy5X18NcQNBiFQrvtja3wHeAaUy6sRivQdKjxWNI3iGMXOooYueI1v2xJwp0jYeVtuyjhg0DdPtvICDEN=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___raOc34WopYq9KQ0cMdMzfj3tG3kJopsnBtYKg7wQC4KnMQqmw6rBIK50DVT7FIK3DCpD8LFBJnio4QYQcGVixhDtFEcamXjrhf=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___9BH9BTbyOIghBDZ9ui6d2zYNsEpp25gNd0i7FMOdn75BIMyntXZhXAnrPHtfMDZDPbb=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___sdiiFOeaW6JprdS2MDu71aW1='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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName):
	configNameXorNum=random.randint(8,255)
	# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
	return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll):
	configNameXorStr=configNameXorAll[0:-1]
	configNameXorNum=configNameXorAll[-1]
	return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___Xhobh7SsZzsZbzvh='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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___wkdtPSU0ML9RdiSZJxRTRAauTP3jlxjyPngsvHckkDova4MHvxjhH6qDUVwPubq8B9L1LtA6lp5UKUQXcB7hSlL28JTQZqjim90=''
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

def genRandomFileName():
	return randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginEncryptFiles(file):
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize'])),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=makeOutputDir(genRandomFileName())
		projCfgname='cfname'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		os.remove(f'{projOutputDir}\\7z.exe')
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=genRandomFileName()
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		decryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		writeFile(f'{projOutputDir}\\{configName}',decryptConfigString,'wb')
		# writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		originFile=sys.argv[0]
		originFileName=originFile.split('\\')[-1]
		if(originFileName.split('.')[-1]!='exe'):
			out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		else:
			targetFile=projOutputDir+'\\'+originFileName
			copyfile(originFile, targetFile)
			# 混淆exe并重命名
			cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
			cpyStr+=f'copy /b {originFileName}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
			cpyStr+=f'del {projCfgname}>nul\n'
			cpyStr+=f'del {originFileName}>nul\n'
			runBat(cpyStr,'output\\')
			out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___62NE8pBMftSslOQl3BWA865HItrfMf870oGojEMrVy6E2qgtletURHc143govFIkqHSUvjL4o=''
########## CONFUSE ##########

def beginDecryptFiles():
	execFile=sys.argv[0]
	execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	f=open(execFileName,'rb')
	fileData=f.read()
	f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		if exist(configName):
			break
	alreadyTiped=False
	while True:
		if not exist(configName):
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig={}
	while True:
		password=''
		encryptConfig={}
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		out.outC('正在解密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC('[解密失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC('[解密错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)
	
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	out.outC('正在重命名文件……','cyan','black',1)
	zFileName=''
	renFileNameFailList=[]
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		fakeName=fl['fakeName']
		if fileName.split('.')[-1]=='001':
			zFileName=fileName
		if exist(fakeName):
			os.rename(fakeName,fileName)
		else:
			renFileNameFailList.append(fakeName)
	# renStr='@echo off\n'
	# for fl in encryptConfig['fileList']:
	# 	fileName=fl['fileName']
	# 	fakeName=fl['fakeName']
	# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
	# 	if fileName.split('.')[-1]=='001':
	# 		zFileName=fileName
	# runBat(renStr)
	if len(renFileNameFailList)<=0:
		out.outlnC('[完成]','green','black',1)
	else:
		out.outlnC('[警告]','yellow','black',1)
		for f in renFileNameFailList:
			out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(-len(originTail),2)
		originFile.write(originTail)
		originFile.flush()
	os.remove(lastFileName)
	os.rename(f'{lastFileNameTmp}',lastFileName)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=zFileName
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{zFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___DmEt9YyZep2fkBlY6WxHYmzhQpBzZlGbxNAzoHWni6m3i1dA4A6NhSK19w0HL2a76LnLeqpmFztzdBsvpsm2DvqDtE63z3ilLmhJV2fie0=''
########## CONFUSE ##########

def main():
	os.system('cls')
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___RyHIW6x7XiCrqEdD77NsCmMYKgsgIcwDA2xvDzxQdOMGgG9q1RcBVicylfqg=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
