########## CONFUSE ##########
___DT9e76T8vk85NUfBmCk7C=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4270000000
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880

########## CONFUSE ##########
___j1VwIEZIBXGXED82x1n1dDMXBkniA4IXvkzAZvBa='j1VwIEZIBXGXED82x1n1dDMXBkniA4IXvkzAZvBa6XxQb3iUlEAeqTSjfEnOMuvNxSOgUuJ2UFEaxAVGnjnpPqG7IWWcIZFPSy2or4rHXLUH6mdbSQMNjNUWAus6VSs32tkdiisNT7wFd2QS8BFs3uYTTupFmTGpNf9O8rQ2TU1yYiVwbRtuMIRgI2fSwWIxzdqk5Nq0ZK4C3jZqnnDmdzztzVW8CbKLKpSrBVBf8olFtDZzGPapTxQSYhE2D2lJwlc8489IqUeBwIk2o0cgtZaj9sHSNulTtR2DQaWY1VX6lUePYM5O9SwB3kD30LF5fDQnPCwtbAJjTLHeOGQ05xnfpGXqaU0hDTvan2TNbY9wAwlAsOLNUVAuFFRBHbMUCedVSxi65v9sVsRDEDiQAcjnyPTMo1RyBdkxir6TBN829U7gKGqzF7H6gt2tgMgFdRtPxYrrgmlNi4bZbh7N2c4ZyeMPfYTuWToNs7bTT1fdduE28YmLt68HmLUqK04vGC3TXXLUfPEYl9844NvTVCPzr3wbWn9GHw2NsHiA4xVPs7gyyqSiQXJw8o7zQcunsXfb2yNf2cDwhEfdtlfz4COt2Yef7CHsIHzrjg0ucbiM7oNWfhacWrRDL5pMyvY2BRzhiizMXzj4wkQUk5bVbinB89I6kJpMlU5NFzKJphfG83hKDp70Fu4oxF8dNNQ18Ps9vLrlLVmN25zWx7LtXoXcdD3aIhngGbC4JnPzkws3g9nCCvDhKYrcaGW7Bjj6HidGwvmtO1DLmT04qVUkut6uocpmsabTANgFmxIOJvcsg22OADlp7RPKWlC5kFkvtR3MxSa8AU9XAXpgqEbyaPHzdkDFY7H7LdHEjvRqIyZp1bJGN0SL1m3VbkJc5qiAObMrvY1Bk7m3nGPjAfdSCZqkU4VlDphlkFSKqsui3U808IJpxxQYrleu7wronsZ4LANsYB88AeZtYhVQQ9NtfzU3KJnGuUur3Qcj8aswmKkO5NnfOMVOL58HOeFNOLbJcKNFn6cASQU1wZzoOMcnnGq1ONN34H2lyNAJWjkfu7kBjlGt8ug8gHO1fhCL96BpjaMUppwGrKmFMJUeNvN2zwyD0aWbwdZhfaTiqpeVEhtMsxTtzUTDLfQZaNSLurEhxDmSla82fR62850vJQTElyPCiPD09Ip94o0vAYK3Dc6MoXD8BRpWBiqQZkRz0LYsgmnylb3LcEyWGauW2UXVsdy8fy6gg5eROZG4aFOHws2GA5xQF7MRZLIPhFranzGYtcV79Qo7WAKm6OvPcoLkAairsj90pQY7YSCiLbnkNJNceiY0ZNUHUXX2MGs557jbQQP0ZLkhIRTSLb181djYMa5QywkC3HxCbv9tmdL7EegOc62JgCUyTryLU096puTD0Bj4VqIVdMZ6Ui22VhSJA8kA0NxuxkB8aPja63NyXegp75hBW5Qe5lbUGUWPtOnCk7sQAl2NZ4a5pVaH3KqUvIEgbWY33rcBWrgYEbBTusKnKi'
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___LsN3BgwVfHaHnMnZ081joAED4vLFbmDcDjeyHwFSTzOCFSlOWvu0DHrjbtsa7lekuksUdT5ykpWiNvUK9mYNbsA6HbXKtou2MK=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___GPWNl3GklxZNhnlhAVZQzquWGlCb8tKNKg9dE4ipko7ZwavzEpMmaCEux3yxnPPco5XL04xK9FUDnd=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___TBKmwa5GKPt8Xm6AKJ8hdojjgZyoThUvH8Ue3AtNB0HDcjSOP22gytTYuY='TBKmwa5GKPt8Xm6AKJ8hdojjgZyoThUvH8Ue3AtNB0HDcjSOP22gytTYuYFeif82eBW0ME92ATDfmrIE9nZkfM9hQyTrLMfPqACAE4ATFcXEZY4ZcwAAnPfMpwDVRPSorhDjoYovtZOaXmPybJcYmjxvGoTapQLvYcqnnOLbfeMhbSytXEIPwrIS7Wvfv25BDhXoDfgv6oqajTKS7HvnlyIDr0yWmImNL0AVVAk5oBiuhqI762LCt5mIaSR93akZsbnp4LEN9DmRs1MsNxMPcK8TWvok8xXmlaANj33pvoIhxpmcBu4owYhbnif5x3Mt8lU1l2nDV7ncm62AJIcR1nrFvHWzHZOqpy9KjMQp5PKQI3Zyrr5b5cnRiJxxL8HT6LOo6fkFnz1tdCOfLZnsk8Ntq1p6Nx1IOGBO9abR0glTacemDMnQaRqjUGNOjxtyo7Oa97g1NH0Qgp1RKECg02kknTWRelyIXMvtdSP2jSvrUB2V5T18Y2552RHihRqlBEfdKMmBiL4kK9fmBqhjFqi2jpkSXY7nJXmn7XVM5pRuswyylrXASzaBdls2yNxQdScsN7H1KZDfeVGY3SSuovA3ilC68LKExHXl5pByOX2EUT0WUxoD9re2IUu5kVQfvejArcKyTcWft1lTIk30QZ3rMPmHI43jMYlX0JQkOaZ95xmIvSGl6MGpi0o2EU4sMpYK7tkvxSVoMK0pn3Md51BMSKwwYrCAah7ECbNJPCwCQ5SieShWtOPN05aHcfMd0ElnmoiXr11dzjyzrDJo2bmrDTvktR0S36qlLvSuuqz5JhN9O695ayNddcJTHWfIBRiccQMOaczGrolMPc6ALOTxyTv1K71szC4rmVcxiR7DefaDhQSSYAxKiQJRMWfQo2xX0o269OIh90tfE3D7RQ2UlQtmvPMAZea3QiaDRfbB585X6pc4f4dxF4jzXXCLZdl5s1vAJYDjrxhZFXy5iDRwfeCYMzilNSImZQrUkxtTT9g3pX0pMi2cDoGGG1ubbCYK8oIPoXOvh685hZoZOu3tMiZ0hwqWy9pHH8NHFf3BT7VwJusoDz8tj718bMg5b98Mpj4PXAyHg4U0ktd4DofMgyl2tfvzypI73s2NAeGWhuhPVXwP6X9EZ4ZltLRTqWdAgNdoRdM7Ok1qYCXFowntqw9yAwSDS5e7yDpyii7Pa4t4284a6wXEws4ufe67JWuf5GOQ3gTu3oh9QxVPIGPIvjZjlk9La98ziCTvVQqFbRJnXoijWL7johEncMLdyjhRx5KMCCUYOKOiqezZN6Mt4nODXYhGk5QTZOHnW9TwFihGx9bq17Pabn2dIwI64SJPadCUyDzRA3oyeCxkitxwWy5gUPviAUy4l6a0hLgLaNcjnoijFi48L8W6s6zSgS9VL6epwTofMCo7KLkNms55VgoxVjl4jDsKYVBGDs0UtIolBOBsOgHRJdICv2KVD40csiZayAd88qTyV98qTYvogN8Wb4DOozce2b0DujXaygmg1qaJaDeOgjutrj0NbQlZBrpf2Fanw4OL0wCUB9UsIAxSQEYyZR5BohfDN5jWXBjAQNljthmE8ocb63JssoQcwNpqHgxNvxp6VslM0WrWqnCScdYtmJXAxicqMlb3VqUVaa3DFPp8vUNrEpgBWAlVTJUvwgG7wC9JJWVqTgKviUnoZ5Bw9Ox46JHQzhTpWIHKcS5wm3jsZCZauemKlCToGzfby9lrUzlrpguMuLiBVKLD0zcrYC5oLRaUIolPlC4RD8AS6FfzrA1CvyocNzGTuY96Y6rvDUrd0yWUrU6u09VQ1JE6lEiBFdxaq3pokNVDoURhtSZOPZ8JzRDNc10RF9qON0rSyI4ZEuCnnpwdeyyP9Vx02zNblcrZ27WtDjGjOxCuYK36pOw9bOipeNlkWAUaYquxYp14umf4q4M0gsKd4ALvi4kGRy5CdHMUhuRrvltge0ZTzbLeuIKUrfFDEd4vblegkWXJCcYCOvpTTs8CvQIPLOFVFbM9x3v0huKLBE9datSNM0r0XR373fr19ftk21HhwnyF270nUscsoiKrhYt8nBV7koJsTQwT0J5TBPAmhdGGegQxH2RSzmIPaHJXgMAQoSMyAxIbfcJww3K7DUfN56GXyGyrpHW7U0McWoS4u9TkJ27bZwcvT3FLirGmGUgr1hsDQR1P96SKWuvRY84pK1z6oDIt9Pycqr9S4x3JUc5MuhQ5ST2mmdh0qLsYv7cXjk9Bzk1UAzze4gqIGE2ERESHpNKZ37CE39Jd6T7UKcYb7ceygdiGnpxhUT79xLDVvqDhvb5vaSQtRypW9AfoZIYXtWZbHT04zSlMWkgbrArbkRqR7VMXxHypyQD4qzggtnwkp8GNlgTZsIxGKfuyIuK5WWIJKqnIoACxwYVA10Vg3froSmzHtglxRDZFoL88CAErTVE6k5jkDiiVC7MOYAXzTUxyLF7PaAUU5CI67TKLhTXKSiE9DGpfWwjoNfF2Si3pPkaIhpefn9iuUtTZqBTPeyTBaaRdfKl1Z18bRob5CEiibFE8LBBcvJVkcurYkefIsYLRFTh7Sbkv58DtD0OvD04sGzdHSIFQKzoP7wUODTstk5b8Kt4XmlH3qTw5Tou1RFBusA5jom730NY4y1BB3ycwYuL3AcHleBwsOTPaZeZyUYpxKBfBwfmD07zCDcf8emkq24gyIFcjzXbb3pnjp'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___6Tb2ufZ3NMbyLfTkmsJ91ljCfBPQxHkKggKVvMz8H54w3ruVHwSrzwFSYW3hMV1XuefwiUQ5QJ=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___ELtmFwNsBuOggCOEePSykChk4c5ffgCNQCY7l9='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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___Jc4oUcBdRNfLOmGHwdYb5OkXE2nygTCsxgMj0d0Wj12PliZuVcHwxiCeae315G2zs5fJxoAnag59vmDfMEe=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___yWbnK8DqSdf1YvlOz76ZzpBGaIFlrOxKbbWHhNXrd=''
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___UMDMh989ng9yXZgHGkwwSwoXhLxJtR=''
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

def genRandomFileName():
	return randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))

########## CONFUSE ##########
___Xm0hmIJ6zXhvJ14y7GHJnbtDC2mnp1BnM8dardBT2VgkxtxJRvzIZeWOrLEt2BfB6Qo5fimmPDE3gjnSMOkbrkxmcvMS4Lmm49MIwykbE6HKsqcagdhU5sA8XyrPW7=''
########## CONFUSE ##########

def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入1：')
		if isDisguiseMode!='':
			isDisguiseMode=True
		else:
			isDisguiseMode=False
		
		isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		if isSingleFile!='':
			isSingleFile=True
		else:
			isSingleFile=False

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		if isDisguiseMode==True:
			projOutputDir=makeOutputDir(disguise.randomSelectName())
		else:
			projOutputDir=makeOutputDir(genRandomFileName())
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		totalFileSize=0
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==True:
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			else:
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		random.shuffle(encryptConfig['fileList'])
		out.outlnC('[完成]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+'merge'
		copyfile(execFile, execTargetFile)

		if isSingleFile==True:
			if totalFileSize>singleFileSizeLimit: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
				encryptConfig['isSingleFile']=False
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile
				# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
				lastFileSize=os.path.getsize(sys.argv[0])
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{execTargetFile}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
		else:
			encryptConfig['isSingleFile']=False

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		if isDisguiseMode==True:
			os.rename(f'{execTargetFile}',f'{projOutputDir}\\{disguise.randomSelectName()}.exe')
		else:
			os.rename(f'{execTargetFile}',f'{projOutputDir}\\{genRandomFileName()}.exe')

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___8piU2wEXw21KGM9qCYpJ7RB939quXL8Pr='8piU2wEXw21KGM9qCYpJ7RB939quXL8Pr2qs7kuRFeRY1aLMKAKnkDF3frNz1j9Jo41HusIkOjOVZ0irlLaOs1tn3QrKhunl3BqdxSDtXsEGsTdjer94ZfyMJQa9T3M0JqSDeurPqO3wMl0t9eI0eMDjJ7L0YZnpO1w8uYRk1kcEwEgMIF9OJwnw6qaJKAoZ4pAopurYka8QsJ5KUnJwQfmGU4er2OLsuqlZYJB4wLhb8rJGxBjs6GyiBlRekOCh8cYTVchA1kohBU2F572pj1qEGHUVVajVneyKbPzU8vCX1lBhJu9crczGatCUTCJ8SHxiV1qHFcfnboXUyuNnFrsUbxsyfGuYhtnbFbdCx5grTMVGJXmNaFbxpQGKOZcfnn1WkiJcBj0itHpBfQTx5DdJBEEtvi9MaKkRlZhVFV6wdneEupHtz5BZnCByNGV9TEWKVf9yCBImahBGevT6GwS1uHr8CA4zKk68ctmn1lS82IscmCs014iMRFvXKxWDZwSaq5sYqq59uBDYdgmL7O6uJtBNsyJuvWzVYLW6Ks56c501iYeTL6Y8uGyQuJ6gTI8nONGl3GLrsmYzWWl3BJgesifok4qbUmZIyhw0eUxEiIPQnobsvNwO4bbFTzhfRYAnNZZ4I3wBwBajPfXGHE8MEukgFnoGmyIGubelsTVcwOcCIfnxrzq7ZSIFu7z6h5noRPrOLCdgD1ERoGiJ9yrQPX30Ssq7tHtfWVGdyf0NyyJCVEZXIjj75uEv3iKlFWPPiORPsslBkhGhSB4DRuw64mLdMEPQKoGAcnbHBl58VlWDWEACFmg1g78ydsSxVIKceAFSOiAggRfCBNfNLhoIqLaw4DVnDd6eTxbUMjWc1K1ixIzc0csW53DbXjfOiXYHX0R1xLai27b56HB9c1ofabWrdgSQr0oNGlawDHu6cXDHAMnhNOHDD6Xl1ISYF33Y2XUPHW5JtgqG0M8KKEkBCVGbjB1kWFxqxAEaRbvvAes4LPMWMpfNCU4BZBQK0VdiARUghj0Q3F6GUug294vktAiWy8oPpK1u8WKzh9xVtlzDkYpJxBUMWh4DZWCHBNtBpr01jP3VGjwLhWjoFAZSSGW2UJFSzlZGyRd2StEy7ofPEeSk7UrUFV2vufjj4Ld5xl5voaxNcDAyEkytkItR7SFGJoBhNF0mJudjtgTuPq5MdJtN7G0M7Qj7Wjiocgoc6QiY8jA9iONbhXL9dP1hkHIcXIvzTj9zcJLCJIJbAfjuGUlRYj9TomI8l005LnjOV16qPMPD6jYlh9hTg86O4RKu2jTU4s1Fu0d7ah0QGkxhMLZ1UE3mnFc6iOtMMNYX753KwSOSe4a2hoaVJ8VVR6xKIqklkyIXrQ3hApkmV9JxD1ss6RAWUZIdLxuMTPV5eohcRNE58O5oyJIjhAuXOej5c9udbCSCop1LN97deAVhzho6W0Jw9ngL5irsB9SlCgvBEREKEWBKwkNakd58XZyvHejnE1t0K6UYGLw4X61lw26Lp356t9G9i8y499K2AZnssukwJ8JsMdLBU3akT01O4yTX49J8T4NfbLUQInrHpD3vkALMO8GObLDvgqh2Dj969Qd1J597u9oK6jqtcVIRBfy3njuljMai8u9JhLF5eC1T6gRJstKglfEFV61XF64uDlY1L1gROIZhK3PgMPLZq0wVPTUuMOsPnw1nf6H3wbRhPLLfs94ldjAQrxywsw2lSLWI6G9tKGHEohOmkCq1jwpcp3SchKeTb3aIo4LSQl6NvKAHZyXtdBg2MZFRjdG5Sph7hAiNwDez79VkrEpK5zmscHiIWHAXmgBvV6RICBp5CluDn1VAdsntE0IewiLaVL94E34i5Vxb5HFi57irxjYxZSuDNAygChvRvF2vs7DMrOd6S9lCrFU8GmTQrrj73VylqW1Nkz3MgA1EROsetgzqOrhDc28JdJAjWPU6GqLO8q1xcmAaXw9gmT8llmxHPUz5nocMVdOnHmXYsmxGmtv1j0kdSN31azG8vp1evaNf3PiTvAt8fX9HSXbastdNptVyPHIrLFiadeh2DKfAHKE7jp96u6gc0f1RIYpmAtse5IhhEk6Ls4O2j6vaIQKuhqa5YlHASy46QvyGMA26ppw5D5yujhk1hokqMOpyWSOWGlFGucTRULRxR95ACmMrXLuZUxe6T8HmsCmqTkABCn7QWqyhQUH6Po2bVZKilCzokJGjWWtN87c8LPW53B8d0iC0ixQR0mPEnxuHxcvc0XQd8I2jG2NafL53GTq8QsecROjLNoLtrYmWVARyKH0jXNfSLxzoQrduPvsKwPM48XYwswiDLl8SewXkerP9cY2YMy7mCWPK1jYeIGdEPwpFBFG7jmEhsVhITGjvNTxdOLD5ULpcXMZBvHL17GtsiFaBs9Qbhdy9XPytpXaIM4svGkJnNGrGl86wd9SLtwDekw6TcfUQQXEr3MAE3rNwJwpJ0PNuNV50k9L8SOkkz1lAzAiIVKUSCQKoqcFwaRoRfSSt2DEYiYbYsmV694RvD0YwoZbr8rB6H4hsjP9R6A5OZ6CvKtiHlliTqpSuYG5a7M50MYFQtwe421uY8DDy96OSSLbgjLrIeuq5kSwk7MmzHpGly1tg1HStlpjQIptH1ILFRFn6a5nes5RgUAa4ZF8gmYMaIZWlgAuzsR4OEUJQM3NwQj5RMGCeN0K59B9zUKNf2rW2EflAi76Mb4EKiFNEvaY63av5w6o9jcKZz6IzzKNNCnNgIFAzBkMn5WnlZ6u1rwIhfHaRDRoCdAycoMQI7uwG7Ul98ntb0i4nWqx6CHGxwFXdQunjTKOq7OKdAlUYiSmE3AevjAc8OCSpAHiVIuzolYOEqnHaknJvV0iArDNo8UJayPw8xksFzPPaw1HUmpkmF8a82HAvf28lIKvjL9IpcHHLXOIjNYuM7XZVDsvsq1NHjeUHTqNBKGW5G8MmNTCbso7CTBggM8ALVFAFFYHUesXsuI61BFERkvbYJQUegv9pxjYkW9PzO4ifKJffIAasq2AD4jwdPb3BI7Ph2xUUiQZdxX8HT1NF5wexXcx0zy2NwEkrltQbLtfSukCLQ388GmkDrGf1oAgW2PmUY7NdKVbLalvHcaVIIChPc7lRRVl88u7aQAFs62mYb2JU7gi8Wd9pG3viKq'
########## CONFUSE ##########

def beginDecryptFiles():
	execFile=sys.argv[0]
	execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			configFromSelf=fileDataSplit[1][0:-(i+1)]
		elif len(fileDataSplit)==0:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False
	while True:
		password=''
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		out.outC('正在解密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC('[解密失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC('[解密错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)
	
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==True:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			if fileName.split('.')[-1]=='001':
				zFileName=fileName
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			with open(execFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
				originFile.seek(fileOffset)
				targetFile.write(originFile.read(fileSize))
				targetFile.flush()
			# fw=open(fileName,'wb')
			# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
			# fw.close()
			out.outlnC('[完成]','green','black',1)
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

	else:
		out.outC('正在重命名文件……','cyan','black',1)
		zFileName=''
		renFileNameFailList=[]
		for fl in encryptConfig['fileList']:
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			if fileName.split('.')[-1]=='001':
				zFileName=fileName
			if exist(fakeName):
				os.rename(fakeName,fileName)
			else:
				renFileNameFailList.append(fakeName)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		if len(renFileNameFailList)<=0:
			out.outlnC('[完成]','green','black',1)
		else:
			out.outlnC('[警告]','yellow','black',1)
			for f in renFileNameFailList:
				out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(-len(originTail),2)
		originFile.write(originTail)
		originFile.flush()
	os.remove(lastFileName)
	os.rename(f'{lastFileNameTmp}',lastFileName)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=zFileName
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{zFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___MUE7yvjXTF5WezCxeSMDp6RIu='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'
########## CONFUSE ##########

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system('cls')
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___6Dt9rdwGeHhdlF6TZqz6drnrnSJ=''
########## CONFUSE ##########
