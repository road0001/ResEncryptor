########## CONFUSE ##########
___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'
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___iNzOioyvoPis0EZbWchxm6lXhYVjfk6nr3MDG69jT3QQdQnhXIDhYeDpuInAhKAsNgnCweIMY7GZChPEDe='iNzOioyvoPis0EZbWchxm6lXhYVjfk6nr3MDG69jT3QQdQnhXIDhYeDpuInAhKAsNgnCweIMY7GZChPEDeWL1zdMxOFlMHrHqQVfiCuT4hdDSjbevWf0nqVa9pedlUWP4OQrdxjMfRrn5SDysVuwL7REqV0v1F94sS0g7XXFgV5pmuDo5dKldygdFhTAXyGReiRSu7jkdqLamwDkpPdaycADmI7qSRbyU7SY2DCHK2jtMLEWqXSPQSR4dJuLcIDCLTEHtOSPrAVGIYDaC7BzEazefuePMTQ4wHEUEPu5YU5xOPJGj33MFaBjAonooEon53GRa4fG3XElAnhcZrwS92RtSAE1uqADKXmmRSI7xL8XETZkaUC7intGU0G520XHKHGdVMOUOLusT8Q63OzGI9ZqruqRpcns7QACD1XecoDThcKIWzrEmg4rYQIqMJo0ZP4aZUR0waaQSq6dTrrg7i0qDmsrQjvgLhZWBVIvS8qSXqfshHIugOYgWHvlfcl0gJdLeaI0pm5jTvFiyAtBi6c8HhMGZ1WuJB3WkmnPZyTYtTrVn04T25fzeoyTp4iSzsaI22JyNaNUdjakfyXFITwv1featIUqHuAGXhApp7lpa0TdQwb1BjUnA51yaqR8qAFvT2bO8EO2hJmR4wMkmkAzSDuFkbf2p9drNOJqDhoKrv1uX7ZiNVcrbUsm82MB1yUKJNCjHLG4PQBCPInRXrQscBNC7nVmuafislloHX49UAsdcQMi8re3zLvNC1zPTdcn0VREC7qq3YWCLns4aCGnUswIuHPD9nakPQJ6zMmTXEOasnKpCrl0PPoVsxgAvpvvexeRR4csknVdM2tJJewsHMVJctQVikC0S2wYK36Phd0gwUrRokbkP4u2NjVDHIZgvhCY3gctb7Cu4XTVzDLuF6DqXMrRJz2UKZ67Ua9ThIAJJ52jMMI8CZwUmlCzAH3lJKIZZkF7Bk37Wm5imwMVZ5ukdsiGKgUwY4wP3ZpO9rj48KeypkH6p1uhYR1sEDQfJePQ7hBGHIompjtIkF7sm8ocFhMpOIy7PPwCjNgCQaLacOiyAn7jg5bZtrLrlrjJ8MdJ1NdorUbw4wXI6clhfEVrTHtbixesTWfRLHqIY6sSOzA3OKZ2CrxaroaK757YuPbyb2l8IOJHh3BWObDu4mrasG6B7bKDjjUR80TuF6IV6HZjxdpacoaHbC00y6rFSAaGSIgefxuA1n1hV26tDoSXJARiBpMIvpckNXebpwrr8EMSagmn25CfQDCPz0emZrzPB6iR4eE1SOfjF1zEAJfcpSkNtLFRMhlLlUpOrn4XQ5O84nbgWPw2VmVaBgcGRhkW2eBpGdKVtIS8Qro8FYDxRB4oNzmNn9n5hB3C5BOdvLEMI2KO25BFpDD3SKzFFTQEHQbvYo2fA9JgSRjuvfgvmcfxmvJnfD3B5Lc20aBRNdJL4D41gZwnwvk8bReYfbALtrZDCBD4Cw2FvAFGyslBrRIBrgY6EY6J6PB54BkL14MIj8EJUOxRC2vM9nrsea0TFJV7zMpE7ulYFL2AnnZRtSRfZNRARxyVRQY2R65BowLRE0RMapODUZzUQSQ1wiNDAmbJp6kDnhc81yk9544bbNMM0c2GSrx7iSo1tQStku5z8VzPB8X5BZUXcYm3fcbaxp3X7oAB1jrXpkgut0WPp3mMxa4p2tD2br66G8dLNO4d9iDcynN0DXWdJzH6X78kRH7bHlCt4ZrLWhgxdHq8igRm1gW9TzxEXnsAtdtXAVWoyPW0UYg2ppCqCcY1YvWAYbrnNPWTdRiTKOFqqkmyGwJAaKsDHSJGHw4wqmAcx2UxE4MoflLV3jN0rpvPsfKGQruwNy9mv5C0ZD9G6xSkwYDqQmkrpypt4zuIw1kvp3kh5KYYTbu3iCsSafsZpZdR5cgaLj8z8IYYcOd66jpu6vOe3xcGeQWX3QB3UPfkhZlleVHGKieKjBl5Nj9Vx4urceEDLCeS6HADRmmnuhchrA3oq9fzJYI45c6ekjUXs0jiBl2MOxihI8l6VrCDYtIySTtZhtheWaVOcEbfOQzCSFTVg7VMmYWAXuns8XCOB5PMZa6V24vsUIPcGxQan8a4rHxHKt2w9jQRVp4J8dMfLx6MJB0W2mpwIvbHaItj6XlJdb9Ba28RjxxSTvYXH42CKCoeEhGOvxrsMtKlel2QOJ8mHdCeCnPwmIton44x220aCwJrQDg4LIePKLYGlV4rRvjuwDfPkL3nVos7tl7Ibp5YqIrJwhl6eQsJv2wpvSsH6DQzBC5FXS4TugDOD6Qf1YgYw2uBDIdNuHq4b5r8YmTqZK0yYWUUUwZ9WAwIS6ADvd2TKCMGcKTuCJE8or8qw6OBtHHVM8FvShyufif1fO1IQAxVmGxDyiweFus4I1DBwUcZ7c2ZB9pI3ZaflQ4smILezMTGDtZ1AxNEo8W5tZpv21Ot9IEGoP7R6h3dsQdku6ekJ6l3nRXiuoC5VEREEQwcbmk2sXASiuXMgFBYdXQsNlXvxgy34Bzi5JZCyQk5beHrGShcObj4vb1H9vwBApi3RlQXkPtBRnbptwXTWssrXGIsCRC4YNtyB0noPYuhcboJDDTelacsIpA7HqSPbwvUKwhGUSiO7xtiuowq4CojGoG58eheSHC25iLnTijlfOC29Jq9Ho5t2fvS0YkYL3S3H6LlpNwBeIYD45QC2GsGc7ZMwSxiixHFFEQJTEIHlSapr5tfxXtdYHvtFK9ErA7OeodL7uNdHmU7E64cV9VBNkyxSMyhfvem2Qb9rbu0eysv06MmIFRCH83L4kJWF0mEyLwl3w9AjZNilrcivhu7ePPAbhAVYvEohWJ8BlA9Bty6xQOeqPryBHa6U69JFI1j4oyoNzoKqbKdvdbKL6N2C1azYwjA4uvQ6Sktx6CV4plhxFXiAJu7lnsCsPKep5M08qpT4NZ4ddqqsXkHMICixzYji2Qqd2HOo5OCt6jmEmeI8hrpKdZNqheO1bLoUgD3WvJMCCaxApAf430q7QoNXmuUVnMr7AmDzdyIE5BabuTGNjQeHcOqfR35ccsZf3VEka0RPSiln1mn7B1WmNnWAtk0AJFhDtf7o3YHsrRP7qvHccuA5LGJLvS3AVaAzW6LqEZywyPRDdIqnUG3lz1FGdweUc7YBurB61PI2C3x9ZwWoT6XkspVs9uAzncqk0WSkwQnDYvu80ccOYrGqXQo7qIYgr2G5BJsZxNDJvaEqhIiIH14m4Rcjc3TZagwfJ0siTPHZpT9M8lxVs3BITk49UMKSwT5QWCx5QyVjsXJCrXt7Uj4kJTiW3OjpUU4k4ai0BC825TQ8qcropHAOLFb70dvKoV7qB7K61F3fgrJzpbasi1Zhyp4jz9XwEywBye3Y3oDc76BdTcysTqewCrjZCIChRnS8XRPRn9WvbgdG2FVdVKa55Dz0FcKHDj6qZztvmsU4RK4XptdfIAjyk5clBycEKbsaKo7xq4o7B6MkejQ6xiOsi4N61hMCooxnW8QKzLucmKAQ6RPVHx0PtGUgqeirE1zgUHvBcPMxLmT2oONDXOW000TN90zxsqNvLvXTYEnwSFenThx6NDNMYyYEyUL5sIPDxg4S9giHwQdgXpGlZKbRyv5IFbvzAGZLax8xZC0t7dQtQqMYm6FA97DRwW18mgSMACJLxaVfW8t5Ku5caOr2PLyqXhWJC5Rqms9RCymxc79UJ9guNAoO0TQhZvNyPdvazuTLFOAyRnyvAcJSwjlENS9RClyn3spwMal5biNHXUjszoeBRw4Fn3vKTVPZzMNQFE2jGVf2EfRpaO5AEHYneT6Yf91fWh4pQbW1XgszxCj8vQhMFNWEcNJmINLhN64M9LUWYHRPfziQUGyggdmhKdTftkBgdBmSYBE4dZhSuwxfowGK4TiXaZ0nO8WTWEJw5bQULAeASgrjJ8Au30ajDJFCpIQeE4GNmtYj943uC56ceKS5mApa5G9GCKs36hJKImJn6IbjGvm92Jf48190bHvlEuBcm4ZzzN2sdTYhCU3wn3r3X9D2BV07BtMzSNsq3JZcVrWYfwzURYh9o8grOZPN5JHZFW7vVRxvVKGblNqqVTMrVJGExK89Nzo73zHxN3daNnosejOqGxXALAWwJezhHyEwXz3soTVWgyrga74K4XKj1jyjKU5OBN0Nepg7WVJk9fEiTxag3FmVWDVALsn1Oee1yVhK26oUFvLwSM1CoSUYYt5KiC0W4DWgQ4Nta5HBYSlFZ3VgXYiUeh7SXRNE6s465VtaauJN5F5agGqsjNOWmbwzcDKu09j4S9AoFuMEFs2WNEmXfEdVGJe7OWCooSLqR0a7scEoyyBANkx9sED7EpmqvIlEdoGWefomSo4ylPbsMSDsDPXAVkz8UNQWzTUtCzBIWU3YY95lPkri2PlwWmN76HZRVrusuRQOIj1DRElHdMIfCrU5Zl5b9oa1iKcT4BRd0vZDW797JrmmIGdZNGCoD890ZnYYliv8JPloON6iRRCS2nDPS8V4JWkbUEEFsT0ZDcNK1Aq1va2CJjvGbRiyCbpg4ar0IBE0ja3VLjttiKzuc1Vb587PMxxNtNumSgl2vfHcq6aWnJmmORx7Eth1tBsGclrThUnly7raEAsRyuOsztkUDXiTXFvarbDNT9CcxEaw9jy4noki7MLyAwDXWHkmLUp8YZQuho7RKntKVTzbRobLizM28NFsukEFpjUqHQFmoO2krSksTQnL4ItrP9GWTyYcKT3NhLV49C5Qz8ywmkTK6gvN3UDtsUUwoIKye8gAPccszArPBB5fzuoUlpxu4Vq0S4VXWCGn5T9f7r2sBZt7g3h83aotRbsKcw9Dk5CkyICCiPTrfT8agd6p9XBmGRbbANeDF7YqINdIA1YEWN0mEwMsM7q5jepT44iheGlr9nmleUKmCFVFrgJGBnkZRuzj1YK2oiXCqavO85DC0cdjgehs4BSO0QplG5O7obI47FqnFFTC6bbwujPkYHc76UtG775awqJST81Pp8zJS40QC1fBBX4P668PYh5asa5WWtBbhnNf0Fd3EIrY0PEdfTst6PVeWtxx2O6m3FXktw4yGZMC2crUYv4ATNfM6kEwdqo4b6W130WThY6twYTuVZQz11s5EyuOSl2AFCh2qmrZROUm7j4LyyskmvwRh9cGok4iTlqB6TLu5oyFiqFedS3pqtdzmzVdlbUGV3PB8YCfXkj2tzYOQNfgzCKw4y'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___h9z0vW1hOyvcG8asPNPGqvu6rMNsiYTJE4LEkBIlcsVkjjrs8J7siB6gRHVfWZvbHYNOJc7CsjZ3JT2Fzk5mtWPLqByQsLKcgYhvyip4CTg=''
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___xCkBIU1Uc5wIcd5F7MwYByeDlWCwpuWDKz4O9E74Y2Et1xQteRKIfJMSyR3AWr3sE8a3l7Su8GZVGubG5vLXBbFQOqw3ZlrXzfr4Di96b8bwXyJoTXercCXiNY2dfFq=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___TxpiezAzwNxFeJMyqcliA2MVE8vk1DdNZE0n5xVAUzyvSKJn4t=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___LXNMZQ4739kVP1QixuLVXilUFTfrPx3IWDZaML='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'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___FLck9i8I5qEBCl2qlGCPRRrMI2hIjJf='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'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___WgyVVbGHQsgSTgtCQKJ3FUVFaQ3O5o3FB2xv='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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___IhVxiZ07Vz7fvp13RS3JhlJRk8='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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___0XPcEnCTNKPImrwLOiylJjYePRK1w=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___yB8gMc1U668d7GvwXIQXKn4DdJpVbQsH6PQ6Wjg8tcJPI4afQw057wOlzJ7jFHAQLwEY32RMg08KmMXwctbbYlYStfCaMI3W=''
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___1nWCTyfiIJQnUCsTWWBuHtW5KHk380CriOPOjv0rnf4sx6=''
########## CONFUSE ##########

disguiseModeMap={
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'英文字母顺序累加',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='' or not isDisguiseMode.isdigit():
			isDisguiseMode=False
		else:
			isDisguiseMode=int(isDisguiseMode)
		
		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
			projOutputDir=makeOutputDir(projOutputExe)
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
			projOutputDir=makeOutputDir(projOutputExe)
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
			projOutputDir=makeOutputDir(projOutputExe)
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
			projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		for fp in allFilesList:
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			totalFileSize+=fileSize
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		# random.shuffle(encryptConfig['fileList'])
		out.outlnC('[完成]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		# if isDisguiseMode==1 or isDisguiseMode==2 or isDisguiseMode==3:
		# 	# 随机英文单词、数字累加、字母累加
		# 	execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		# else:
		# 	# 随机大小写字母+数字
		# 	execFilePath=f'{projOutputDir}\\{genRandomFileName()}.exe'
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				# fw=open(fileName,'wb')
				# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
				# fw.close()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fakeName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outC('正在重命名文件……','cyan','black',1)
		renFileNameFailList=[]
		for fl in encryptConfig['fileList']:
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			if exist(fakeName):
				os.rename(fakeName,fileName)
			else:
				renFileNameFailList.append(fakeName)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		if len(renFileNameFailList)<=0:
			out.outlnC('[完成]','green','black',1)
		else:
			out.outlnC('[警告]','yellow','black',1)
			for f in renFileNameFailList:
				out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{firstFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___LS4fe5DvNN8bHX0aAsQSDbt3aD5bu94JY2D2z8yBz6FK1UJdXL5l820Z0YBq2xI='LS4fe5DvNN8bHX0aAsQSDbt3aD5bu94JY2D2z8yBz6FK1UJdXL5l820Z0YBq2xITNFYHqhCCg6vwOxlibeHhP8P68st5aBsaIOjL5LhXXGMf72tpV6lzt1GkdE3YfArNnqeLJE8784URHVjCynBjIPA3zZ2FNXtmtVhgm861gdKPOZURJoe2yGPUundVoqvgDuoYscMtT8Ws2SqUTq6Ma6Um1gkZSvpiRjFvvXQxJMJKSay0EQQB4jX2ZeDO1bIywLyrkPgmUAQK32qnV7SSDMMlfTLMUgdMBOJmjWcI6SVhQbLGdp3CdBtgcbC1W5zsS60hQjAK3d1vPdItSiIFCAigGvkYnoXKGi0uT7lkSMlvChNpLCD9JowcPctGCjisZhKgMuWtJD9GNeDmFCqyVU71xXjQSscCwXdqxN8BaE7d7xq0nlqvrN1WDxkE2RoRWVAOgWqU68nQnS8elxuztSe2yYcMipbVZwoYXuy4SDXeic9a4h48SLta3iCJDbuXrX9YLrhGqlFP889vA5duSC6WOKshVpBJQvoGoru7vd4OpoyVWCXHAlI5r6xQynCcB8XDwe3xcL0pID6LTkLhgJwIyW5Kylhqpqo0oqWnI7jzTWTY2oKdgzBMFckqH9hwScjXfrOIUYtoBZ5MmjvrK6ZfAYeyanIlP1JyX4xFem6VwNJB7QliDMeRcma21vc9VS1TKpBxUAYfkubOjGglIqAw2iJhC3Xq65X0sOev0MxbncfQVvYPPr7FU1w9VP2vun6unny4wTf0Ab5e7u7Z8niqqxJB7U7IO1TnzVCzpU6vKe6m7gXQClPqj1oAEMOWhaBDxQfBQH3xgQ7jc2yjuSoYghqn27RpwIFZclo0226wsKmfBepkyBC5mCn7jTW9yxQaKE75s4KOpCK9pP3SWXM8BM2I0keO5l8xSIo2LDcYaEow81ffIPvxF3Kf5d08FxwDLAoKlCzAewSIN32tjP9gTWMDywJ3AG2bpS2ZszY3C2RExYNibzMVLwvZnoEMD1x3ghVEEYyRObiOERipdNIrrNtHSqcagliSUmCwtxfq7TvSUhIdJQ7mEO8dcQGYg3O3lPWBDBHneEiO0qvyd7Tps098YIHx7iZ92F8lgEiyDHy2XmLSDUHc4DgOTV64E9IiFNn1y0gKUIuSy94n6dFwAPte2cO6dQroBU9EBX3jQQvIHMMIZh25uUCKgyc0V2lY7NIKucAsn4W7q8Pj3WJ8t3stt9l8ds876kKhVo9ocw7c4mfB69vJ400o7BP1wvbHeGcn5czUqt6sVbXZNzQLszj5gbhClY8fej00IKrepEoc3TtVjRfl052BomBxTf6iphf45eliAt9o7iUmNG3GsEa5Lg3u7eODegGjaExKVaZg9vsZ57vVBMPh0SAC0CNca7970rK78Phu9rl5V2Ip1Uu7ziKsnRKLCcakUPFL428Wcy8zljdIgQbgl7qEydoqXdEnvi7NSgo5IkTKRVNQvVvRZ4kM7D2vMfIa4vDtCx8VPH3KeDzHsgu78caiMEKk4jjwiMLjLed9EoqihoaAPihYEIssrR9mC4eddpYDwNbdqVyZzBfliVe3T6QSPEa6w59TTwo9Ol89fmdq9zkdzd0kf5VOqKL8iGh7maptgGsBzXDvoeTA6Np02BxiKezypMPHKtBM8codgGp8xsVfJNrisUvK96z8SfA5XpbcQv32frRNKHx02W1WelkJ3IouOBanQy8zXl1JGF8PRFyODPnJBQsWARoWrFtsVLbz0m0MW4FAaMlNPXXtwiNgwT46GdUOkxtR5Vmri1S8dZYZwNSv709GuZjc2DGqcaF7F4SKjiaIE2X3NCowHnjhfkWQwkVEIT0J880vy7pXVKMmoK0TCBk05bZKAEmX3eMNuq8TlK6P1M0Auw9MjLepjGSgXaAKwgamKER8HG1JHtlhG0uN45vIOsMWOXfxkqJSWzSMm4r6ifh71xmdSK6e8TdVJG1HHlm0cAzjbfEQLgWtWnZp9hKaskwsod65EQHuKFcAmHpKDM648HHEkekdTWnMGiZuPibjH2pO23sJioA0ST38N5wE9BYgxKFymxh44R2I0qVYiEmTPVIHCUc11knqhhQWOwNLvsItP3OQZQuVI5hJFTBJWP9wJq5JMPCy1wxidZOP8H0QkJIxFVK798lRUXzW6kpAsbyctlw6YaIZSn87QmnqSru4nVgW09yMQeKn44Phwg1zrUVvxGeMvK5dA06pTJ2J15n6McW2jnycXBrFWGBQNYUyzxlM8MAF6bMlBTcEjDtwgouP9nsyVaXGbAnxO010ntEzRE2bqFoaTUcsxNr2QHGUaBqpo0LKt18ScHN0usT6VIrhDfxubuuCjsxxxo3ga2u2G41rVVAFZC7s04zFmf5dCdBkesxwgxS9DQvH7mF1ANY7SRBSfG2pMgb0wYRBP3mtlZ5qgLOBu8CUtTPga6asmADTHYvwbhdhC7OWLwAXsZGrkphtsljLjsZNxYRLaRabRLOelWgcANBkwRunxqw6g6Hq9p5afwWbnnvbAhvSSsnXhQC2S6efP2wAaCrLvhEtsNaPyczdReTRj4oy9dMxWqiHaJvimPiluc6eeoazctV6nH289G2SsEvAod0uBDAsc8ij7tM1HZ3kQEijN1sM63lmn39R8HaevKydVta9neP80kEu2tybVLWzZUAosQMAYtVl7Ay1wJMu96lS72QIw3VkEcq9Ux4UMybtNXgozAJQe6l6ajwWwufyv6CCUxnBpRYw9v2RBIiSHtMfHVitY2YrDNYxKQxomwRX7tWZmc0XJBmVLW4KqAu9NTbXqkKg0w6FMCgXI2pbBssQI0b9KarJFI793frUSCA3RIPVjGlaZQDSS57ftgtlkaGDZFkW7X48tfLfQQpQnZJSvIz4wxGhFknZQWKzl1o44C63qilrHfgegW639YLogOH37AbXYLzd2f62Ke5blj0Or3I3t6loreP8H1NJSQkk9ub2DlKy7TzO1RCRafJ8dKwDAs8R2grrDEjOt7cCA2FBHECmVwJx5TuhfcmgZVVtoodER76hMU4cbPkxt4J2KuhrC6SaQ0qdzTwzMpPYIfNj9Pw8seLaoKh0mkGyJBIYQ0b2nEQLZ48GT35NDO7Eumuop49WtyevgC0InNdsKHtExVWZNdjV0B688vpdPSXEMQ0ukOZzwDbG2LiNXnHyi8M9knqvvZoW1idMCNp9gCu0jJCmpj3M44zXp7W2fyW3mgmhn42NaRtMhm8vqxa3K2xPJ7NAUszJhaK8LUOkgRiNtYUrXjbmdgQEiNWrukdRasPxqqjXpN6hH6D8FttedO1GOgHxgWOBYzzRYXElY12PqjsLGU4xsdEQ1SE8VBiRJfChPRKXBuDM5cpB2i4vTnWwogkivskzQMcQdy9Ktzw2dI86ucACdrNZmikjVtfnWN8xz5XcXKNQrxerkPpKCZFui4gOYbV2P80NcENYXhT92LyCMk6xO5fMdRXmHqH5ZZmOYwQQWEJf5GP8wF9eJAuTxGWc2cuNpKL4Fs1O8HlSpgwrcZi4aW092PLav0JYAduTZifxw231bhWMJIKunCxe31UkId6wXEm0dGnzvNEDV2ax495V3Ql4A8aRrdijdA4L0i2QXkVfxOpCK4m0ZpyvFNt93wOQdhEkymWY6s1vPrlVGUabM30uJBD2NlF5qjT9WAmkQ0nFJdnMS7q0ZmbWGWvzfKmhtOAMa9bGRKwZwL23ERHsAVUgQdcdimRj7hMrU7Pt3QodJteLAZwj9BpY3zdT4bmc8cMfknViw0mrPxo7ITKbIf7LZJyj7f8xCepqJZp8ZF4gj9DmYjhIJFnd3rWwFkZjCpf7msRFNYTlNYvGPz7u4NRluGWuvyTz5Zxx845N31goXPJ8QEYPeoVbCPiumO9ss2MjNRKaLQqJSCDDgU6BhYuJYGgh49Gu0opmkmnFcax0Z7pztg2Ry6I2Y71dTRC5Sr1jmpGTmRQaufgOcGP11FJfKJsAexgKY3PZjZ2Y9dEzUyGcA9Eq9tx0xJcOjWdV3HpFc9J5qv67chzGw0CbzfY6rLvX7jMKW9qjKjSxLFNrlHpyrd7OAno77asZNeVcxXmKNQQFXV6KfolaHQojhe1JFtALBidiOEyBhRlD8dm7vAqkmzQNzgpzX1lPvQFJzqvysjDodlwpBKKGtsU5VzJWsMEgdDMUczoAJofku2eivmnwHMTALjGFpOkqORFoDGjXqFWi6geqtB8cnLZOK0Qux92YaulyWtLDUD86HZCJUvEjpt2GXrnht9TsqLwJURWUb1k8q1ZXyIx2Z66N7txrX3PKJQ0C5DkdXjJA6D8yA0hTjfD8Q2RFnAVvNvFDtDtHjEHoHiczIjaZ0uo72OodHeBhAYegedUVnG134MQDYuztC5n8qjBe6QEun4HslwbzAeBjEORlVMDtbas4CQAvTMYLPm8FKgBmNfce7RtICIzxYJbfreO9ywE0fvyVoGiTMIbEa14NcKXA2CkqtnLPm08ZSS4ERFTdEF1qdkbh1McN6S5yi9Ud4cjTkk71dxS5HiCS1H6eSjSWNTItu5QjjNOdCTxGuQiI5rDHxuPQcaEMNAGkQWWsuRiPXGoIorWzTKpJdGKqxEQjuBCHTLCGM7qlOPJZwH1hmRpldSgpITMs2d0oddVdZJ9m643U6C5bMZ67LSmH7SZ5tcn1MznbWT8k0Yj5qlgnQovTnD0o0slUITCYBLSF8uxldaq6IUF9rZtFUZSTiaZf4fHkgz2Ei6OCNM6TH9ahckJZFdrYJUnAFmIOne6KIBpI2oyxzUqSx1gQLad6cgnt1k2q1cDw1yN31c7pkPBe85nxf2uSyDNWQYQRIENLxImPJt6aPIgD9q82ti3mChU4ztKzOppy24WalxXuVdQPedoG7tqKUl9fxSYSBHHncCUajiETHG0hLxguam4Rbt68jxHWuUQPuO65To88KqSFfYwDdoT9pwDwJh5ZFF2CLlrDObmCAmUPQtpRWzQACs0D1CQbHOcdkSWlAVPXAJP3tvkd0In0esGpG8CAn5iFSTZVWkhZ6WwB8c8nPky3DOHQJhcTgcQLPlIfrCZuHZCtyJ2ITth6PLR9Yx4YdsBaRjgN8yE4oOWcpzDp928vjSgFHGFiRD6LNOwmgK47Zdd4fVjNVAKJcnJVgevgHdSbFmZNbgpffDJaDI8NCIwEs41lsJcaMgtZ0I2mq7tizlF4U4TcyA3uoEVNAbasXh7yC5doIisb4aew6aap4T4ArYf1XkcTmH4yDm3oZ2tfzftzKYhkSUeIPvPizMWL3XSgZCMkbB84rn9TXZP7URMwP8sddz23Iy22h7XTaDHFW9nBNYScqG1HLCYUgRU3akfVbeotPvRJ0pyDkGXD7UNIPZXMknHIQgpcFTpfXfEDzoNCqCyhrlhIEpAh14FCtZigfzW0KiHaH9WX87MIUFRIkVKy8J0pP2k8SkXcWTjhScGnbeH5QsHNwVKxvvLiweYb0o33RmvYVRqIVO0tRuyldEKu7skMoOWFhmvP2lflFMbQLOK2R9cEX5JVCNSwwHcwbnZAGD1aIizySEhCc6D3lUKcrEhXX1Jf9m9zLYDZyWQ0lYvMREBFd3Dmz4in6UonsJYyWSRdcFwbOiZyn2jRxZffxuIQ8IYg1dvwuyxaFFg8EwkwzTSZNBit0KGcL7YTzpyX287UR9p891wjvJILnEjwUArx40SrOaUVXyd8VVe3Mf6xxAzUkr0WA5wCsZRnrBAro4JhTUL36yjnz3FGfrRkIqO0anAhKrc11dZKKn7TcX3ThQRq5HzwGpGsjjcSPz2DD3J5VzPXlRbaUlyvudcAuguWt5PPMM32ObJvMbfd4xqeypLZTTE1lCdtDBhIvE3iasFPLi0pzJHGXYWFUnmNwEVZWYzC22Od43uZ8uzDVn9kSGGrWJi9qu9A2MczWrOufWEzx0oD87GatLuEWNpD7gxgJruavrkRKG1ktlquxpQDHvMTr9eVduFOo88dOX2LI7h8lTKBVKmxjQLqpTKJb0NokC9dK9NzHiMXMvMzgYBQudN8JsHzhZBkHqsBCAP4BTi2NxkNjmynCNc4zBSvQx4q0F6GbcVWBet7EIazYhXgaSaaSdLeiZPKhGFxUAFVdGX2DoeEmZqKLInYR2KiTtUpp8tf3HlxCI0vrqZ13iie8Mk7BWn1i4qxq7WznDbpD4aKcCYnaAtlJwpsjgR2N3FkLgik7jHDbN9zejhFLeLbfDceAYNBNkqON3EItPYq6i73hjIqLpULqJCHDS5hye9QTKdKeQtXD9qHHkrqpWf6D2E2xsB4JpUVmykjyiOxVy4HTllsGODF07iGbEAFYiQmHro9fnf5U7u1gjFONBrbS9emDpXtRGj82mL1833O62IS8QhoeamqppIImlPtFrUUtJWXdEP1EuNDpOKPs5f2Nhu1EoMwxPRtEwb8pyF3a09WtOQOEQOvyl8Pej561x3Whe5JaO1Vz59BjRwCfA1amKH8fRpRVyI4gH8dnXuZAetuxOszXx9bbt8jBDibEj67fBSRbi5QIPjtn9VU8ST4wbgqg2Hyc3Yqxc3OaFVOwZzudInYoSfTqf1WknbQ3eZCcwnEDgnivCo6rIu2pUnosAXNU22fZPyKcHCEpC6HijF30B7damYhhzpoY8hRClkwSR71oajA8r4OdglqHPqldf0PAdsW8ye5vevnTGe197ewSutlGxNBOlrtPqGsmXls4VTjOKBjgFp71mTu7Cd0Pz1tIPEp42KfaUNxnGZX7WE0FiY2Mfhz1azWReBx4POdvXQAI9eQGgnnGIJhIb6YsB1BM9WeNpZd4vcQdTwJyO6r0nUg6UjJpfSpAF4oH784UdIs5Wd7hdRm8x8bllTzfOcj2ePnEmfo6KXvYqMZn8W2hilCB8JqMr95K2W27Y7Wp89wqJhWo7CaeTRMv37utvicx3dgXKTFAkvORumYPMUh8QjlsTRlDV89JbEbw9uJCXAtjG658l6oMCkiEpGd8s8xX5zoX2F1AG6S511gTlqKsczUifz2Ak5XkFGhuFpTDT4cd8O08GBBMdGEfTtaqwp9QK7PxAiW8tlJpqcMkQEay7uz8MotMl6EjETRVEZBuoYCE68Q1JJ1qz9f9lD9E7do5Ko4CrwjSHLooHOgxfcJgVxws04SPqUsjx8WI3KAvcbiNAIGNZBz37TPzARkseDxndmd2DUyDBuSsrMfNIlGJbf304Vg3YzKKbNuHUZdw70Gvp3B84U5apsOJND2cAvR8EOHpoEemLUlcmKbFlEFlJtvQtN3LaA4xHLbhBZobkJJiClDgm4y5EpgSQLO1qkyeNNrhwZVSSdqdQddGcJpXVuXFInLJBqzqlgeZUcnZZDTki1dE'
########## CONFUSE ##########

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system('cls')
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___I38LPY0LCMNuiLMUZRwbzJR89Lefv7ur9gpL3WXZqMgcTj4pfHF22Iou46d0Pid01yOUt0kJrd1aLTKMjzTqfA=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
