########## CONFUSE ##########
___IpWSm01lo4mGTQ5uYn='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'
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
from loguru import logger
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct
import subprocess

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.2.0",
	"dateVersion":"20231101",
	"versionDesc":[
		"优化代码结构，移除不必要的代码。",
		"修复在非标准路径下，解密失败的bug。",
	""]
},
{
	"mainVersion":"1.1.9",
	"dateVersion":"20231031",
	"versionDesc":[
		"将7Z执行方式更换为subprocess。",
		"优化报错信息便于定位问题。",
		"修复打包路径中含有空格时，会报错的bug。",
	""]
},
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___EwuL6okzC19kcPnYWNl8p8XWb1eke5MhVjYNb3PC2aEnCdyIaugMFA='EwuL6okzC19kcPnYWNl8p8XWb1eke5MhVjYNb3PC2aEnCdyIaugMFA5dw4tHAcQvDZMUJJZeUT1g5Kd1mJ3Yijb4cNw2H4ipw6VetFN0FT3RnRORFfOTfJC7yQXsQadL1hlsG0nSIWSrJesKpFbaie9AmLqunzurbkz8ynUNcdgfosC9LRpeVrJGc6euGq0GPz88PLPhogk4vWYsFMPa7Czry35QoEpjxPvHwKwvgnvzRGJPQvPbTkysjUZNZqT1BLMw1BecMwp3sT628gXTczqDJgqaCZHgtGbMHuueQkjFc3requkCa3No7xvgmJE78O8wUHjffnwG1m2GOqYwi7ZdpXarf2A78TkIM46vfhIlgdXY0XjLIBs9tAl2Lib4s1zuwdKS0jXP75Ct2RDBajwygNNf7beh1907Z1eE2myi8Zitf1zOHFwa6R9ohg7aiblyMYxlVwrTT67vNmtxnGEOhwfLDBKrzXaM9wCjLq90QQkPmDRTE3RQHAOaEPV0xjiCapn4lCWS6uWjsMBqIrdzSEzk4OkSTaYyj7uk9ILdjBYXf6vkB0GbifEn19OszybpCGHGuJTLcWtWmyDldy8uAyLHIR9siZeRrWxSpNfTBR9aHc8c8ARrCsujAW2uc6wq6Q3BIsTdCCyhK9JyiaFB2cuPkF8CnWHi09pQs3eSHkk7xohPFCNmHWZLWkT3js7ge31KCs6YeJYUIc4xzRhA2yFuOP5YLZLPfYRMWMgmYwKcGM0tL0CPvrnrCHhcji8rXaahK6VaiY1wYKr08lKF2i0LFKYXM77GLzpPi61oI7tiUu5AI2Ar30PocxcGPFU1IhU4hWJn19VHBEYN6tzjnUfl3pn3BKdf4wHaGjPeQ5cyCJVhk8QytqESIAGWeULXgos5tWN6cvRPrjrYSEITCKpCV45kqb6ZNTw4bZhQnreruwOyP1lHpVRR6NI2kgxOoIIla4jFws8HpYmGNbdqNUs6608QFUqxnxbIvhzwL1BEHRbT9kLQMD5q6yBrNaRnT4zxIwMPlYGy9I3bnCFUUuFnf5thqWF07B2lpAVXSGRJQ6CH2mRUhS93Pu6f17XCmMsAgqRXJHajDLoMOtTGm58tUFFuz3ssUO4ov19bIO910uugfaBizLLZHCTSRYLyHuMIMa6lHnMR8axdSg5VVqYQPbsguXsBXSfz8zNoIqREe1RPzbwKmSKOzoH1Z6XXxTKtTkG3I52DkfBH6o93UQhxaCO4Tffx2o6CFpEXJHYCpM9VetADxPzUFxGT1H3tzwCScArOvpmsjLHG1OYA5VUDfRMOtEDqdWDe4cf2bQcOgWlaufAfgXXocLU3Lo7SOUWiOBV8b0qLSvRMB3GOYBsFWxmIlVGSe3x8q2JDpw8WAvJD5TRJHDumrIe9j4mzacd1SNgIYTHxTe5lP5S5Nri6pF96FR50QCk3ihLtL'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___6ZRq3Ga6fdlLEoTif7Ejb41GR6ngwEA0pE59jfpkRqWmPRK3iHRn5UCGznm0oe5ps5hGtHcC9Fmsa5MFN=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	batFile=f'{output}temp.bat'
	writeFile(batFile,batStr)
	if not exist(batFile):
		logger.error(f'{batFile} not exist!')
		return
	os.system([rf'"{batFile}"'])
	os.remove(batFile)

def run(exe='', params=[]):
	exeList=[exe]+params
	return subprocess.call(exeList)

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___mUVcbsLwpFpdJ8Gv52D99ulBM4EPfiKKd5TasQRDiUei9ONZDgPOCQqiNjEulrFV8p1aANMOe7RJsi8vMb=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___L5n0P0lDVhyeo2g0i2d3OZKeEieQ47D30lrNK81LV3ssxABi2dGus5ifVhHgCR8ZKg60i5OFecQ2KcCoUWQE2lLktLBPEBn2seFPStYM3Ah6XSMA5xlX=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

def getCWDPath():
	argv=sys.argv
	cwd=os.getcwd()
	executable=sys.executable
	return {
		'execFileName':argv[0].split('\\')[-1],
		'executable':executable,
		'argv0':argv[0],
		'argv':argv,
		'cwd':cwd,
		'realPath':os.path.realpath(sys.executable),
		'dirname':os.path.dirname(os.path.realpath(argv[0])),
		'realDirname':os.path.dirname(os.path.realpath(sys.executable)),
	}

########## CONFUSE ##########
___9AGzGM2MsFR8K0fFa1FYZiFPOEcZfuT01Yy22KFqIkcfxlblrFEGcSGoky2RwgVpOC8OxY03LcKhltmmoo7TEUuc4cNvEU0ELOl40IRqOGtLjZQ5W=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___UqkMYH50jKdgoWlqkdZa2Kmvi1ltOb4lT3Jq5SykMylKblVB4EIgXMdc227uO0pksj4b9nq9K8f6o1SmW3YkF8pEs8q6WJXByHsSCte=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___VpGysInbMyNxXJDNBNn2G16cr837FnZayRCn5ayzCoq461tW860eOx9COpVjo6IdwgMtMWXYiPsylvdtgg5c=''
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___FxT71s40BMUcnzxvEg3cKfqG8YlNzw7kvPE7QkFY2GvAeW3EZpMi5bomd6=''
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___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'
########## CONFUSE ##########

disguiseModeMap={
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='' or not isDisguiseMode.isdigit():
			isDisguiseMode=False
		else:
			isDisguiseMode=int(isDisguiseMode)
		
		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		fileName=targetFileData['name']
		filePath=targetFileData['path']
		zexeFile=f'{projOutputDir}\\7z.exe'
		zexeParams=[
			'a', '-mhe=on',
			f'-p{encryptKey}', f'-v{volumeSize}b',
			f'{projOutputDir}\\{fileName}.7z', f'{filePath}'
		]
		run(zexeFile,zexeParams)
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile # 此处的EXE使用绝对路径（参数0提供的路径），避免因为工作路径不同导致的无法读取问题
		# execFileName=execFile.split('\\')[-1]
	if not exist(execFileName):
		cp=getCWDPath()
		logger.error(f'{cp["execFileName"]} file not found!')
		logger.error(f'Sys.argv: {cp["argv"]}')
		logger.error(f'CurWorkDir: {cp["cwd"]}')
		logger.error(f'Executable: {cp["realPath"]}')
		logger.error(f'Sys.argv0 Dirname: {cp["dirname"]}')
		logger.error(f'Executable Dirname: {cp["realDirname"]}')
		return
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			logger.exception('Exception')
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	zexeFile=f'7z.exe'
	zexeParams=['x', f'-p{encryptKey}', f'{firstFileName}']
	run(zexeFile,zexeParams)
	
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___cnTKSEfh9iugWB8lNSaZWLjyUErkQa3XFV7L='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'
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具开源免费，禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		elif sys.argv[1]=='-c' or sys.argv[1]=='--cwd':
			out.outlnC('Get CWD path','yellow','black',1)
			cp=getCWDPath()
			for key in cp:
				out.outlnC(f'  - {key}: {cp[key]}','white','black',1)
			return

		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___5Ht7dodjCBs31ICRsAdjSog1iSvPTKEnYFpCINTzD3J4wpCVd2=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___gT8xph3FqLBy6qKCK4ZFEMH9WFmsElnZ65YRYoKpiAUVpyG26mMfN6mCY0UChaODISYllSfGGOf=''
########## CONFUSE ##########
