########## CONFUSE ##########
___wXMi6lnWqEQkeLUvuolokdmzP6vMeZy7yC5mj5vdFsZo9BbOPZ0H5y5kq3ppze8IWkJKuFntVa0b40PIC9VG9ThHvTE0F90iauNWD7RnxegSXfgs2DGZ15RMx6E=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import _7zexe as _7z
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___Zn7QOvKHPGD2eafkExS3RRPpTdxi1TKT2nAOtLdTAUXyFnzpGT8EPver4GrIGfgKUHRnTeWHanKFoC6WhEBYAUh=''
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___VXRZP9WvglBjFInyMaT7w=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___Wzd9HPmni29nyFP7KErezCk04J5sR960qh0nGOzUurDjn8bgNXYXamkVDxuP8y92JRUUZTME5ajYY3x7OcUpTukFfoOKRQsriVifNyugcw='Wzd9HPmni29nyFP7KErezCk04J5sR960qh0nGOzUurDjn8bgNXYXamkVDxuP8y92JRUUZTME5ajYY3x7OcUpTukFfoOKRQsriVifNyugcwd9qjNdbS2x3HvpmzGZTguhtYe26CiXk4w2l4dTWPym0jA4aUAsdA9od0gIGFydCuDEadA4CUKsnWXwjGZqMk9OhUQ2UgSakPFPGhMM9DbV4Q8Lz2LXAVQS43ZkkNvqjBIULJbDc9oGIiuIucPrLP5xlydcAOXJTh9m3DEBfPYXNsIrr9UiyS8UuU5DDcISDXPfLwuIfIRDWCvox7YxBVm1yJ2rVPmFHFjZqEOPbct856arqHvGuksFZFOE69Xsmvc45ZgBCYJ1GyEzQePCykL7DMeTYL49j45awWCGqCUsdWzA1EZnkg1JQ869KemXmPh2vFlQ5pkJ8hHWOvIS4pAO7l0WJM6H2I6PWl3bu1aUFJhDTULiC0R1DOZGY4iJGwajqhPEBX6QkwW660CtsEeoDrxBCxIogj3rRT3MhduRwRiew57TL6BpKDbIeJu3buRKWLuPd62EZQRzD9hDDoSFbPadIWDlnUTvMzbIye3UE5BKYUjTxvQpVJUaukUrzmXau6HE9wAtel6K30oSvNRkshseqfMKpPJRk51mJKIcC1UOuepfIFXrBTVwOIqZwO8pEyFq1SCNDwy3KhJpkvfM1xgktru1xQcmpbDWjHpagqPTv9vAmmDbhy5D4zCDZ2xCWNjzCJXj4nQj5ccAJDmpDNs8E60SujGdPk5F1peCiHyiSZcHS1W1RT5dMUl0IEHK8FXTyKU7CD9q6Yh0fBilK9EFnsDMgechd8Q8S7zfJvHI2omUY9W8oErDwBMRPW0QK4KdT57SsAHwqpI4GitkGEEYfZsJqWgw5mPI3Qh4zCSPojb4LpnXqzYzmJZmaxSFJUPwOozUdxnwJKF0xaH3GTomKsj9wLgKrsMyoH90XgZCfwtIOsEisIH5mUjLW0jyDbfnqUtiMB3a2OcLxCZrOByG2qKRilnoaeQa2NQKMxrdqS4LWdrdKpGlPflMPYvHf6F0CGFo0AHyLmyQxiL0up1lxSEiu7ZltRxnvVFXhmbRvTEtPj5FZp1vKUhN3Gsw7J277RVbuHUuNcaS0ZfhJ3MQC8jeQ4hoyBClLBPbkMN07xEh8t0rGgCKHAkXZ1uOfXy3L5UpHAbNMsulNgscAM3w2z9RgaMPLCu3HHxcnk9VPHEMtRsH0SsA1L7vcZIrbjEjT1N1N8SKTlklmqaVwWc7m8RI4KulqmS03Dm8jy9XkRo27CzdOI3pewXO5P3m015aFW44XqqTYh6uFq7rnJkToXLA7IKeNZeDiPrfQCCL30ZmrZKlaDAvvUjg14WI2jHFlEf2cfm9qYmtw5vEZf8PONNxw0KTYSurNIMeWaSBGe39v47eW8ySjXIs2jQDzjSviN6334DclI74J41VlyrU8CgcOwxJR5YFvb0NfHFtS7mBkjRtNG7807bV19mvSUv5nt3g8BK3xIzemwd5wHLrxt7ZVYFu249OEzQ1PRIFkGmUKyZjamXZRe1hRTMGDqbdpzYDSubCnmtxuU9FFyXi8sMmhJNlQLAu5leCtlaUfrsbC6HfdA6IfM3Q0YXrCmcifsGk10p21JwuIjlXlB7WDAuErIxbgbiXcJUVHT8HnbRzQkQccy7FNTg7qlB2D3wOBZCrn4iyPljSS5zxCEetgH5wWZHVuvkONLbfbZkyyH76pKiogcRNRi67eQ9Uhoxa3vKEamz9La9k6BuyYLJuYpPS82kA4mBWEhGWAqHS3CFMzG2YmcJgYLyhMDK6axyPCA2WxyEuO4zhvO6OHtwU3MPXrVa53RsOuajwFCWeyeW5yWyKbhbBi1Lqi5OBWAm80m3kLrkdWmMX2ZSkAl3aznb1pwpjwmwafqm3g9JfJumzsPClVUdCxbN9mFs8k0ohJ7HtaIMAFx7172FdOmRt10m8HmnnwUgvD43Ho3PzPHk66YmaJ8vivtAg2HDpkewEort7ebmQfFy738cDASMlxyhJOeh4H8hROaaHtYbul2mgOcClqVwhQAqCnUBc0sCfukvMgsytDdTUnbehxjotrIInoIrGYZLFbFCZ1WLavwpv8DdMTlnrOjt0htLQXxlBwMouji63Rm2MixsZdRbWlqh1Y01e4IL6gwcbtFk3Cd9cAaYqWkjl69Mvmr4gLKLx91x3RvVnlc9tLhBf7B2G1geqkJjPMMn7z6oHOfSXv7EtylHmZqiQ2QIZgGUZijwt2NPojnP7cC4zLFnwIFDVxgJawoMQlCHvh0VAC4JaQqjtYl2MQMxoo75C1MrxH10QloVpSXCjLuvKfGxbCepGaETwTNpexDn3reLURVsiouHRTK8Geh6WtyBir6fqUrsDL9l2ia2GKvhlQBNPkKT0rQkV7jC6VZjuxhsB443FWCgvlocT7H8wAFa47zydc4pRVDPbe3zCo4worQYCsAmYuUzTmKl4ISUHLYbRSCBxiQ8WJM0B8jZFqmykNPUivAhI8rB9cYxzFEq2J0kqOb2f0OHm2vnss3fPr946DHSrZ8CRJZLgqqiaWaSOUABtwNLgdJFtQrlCzwuZQAg9BQAdlaDRfW8mKDZfQB8D3zS50mcIpK6lXsJr9Uva6quL44K2sLSd4xHST3XZPM3nCiyHrdo0F2qTsYZugizRSccN61wn6b6wmYfKSm1v1UtZvkzDO6Z2Ph7OYOu2h4UYFrx1Dz251iraVJMUBNL09GecQpT3x1f8x7ntp05pywxWt1Jst1loSBuceK2bhXHp1wQm02Gerh71XJuc1JjHpZ7l6luHa0EMMvu09bE7pM3YTIgfSy7jZ47wzRf886txuStSWHW0rdKmGlEA8VQe0D3urmEeSkBumJwGEQFgUMLX3ciK7U0w0R7LPOoccyps3Pv5Jqx6g0CjVcQzFOK4bDBjY9wBofLdjJBgEeoy12oyaPqNsTv9lpKhx15DPzwIlYHOxCQqrVrTh0emTUlydaee4HN5I3hWJnNUOCWCqMwuBQxlBlgbDYtsXUsDuvhbaiEAYKdWkoorNGSP5Bjvpk6jCZVXeDMYZ0QnsgDisrMKapbIomnNeKDZ9LEbV3dNAW8rGjeL77togMMp6I6lIvGEBMiIwRetFFMIZQar0073PmX9yOYfDubctSDfxN6uDcJ22tHv7PiyIBJdk9lSVsz6juwZRdlUS2M0CZocRzZviu5nS8KPyvIPqQjBIAEX7jAhZDRoTMKiiBiylO6zI4FMKqpRLjrunC0s4tURZVSVGY9XRZ1SeMoN9MDhCLpgwnpqdBt8AcPgWr46QVF1BrVdFtKAUL2FT4acqp0l7Djh9EUL3fbcBikR9zXMdJbmLCD357fBYtnawzBn5cBGotbJgJBRiMOIr29h6svXsSK139UNa1TFiXJd7JWXLcP68vWcbueTuknJW7PRs3VrwAj0vkRJS5gXGA3jgyDGboBdgx07gLW3fzocgnah2Sfe5wO26x781WxPanleEyBNsSF2aHAFJSQ10abcmlxOkrocpJUG0GigXMsR38OkXAVDExdnBdyJDJGzNzBg2lxWyW6yM67enNbsAqKYoMAaQp6vSpUva1fZZ4qaMq4IQRSvJ17cnGJVosR9amAFK1lZXukezjDSAZDI5IGz0jOrQTsvjd3AAFnUQ0rnluLryOnhq3fjTtQvyGKSpaxUo2GSct5ZQryLRnihSejlEk8fPjzVSnO26qy7QxV0UmXhBomzLRGl7sqiGYId5Xkszdae6AsiuZcEhfdUpmcgOzoZiy0fAJAuCr50sKUl138kimkurHKMNhe4333kAq2svvl4QxMSSMVBmvqn64w2Nh4xUrB7pQMAHsptbsITpu7QOupYNqHKEixIXpzjPELsWV18mxd8uTXx6d4MhIam7jcKpBTreEK0mW9be3cbyAuUvjI4X9YVVzRocXYPZq9pXRKenZKDcnvYQEFVKHUIs5gOCc25azT4IrnvDacNQFYxGXjmPofiUgu2QheNIrxZhNznMsYG3jeTCoXggK88e4xIDaaHCarNAfL9foZl2EaoznNLLy4ZnQYICWM85BXffJvbt1vkOThPF9Cv7kO6BO5UCCNk1F2E0vvdSjbM4md7PGkbFI9ugr0fGnUIXppLLO2pTBehK6y80bnBhoqldx9K8ynlPSfsKsUJXdzioqXe2mybizkbUuFARsndVJUu5N7Jc50zrfNpXjlrMztiQw5Hq1VyjdV6jRr3H6r711x9RjJmSHymPoGxzZMOZfH2FQ5o9ZOn3T7GU1unAwJc2rAMRci8rNX7qNx64J8kZZTRPKAIVJwRK9DLjDo1t0tskuKySPtXtC5fPNTh01fqM8jBV5dfG6yeQO8RpPVXHpCfn3tbHJ7FSW08iTBbb7pKIHAcBkLj1ufNjjwPfKnLgOC8ga8CyTG3K9ovWJ11vOvFWlzgbBXAlhFAus40zh55MWvVu9fHH7f5frqZqeOYcbEevEIkYAMzf8VkcPKU5XJHo1nphanDXJk9iD3Tpvr2FabKGDlS7HtxiuiYKjXEt09O8G6mi1OrpSlBe4BEdARUnVLTtiMFW7rOTmY8fYUDBSxFI09t31IbhtZRr6xrX7lPEEE4sUWtbMogWYZq9tNnZHIjxHZb35XvdRvYUZawm7J1RPWef13PZ9Oyvb3zAcP6xI03RKWbRTkifONFcotiBzfvHQtsFVk5s7Nr9V0euqCrhml3ol4zDI1a8bxxA2lGMupTmLaraxybpKgeuArTBKQnQYX5YCeR18vujvrC4b44yk24FSzKyfh0uPlrh1kUDkEmjBroLqPAkh5csDJYXUWkUL7265mIFgM1vltiefcqKLneJhLsHy3YuoPz600RjAE5C6H6WgNlTa2WTpjlSiUkgG6w61GsVtuJOa1KaJbHXwylxyWM4M0TpolQsc6rWhO4sIQUXGXS6r9M99weB6BQfqEYZIrgCGNspt9sFRYxzSbHYBt3om5VmHXpxw7JaoTJTEF8FrLOE7sItQqkZSJ79B71vfl8tcS6oGuxk7IyDtPcEy9nK9asffBPF4NNFYPgbIhVwMe2Bv1mFDGlPa3Nik8cgHUwSQbvi2WyHnk2SInLwBw2PfDqF09fiq5QMIsxgFn5DlSkmXDff6uCfadztYMUiDGyVKCgZZ1cZkE2hsVEKpSRNUST0qnVrF0XkR2diFkUwOxqakBDiHO3FDrPzvrEXoUGOFkNxCO0lqB3IOKuUpmkg20KQXpgBQpuVQln6QQ7uyg6y9WbaETMPM7n9XJOyhpxdfnd45G5YmQDxDiiizzi6VFYZPwxyDB1qATbjlASRVTy0g9n3L0N9AP5SAuH8tKQFGHXMojbn3jm9dMhHEhpVzRDWHT0TZMZbSPhCBgQzNr2Rlksh6lw7i3BehKzUWDxkH1EfXOX5vlmwpSNjI2ey4Rf7aFXImClcxZCAHY3eGKxgWXmeg8trf2jluizSdPkmzn9jVtXtxbvxIVOSj2l93fRLOJQCLJKjQSnyXZXTGuVOqTszyhAAJQiheX8ZqoiW35PMGiM3lzqUMztlaltVlVML03Eo2huDNg7jJo0JzadwYmNkzdOecq7Q70hphB8AsE6PPGYEkuu7B46du4pmls9IAEW3A3HEBww5ThllVqGNJg94UyuyLTmd2L8V0gk9XNwG7XXTYunAzIEDYX0yGHqFnQVpwFK1B18JASMs3BnxAZbSbwtBUZlzUgxX9Mc9pd7Ux5cyUyzxYZ67tdM5qogMBk5fPAAJTfJ7yeDamOQMGDgEiqnUZ6aITiYs6ABaeTK4s92PeUgJfugtOaXGYmw1pMPkuq8pTgRCkJhiWyRMFj5hCF948gfmcOzLtOYbbWio7BUTEin1K9JSlIonwt0cKZhwLwHX0EcUPFzt7Vr4beKoesfHpMVw7bCbLbk0RrZ4Y9jtp5h6b34D5VPQlfE3Zyrd1ds9lpD0x2HBYCQoxZpYyYizjLq5iSFmQV3IO7GK34dd7BS8WVziYb9fo64cRUGtpkZD0mwjKxJho9QQiu547BhTJEXJcNUsSW2O1JUtckG2tWa4QsNSvy0kqhmVBln7lYOSkqwPEH9vrHFf9RGLW49XlDhrof5vtOCF1DN6LcyYMo1YMaWQMUGUKhvdRATTNYuh6gFccY9giAZTZKqZ5PWRpr3eDxVwb40NVK5b4xA2BRlbnlNlJ3d44G3ocLC1SFNwsOHgjy0pTrWlnrWpuyUKXP9K5lnT8kxp90fCBzSpQHgXmiSN9v4BXoWeyFgiejl1bXwvMqeZFW0hkr65K0van8XBnB2J3Xa7mOgVZfxLEehPQUmD2sNRRQEqS6yy0eH4uedkgDoDOAOY2e8DxYaLOxjZyDvqbAbmXEhftDSZrGiTNTVSpyNZbdYLKDu3CR02EkrHca0emTspQYDjv28oGhQQAf8OHYccM7vKvJY91tlfI0baphyeA7ZCjjF6Z0zXwWU1mtNgy7kvIokeyk9gf8Tvxjkm38dp0614hLHGqKGffPqeiZx7NDRJAuBPfDJ17ox6Qlu4AE8kTMipMwbprI6O9h6d9wmjJwdlFubURiNpsrxA84aOP2i8e5eSTRLhGnCOlwPRWlL4cwtl1IYsemJXYywoWNHfblOqav6cg7u0IdDBQygRESVvcsckhtoprg6IH9xdCwUqF4R89bLOtOYv93mVU4uaF7EOBZz0TPMw5dTYNoQJ5vo7GunjEAo4dFe0CewRozbl43WKBGpEXvcTJGUCs4622hEzAmqZgwpT5OnimNCFiOlsKwiO4q1qFCzjwdHCPSpUbt7jOTdMZeUjcFCwj3syXFkvX51DFGLgqSG21BczuhtPPaSHzq01L8gVq554gcSL3tUitNjYPuvgJRuE8tAvDknb3mp9j7u16pNmzLnysYoqT03fd5urj6ENaqJUALkJjzdFgE9pO62Y9coAh2puv9ZDME3t59mQkaPf2IPcgAjinyPYjzG8dr3rxJHiA0emOLOe2029kSM2a5e9cmUX2ZWltqpypKV1rFQ7qU52nZgB00VJ8ZKZVycnpckj8j8oBW4g3NVP52Csv70y2PgTLIJqXjdHmcvD4lN63yVPBRllj6q3uXMpjXm1tCXAyKP3rIUTyrxT5mbdXhBNoNpLMW0XVHfJfBk4gb4NW5'
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___Jm4YIKNhhTNnvKGkSQ2hhwA7Glm6nv3vvTkKLUXcQdtEtM0vvqww3xTSpVmr49MVx7OQHr7zkxfXc2gYeqBzaKYBw6OI2F=''
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___aKBeag5x8RlV3aqLMmKPnYaAUV5G7hvULD6Ts4Iqc702GS3OYxdTrkof0Y6YwV=''
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___sVdcznQ1ZeguEjzhKNg3olGPNk7mh6ItubSg2evknXN3ST8='sVdcznQ1ZeguEjzhKNg3olGPNk7mh6ItubSg2evknXN3ST8yvebGniG8DHPkS1ZpsfIWsJkijUz8MMFDZM1k15FIOLKpd6vargKOPqat6j2SMtrbsnrWGXigan5gwCa3qyB8AfwVlS77WmbKh4ggKm1HfcC9ggD858IyUgWMxO6kpqx8ZgmNLBhzuOdLxZL1BmGzza249KMoz8ftLGC0pbKp2hrnTbhLt3vTDwn9nrMYHkH36QeeZ6mOUSEfhZNVEvfGOtMI5AtfvxqwIXAtyUGK1BBMMJmXJnL893rnr0ilSeOItJuF2V5wd1LXX5qJNwv6W7rD0zj46DWi7ViadfYTNEDsxgsgYlWwWbPu65rDaKgbbA31TKzbDIDgEziy0QWiuyZ49FnDW5Zeb53OhV5IELPds4iDgalexfKZeZ4H5UrjpcztjjIVVb9OyunkUZNHH4x3AXm3ym8kVoqfugsn4tn7ruriD3R32NU62LnevGrNQXlPAwIIzR6Uv0NucBk6xSygyaTZlb9hnLKvKL9oKdO4LsFwQCIqN9N3SCYG1f1B2oWpydZDXSRUuMzuBZGCEz3ecaBXCcE1vJdRrJCe8jmFl8xBQ566ICcEWEDrTJ1VotX3PMOwyyB473oHyFLSUOStPwimoxMSF7Q4sc7KWG7X2Wb07QVuDxitZrre8DwZnCiuFtWNGnorLYUTGPc7HjinfUEkOSzMWCO5IQRyjsEjtkOtTFYwioZHmJEuNIUMPaKiVNZkP3a06NcER3KPzpzBvmvFjk8tyjSB5FYiQswwF9uZidutxMa8BnV9OP9R0sZ8iBeVY3pjHiIlrWD1ASgRySGcB3t6F0mkmzus9nL2n1w549MKfBeWwCVOJflObzmiGYnW6jjIKhxTtfRbae9ZQ1cteQjtgQ2D31NbSdn8SDiauBDaW2TJQCcx3VuZ00f8BaLFx2Z5HQczuEBNiphHEWMjltutP2BoHZjGCHjJ0DfAvgrF6whpFHcsb3j5ikQQ12jvJcLsXWEIbOMU4k1ZE5F5lLVN99ILTgNdEskX8HYEIAwWFyWPA0tvOaUlvnm7o57L5LXt12NupCMI9zcmOCy8BybFy0fqKpQM63NJWUQaf4c5I1nuuVSIs0fTFpBrVuebos1nTYQOzvHTpMeoX5S0rwIxQaVBsNGK6yoyYCRB7Y0aUblbmDfPKwBfYHikIdBnOl8lebmYooSogGUdvMmYOz2ZaRtFWlGD211f4eliRklFu0LEflwQG5GAToMXXVUhvm4gv8NWVqby4UhJLSGGRPKcfuV6vPd2Khhe6KAD07a6bt9W1s2zBvlG1gLcEISBKLB'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

def genRandomFileName():
	return randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))

########## CONFUSE ##########
___4KO7L3p69X38fupiCBHBZQSCgOrJWShkdtFUZ4gRxHUVIyAP=''
########## CONFUSE ##########

def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		
		if targetFileData['fileSize']<=21474836480: #如果文件大小超过20GB，则单文件模式会有性能问题，因此禁止。
			isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		else:
			isSingleFile=''
		if isSingleFile!='':
			isSingleFile=True
		else:
			isSingleFile=False

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		encryptConfig['isSingleFile']=isSingleFile
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=makeOutputDir(genRandomFileName())
		projCfgname='cfname'
		projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		os.remove(f'{projOutputDir}\\7z.exe')
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=genRandomFileName()
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':os.path.getsize(f'{projOutputDir}\\{fileName}'),
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		random.shuffle(encryptConfig['fileList'])
		out.outlnC('[完成]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+'merge'
		copyfile(execFile, execTargetFile)

		if isSingleFile==True:
			out.outlnC('正在整合文件……','cyan','black',1)
			# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
			lastFileSize=os.path.getsize(sys.argv[0])
			for i,fp in enumerate(encryptConfig['fileList']):
				fileName=fp['fileName']
				fakeName=fp['fakeName']
				out.outC(f'正在整合文件{i+1}【{fileName}】……','cyan','black',1)
				encryptConfig['fileList'][i]['fileOffset']=lastFileSize
				with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{execTargetFile}','ab') as targetFile:
					targetFile.write(originFile.read())
					targetFile.flush()
				lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
				os.remove(f'{projOutputDir}\\{fakeName}')
				out.outlnC('[完成]','green','black',1)


		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		# writeFile(f'{projOutputDir}\\{configName}',encryptConfigString,'wb')
		# # writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgnameOrigin}',configName,'w') # 原始配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		# writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 异或后的配置文件名，用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		# originFile=sys.argv[0]
		# originFileName=originFile.split('\\')[-1]

		# targetFile=projOutputDir+'\\'+originFileName
		# copyfile(originFile, targetFile)

		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		os.rename(f'{execTargetFile}',f'{projOutputDir}\\{genRandomFileName()}.exe')

		# # 混淆exe并重命名
		# cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
		# if encryptConfig['isSingleFile']==True:
		# 	# exe文件结构：原始exe|合并后数据|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{singleFileMerge}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# else:
		# 	# exe文件结构：原始exe|原始配置文件名|加密后配置数据|异或后配置文件名|异或KEY ↓此处的configName等均为输出的文件名，copy /b即将这些文件全部合并到一个文件中
		# 	cpyStr+=f'copy /b {originFileName}+{projCfgnameOrigin}+{configName}+{projCfgname} {genRandomFileName()}.exe>nul\n'
		# cpyStr+=f'del {projCfgname}>nul\n'
		# cpyStr+=f'del {projCfgnameOrigin}>nul\n'
		# cpyStr+=f'del {configName}>nul\n'
		# cpyStr+=f'del {originFileName}>nul\n'
		# cpyStr+=f'del {singleFileMerge}>nul\n'
		# runBat(cpyStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___VqXJF550Uoe9Lfvh9wEyoSoIeqmEcHqo7FiOaGuHC5Ic4y2JUQA8wfaOA4KGMoP6j66OV3vflMMvK=''
########## CONFUSE ##########

def beginDecryptFiles():
	execFile=sys.argv[0]
	execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(-5242880,2)
		fileData=f.read()
		f.close()
	# f=open(execFileName,'rb')
	# fileData=f.read()
	# f.close()
	# configName=fileData[-32:].decode('utf-8')
	# configName=xorDecConfigName(fileData[-33:])

	# 按照范围遍历来确定配置文件名
	configName=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			break
		elif len(fileDataSplit)>1:
			configFromSelf=fileDataSplit[1][0:-(i+1)]
		elif len(fileDataSplit)==0:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False
	while True:
		password=''
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		out.outC('正在解密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC('[解密失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC('[解密错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)
	
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==True:
		out.outlnC('正在分离文件……','cyan','black',1)
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			if fileName.split('.')[-1]=='001':
				zFileName=fileName
			out.outC(f'正在分离文件{i+1}【{fileName}】……','cyan','black',1)
			with open(execFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
				originFile.seek(fileOffset)
				targetFile.write(originFile.read(fileSize))
				targetFile.flush()
			# fw=open(fileName,'wb')
			# fw.write(fileData.split(fakeName.encode())[1][0:fileSize])
			# fw.close()
			out.outlnC('[完成]','green','black',1)

	else:
		out.outC('正在重命名文件……','cyan','black',1)
		zFileName=''
		renFileNameFailList=[]
		for fl in encryptConfig['fileList']:
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			if fileName.split('.')[-1]=='001':
				zFileName=fileName
			if exist(fakeName):
				os.rename(fakeName,fileName)
			else:
				renFileNameFailList.append(fakeName)
		# renStr='@echo off\n'
		# for fl in encryptConfig['fileList']:
		# 	fileName=fl['fileName']
		# 	fakeName=fl['fakeName']
		# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
		# 	if fileName.split('.')[-1]=='001':
		# 		zFileName=fileName
		# runBat(renStr)
		if len(renFileNameFailList)<=0:
			out.outlnC('[完成]','green','black',1)
		else:
			out.outlnC('[警告]','yellow','black',1)
			for f in renFileNameFailList:
				out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(-len(originTail),2)
		originFile.write(originTail)
		originFile.flush()
	os.remove(lastFileName)
	os.rename(f'{lastFileNameTmp}',lastFileName)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=zFileName
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{zFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___9xHdJ8wsTXOqIkZH58SufQ='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'
########## CONFUSE ##########

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system('cls')
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system('cls')
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
