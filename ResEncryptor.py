########## CONFUSE ##########
___eXQKvkbsFz3LOrD2y26p831ZaTaJ0OiJuy3h6kubLyBUQ1IkpAxZEnDb4xt1zLaQdEzYZJ8nQkAaZGqkBBp1W3PmlTIb9co8iRnW=''
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
import _7zexe as _7z
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct

########## CONFUSE ##########
___358iAwQzbtegB8UItrkl8wVpTsCPAFdN7P8uvx='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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,1024]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[1024,4096]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[10000,10000]
# 混淆数据长度范围
confuseLength=[1024,16384]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt

########## CONFUSE ##########
___brpVjGQFTuM1Ql5FDKUtvN8pHdAPS=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	writeFile(f'{output}temp.bat',batStr)
	os.system(f'{output}temp.bat')
	os.remove(f'{output}temp.bat')

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___0GDM9eE04ZuPKPahHzqfIkTWMV52OSZpGZFFBSHnJZtZ9lQgS06RSLKCCfU4RX=''
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___mNtlnYSe8kumXHFsTQ1zNFryrxDt348TK12bcTFJbi2g1MzAjNtG00iQPwlYdGWIpc=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, data):
	key=hashlib.md5((f'{password}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName):
	configNameXorNum=random.randint(8,255)
	# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
	return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll):
	configNameXorStr=configNameXorAll[0:-1]
	configNameXorNum=configNameXorAll[-1]
	return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___IROL80Wuc4jDacqHzHu69ir='IROL80Wuc4jDacqHzHu69irkx3UjXuW3rnxeMya0Jwg0mw8UXGcsRjLUjL6HqQvPs4Z6NamcY9WfZLQi59KfLcy9ucc7aeR1laxoLC1GEGBYlbsExTxDIQEp5UsmM9NtGlahgp8zA51GZhXUCt7jvRnf9xvHppv048qKjMLxaQlhM7e2tbe7vYsThwY2h0HpHVNgCWn3iDNmXtlGJj7VFbwprbfydgASugROwQp04leQle9d6BugKP0N930o2KDxzNi9VZXDhm7yp2baXRgFEME7TNO4EK6RBBoGsKvqLe6afoC2DnantxK32AropOEfPKVaBiRwKLO6mJEG4zurVzljDONMh9ZyCao6W8HUYGN4BEOOULE008sRFBYhaQTnkcpuldOiDiwkd3Cj5o1TDpv3pUsUjDBDnJU1h1gigtg4EXUaFVi1qWGDVxz1PnxTznlTcSahGTicXun0xuarRT4VyOhawvhoaEotV2mMxRttXbcXriLNQ6vTFp6nCJojmNGuPFSEWLwU9pQLXWyTGFy6AHEko6Cst2kgI2Ci5jOMHFt4PmzRKaLmLtbNznfi7I01ZvWrZNf3XgRpfZroI9eXV98rvJw0EsBb7nn64i0FGax6pK8KWMDXUG7Fj44pRG24sk4JHMGltUPS5kmcHRGzQxCB9g1S4bPTdcSLQNQZOtJNTbJZQRQnkwtZjdaL3osg7AnMu0TuECmor5uH8h5Y5zahbUYauqrTkoT8i0ktiombCYESAAemL8jFhjnPtjbu3WSxZOAmbSPRBJHeC6OpfBAOzPnbsyUrBWyyN0zB8sgWRGCYBfZUYHNhoYcJL8YQeqyKFil30ddT3KdKvg8rxgQaQwfDNpOzntg8NfoUBR4Bt0AFOpxQ93uELku7JpoVtFnbQiRiN5zXE268IXtloFz7FxdpVMaqMJrISNW0tSKqmn6SxL6ITqSJeIdgoa5UPRjeauI3u5RDF93mU7qQswKclheIMNIaSUq8hOHSMfyAnLsDfd25YYeBFf5AJyBKz9K3r54o88XDg8w0IJ3TmiTSBkyVLqUSQ8w8EiXOhktfGoybLcjk5Y1aOEMUgxhPNrfMbqLxwz0AuwXEvfxieNdqJkRJxMjy3kTHGoKmzAaCOG2VQoPwtcr5mPrGt3aNbjFI4xVQhF09PuRikRJzSCSsuiN9jMKWDlDj8ngqbvLiRff4AKCRTtGxJHSF2QDGPDNhWfn6Tone9mWIo98c3LQdcrhSvOGC9Ujj31rZqFyJ2GsdVDGXUV8sS5G7r7FmEgEpw8BS2Wa6DsUwGSN9u88ujvChoLsqThqAxhdtLdRZgP6HW0OZNFqZlgXuQsC9yAvIg9D4NtDQAXNDEDUY9Kb5lxdhkpfvPOuKQWCSAYHuWT9APIZZSchjL3pQ2dkhR5b0S2QIXzbNtt3UfQbLBlrD4YcStOPEYbMOVKqT3esWTCZ8EZEt2AY3LAht2N9Vvl9YcLtieT20IIBMMJZKk87BYS6lWIkFjQsO0sl1NiMdQ96kvtcnPU0nGeuAuvCw3Cn2hbTZAyUAYytpLgf8aaOqFQV6OxTGhY5wPune4MfqPVdFKVfFAicNvVrZCQ3JCuaoPUXSY5Jur5TiVbkBVvWSyPFOYGb85NroU3Ia5cSr8Wv98GWB3UUsVbY0WyGh5j2A8DdoQCDoQx0DSIeUIfUuhF9ec2V0kgXd4NNKxUVb5uE2RNneHt0Qb0EmJPOPGQzdsRzSRRf9ad3OswRxftTBTXFfATGOSi3fODmebyP21ubW57No4alzLpWcBHokarZDY8cqU2uD4wAUCtBKFvD7LLx8xnOk3gLRPL5g5w5FbgbnedVN91AFDKfetu08RcxAhTxx1x5kT4Yon5474JpgnMFAuSVBREXNHg2XEAOBidD9rThz4YpkGVtcYKAo3PD9NKi2PzAnl3ptpFAmgZ5Xja7y3rqDntnNHeHy4HfPy61APsuxavuNuR5AvFOdngRo4wHwzfPf2Ja3ZAOEY8cil3VIELKlshYipcCdSUaMP30RQWQxhyNMqtbrr813gkjolwn3lXWV1vgvLcrvkRMaD50x2Uyc3A0KlkZPeHFoK8t299Hpc6lkxty7Imy2YJSHoYxmegJ1pVs5P86BoD25vgBgdXVhqbTDjdduBaoKcTTH213gLOZl2bRXsVnncPxSuGVme4d6GFiIC3rN4YbRcm1KhmJ0XGmAZG85xsw0iHtnb5HcSrO3HHQ67LiV7S0gASjB4mdepK4s6duUW6I3YHnS045awkyHGGZzVhFNKlyQkF2k0WGpEr129DyZWtcds8vOV4AWBp7S8CcE6xjRL9ApCAtM5tUT0HDYu4HiS9FtQVjtzrihdnfYru2ZtacVDG26yot0cYScFdcWHjkTR7DxhfcjUG6Ys8pHHYE6cUQy5P94EaxOqIMGqTTPvuuatIEGbxF9pyxDoYCwWYoFYN4nThsyXpQFwXhd51Tb3Azad4cDg75NOTehm69ks9HUUcr6y1mWbzsMf84914b1hjXhK8s230iAPfcHUoJm74gJnUrn32iYDs9NLYdW8JwUOHdIxk7Igtwx4AMgbrS1Sd6xBXFAU45rpWdnyPy0qlSMm730oLF8tYvKNwGVrbIbbz962oH9iA45RQ0H7qm88Oib0ijMhoCTntx2OS4IK8Y0GoBgfaUnU7bNreBZEk5HUrGjyqt13ZkcEIc1fMbaqOmeUH76DXVCKotUhffrZtKRsMOOvAwrr4Zs0oqrPr773hdHWY7OsBJBcvRD9Z6S7Wx1DaJ3ieQ54wSU3wQxSKup2kNqMrmDV0XfPw8Ky2DpygWySPQQ9rxrmxXt1qiEAGKBSpL5TcueMgzUYQHAVjfApjZisOicNMMRkf2XWt91Z5FLBe0LWJ2VcaJZjOUyA1NrpU63cPi0PyaIibzAHwVZrjOIaxIlCxCnN1MRk4XzSDRJefcKGYGEg5tfeAlRKB0Q3RmEyGLecNWmZUYWoWAo5j7Zdunsjhlmb21bPe8rqjTpDh3Ufy7K6FCp7fHB4w2mJUJ6JUA7Xkv3VcXqmJ1TrGFRliXzKVqu2T4i0ToQd53vxrk68eSeY5v7GyAXiJfKfka7gfPwJlujIsutE6kycAXiowFRqlpJD6kXnHqeU3V945hWy8IrVfmie4GtocFPraGSpAzUi2UEik01gppNlThJrBnzi06q9KjDL4Xo5YWsz1qWp8OJ42R5Lw8zoq9YVFG1Mfm8C2ZdND11dmVSr33mEjGrPp2nWzlIP8ZLHjLaYu2L7HhEkhRW309he8lesfIfItd2Tcdno4SjmygVtVpgqqTmPbbnQJrqFuPG4yNWhivWkhtNJn1p0R8aeiwGmtiIfc57tXZLzeIbf4Q6L24NG4mqdcU8oUmgoUUQueMRbEFTbcsWIgOIlo2pepDCgXOISBLME0w6h4jbEU8oGxdAeGzGxADpxa2Ugbsp5lF02dlfdoACbdhK5Tt0nVtltp2VRfZjnWKkFQj2u0mQU49UwrcVl8v6MHqDLKrjiX4n3GqhfOS8joW87q1Xtyym0sCsc4mcdhdLYdLMMadZUaDSmcBcunlhfAnwGKhWmIeYilC4hHRcg1BNUAncDYAi3t2TGB7uFa4SV8VvKrVVzG6KFSFc6s1DvcU3eWZSc6T6k9hDZ14zkeuvNaaUXvhkiAC2jMLi8u4IOdwxN4ykqQJQQZc6nUYt219GoaaD5NiUfRrrMAbHKp1nlw0ud4Q95d5CrHvdWCnnhL4h6jtIzZ8q6tl6hCus5ofDDk4eJaLtxdoE55R6YbQgKlkqPovchNwy6e9OYrPbebxvoceruASmi3vG6FZd5mEl3pzgdQCLCOy5CUo54EhrkhqDXEH8xCjCQnUFzXNL5QlLEibiBVQc2UCw0OyEU3yVZV12FsAbNWEzovpqVTvEKVqdVfpME6ytXQlbFMACILtXCCdtqL9W5PviC8rjFGNLUYMzAkTZGvmlsnWhyHH4jmnhx2A4I6zLcifUxX76Hwo8wLbDULNVGcz8TGfSnMxe4cTJ7vXksIGrGAYLDSYHALMXvKEpkZ6N0IFnto9YxLwP4hng9aRVB453R9D4ZShngKiqaGwjvFojkQtw0UssvRitpvtLegiq8w29AlXxwELBgaUufzTR2A0gnpZJKXM1kSj3oZqciC3IQT4CdFftOvSSCe367Sy76ioROeTthVBibCo4VMlBWlaBzFAJ5lEAhuKWGwUOjic4VymGxx8AYB3KPGcCTHF7yNTAMnCnnEVoPiNZV5OZvtI5fGamlKyErJuqZbNUVpWtBG4mLSnF2bf6mHD0kUYqw60G2V9IxXNbXo7PC3wzBDdBYSQMyqFM9waVwiZfgLUeRkQ7KfIgttnlvDzYX0wVqq2FatNOKMxCWOghuL6XHabx62sHHWC3osBhGXmitOVBkmk6wFCShggdpmRldqkiXdB92HKjRZ90TUWpKozMa8CNt9rwiqbKTvE7cYQLKYijmvfD1GE7Q403gWKdnU50L9hSqPDXnLDtUa3kHtyl5dw4bIa2TdNDAAeZvvqTdRvvsHjvNQaRvAUDVo8cxhgO9Q897oY6O50gSxHaS99k9dJHQ6DJPpfvzX3WOgwagmDnMnGh2MC08T5cb7gvBIGuS4nGLOjKZAG12Fy2oM9oRHOX2c8SaWGV2OyBeGBsprnuNZQgZTvDlRFADJjZET5VCURE5YK3qoQxcNoSbkzjbAbzijtmOJg3JXvMPmyRPdTezEZXZCvfkoMRTT0uUqn5ZupuSlEcpehUL1gw5Hvt4Aem6xUWuV1UUA8jSH8LcSJmHG5ylnUYRirnWulQJnfOPoSiYOpgz5J4P0gpMOjTO1m7iS2PNtWT6rJZmiFVgfpUTVDGVO5pTOECfJbEaztJlGNX5r4NMHUOvafROtRvVnqI6GuNH1ORpZQkFJCkxwrTPeCzDAMpJGPD8YzLQO7b3LFR4RSdSZNgIQKqKP8l04CPFskMV3T1nI5W7eVSXwZKY1t8vwuGS7TpKtBUdyshPa5veMtbbua73z6hppQ8uJ94cWIflwxqKluV3RChsNKUecvlPbxJEoLuOHTe49lAFMjxG46QUzHATQAjkHQkTtWKhl2YX7rawxx0IMoTNUetxXZW1fJMtLiLzQamXRdEegnqeNaSfD2FcJcKAfRPryDGcJY6rj29urglyQpY06ihoNkOHFw3s7VLq2HIdGzXDAt33Tqk7MaSxEPNqiMJAlFzXFvJybrECBR7jfrc9ERs4CEfgcyKID8pCD539DuNYUHlG53Aip4CKejHfhYqo1LEVPUPX01plpfSegtWEEE7aOAWf2l42geOVHviUY93qTPCCjVdlJrYGRP9CXZoRFvs4EdPiceoHqXzaFiouPXUdh634pqCXK4c4Yljcrcc0og0LJJ5gcwzJ6iB3weDkG4zY8J9pzvVfidrLIMwBeqwioc66U15XUT7YV8Zqs4QU2CaQ3czJe19mgZdCQohCBkESypl1FVyirYMmB0jbmej3avtwQSPPP26kPokEtEhj7yyzj0K3ruCscpyDRXpPzS47dJhKOjJsrSI2Bw0TX6EyL7ysKwo2couvyLT0bKh3WYiLZSwiy95K7uwV9RQgB7n48gHub5fiOiZoCgPNEY3xJk5yjdyvKv8BE6oI46OZGabg4sxKgcPX8MOJ4nCLQwFg1aepe0HcJ5BG0Fm0lHca8IksZM1bDrzNKOnQiZZzS8ACJdq52h0IxxHWHJx7nfhUE3aYCTKNeZvIweqrqgSbTGLbjbYdmhZPeP894u553AxHkbwNUoksYHe94oU3jLfJc7BQNpVOve6T7cGN5XEvEAYnB4o41Oa9FwzUyB38jjRO52F51BdxVcpHUe4gxnTySlOjGetaAbeUGfqdsJ2b4SdWHzy5IGeKdV15M4gT4Vx5o5JymK9IaA0wc9IweYDJPTYBKVsXy3AM4kb3qLGRQUfdZN2ukh42C3BHdMD0y9ou4wuvChAq7yLfYdZVTAoTk7IqOTn3dJntXdie4rV1ifGLGT3DmcUWOz3gulNGaTtVd35JeXTc9vwgvWNZ1XfjCEKM30NecUBB3oNIzsSYxaKuWRyW1r3rFO5SHRLoDRhujtX70IpQhAnaJjK8xjC4gFZ4o2ao7znpa4sGpyDxXS7RRF17YxlqugzYzB9eLwydjEWk28U2jYYz77IEr1DldvmGWwaNGnScGhDSgwsr9bgf4SkiV4hciLVmdwJAluGxiwzL7jeIXihvhMSOFewAD9mEuwIKtRyXW3rkCCoNJxemem6B2u8u3OKmFx05bBvNtBbtPTGPTlB7LonMYDsqvs0djk9jepSqnvnDAwk1XhQUOpee0CyadWuSNcKUbSAtd8wXQLa8HuxlyLy1EUbMpZy9jIdUXzypuQtRgRX0NWkuqT2ydxfRh5Rb0BrQPWf9ZPlSfKy0UUCxnqDFXMAlddti6i91xvFstYAyvPEGR5cOp0Auqxn7SCSKh6BFbxKhbjxoukQO5pkrsSWblXyc78m26wl0ngtYpNKkQt0A2GF77Nq8NkUFX1oovu76xLjmk2aQNxVTJVDlnc5ThqZlMuKTKpYXiIexCuSmW1u9eE5eoIBl9UiWkZY8BUAn2scVdSPkshrrRMlAOL4NeXPTuuAWzE1nT4nbCQlxzyiUuaEK2VjhUJCscvpj8J0ONIorGJM8VAE9dvLlEzknr0odP8x84pOB5KQQjW6DahmQkIQM5rwOUZFOR7zE4e8hKjctMmK8iYW4Yva9eynPIQRf8PmkyfV1LNKf3M5maW1CcQAT44MGTC7XFSpDdLsA3vTVKwEbKxH3Ppn7ISBMf2gJf9xUP9I5D9W1rPfKNAj4IUqyK4vZWA5l5k3WqQtOCqbtI8UfC89J3Sj0MWRr7C1kQEZTYCMxQ1mlzu4mFDxjd1gRmUWeJr4M5dIlA9Bl9cldF57aOIpVZwWthtKfLuxe3gL7Jy77l5oO4LfUPdx2K6XlwGUWN9F8TFA4hverxNNVKPCR8Qt66bFhVcoNjoILzW1Zu1hE5qiTP81sk04rZOZBGVj2OROI8AeT5Tcp9CXAC2v6rB5RmOt78avcEzJPbhDiohvVUDxoQBRFohIDT1xxFTBFd4scKPxz9voIGM1pptdMCmVyBBfQNZHGDC4PMIM60NXAIaq9JBc8GWSYlmTUwe1Mf9yvbEelBYs9lC2pxHylZXfTZwYBCV5zteXVAQzovU84mu6ARX4MRq8nHCJjGFNk5MEbGzVS57bkJ6aN4dZv9apfyhWFHD5SKbWFXBITtX2S4Bm0pGJ6f2P9Vj9nnav3VxvIN7GNN2WeqwTm7O5KgRVAY3gY0Mnx9BrAZ1oUugmS8TVMj5imdkRwsve9RzA1UhiAmBcTzpOpJnJtDkFK7APbLYDpbTIaruFju2xwZj2bPg83vvAZsNU8d7J9uRbZBXi2fc7vIn4eMf74EiByRO0BSId3XiRLhMuRunAZ3jmJuVxWD6ozK454BtuTApLGb3jr44xRSfyC4wfO9X4GtCydWcdymIhxtRiXiDVYsO9mjCsrsJojVby35U5Nt6D2kS3T2RFRjAS75HofORYXDQ0EvPqBCVMXOGpLeMo33rRz1CX75ZQwt4i9rotNIWiR8IQqxdnmTpTfFrnmwHCL3lyAbvsIiwf2K6A9jAA1vmFE4FWmm0H0GV3Y3PJ9GLQTlve46RHkEx0PYCUeNSHTa6QXrHO41woZ0hMemJHqw4YAPUbuBhgL5eTDU4MyOK4zCSIYMczF0zoxbe1r53g7AYuGKikkxmlT2rLPaPBRuFmtdLWWpgtmsvnugkGVWi9OXuVx7hBvCwLdH76wI3d4qm4DP9Y7noHabTpQqdXGr0OQjUo5dHxzb5zmC2Lj5oFsfC0b0CypfqRbwhBooMoWiOMjDlCY4USexDwlkw90kvxy3DbipQ3JJNFfTEMIHk9l3GkkKXR6wpngiHY1NfiqReuKMjhxAH5NX99JMniTJVVg2599BztYgz5EMkRxHH1nVxxBqPMy6k3h8lGa9a1mrcK2XSC2VXNGdIVQS4LTIYvyl5lZ6pKz6xAyTAcwq4bFKHNYEx1IuyFu6yJr1DGFWgWMocSRJagPX8dDrnF21M6zRChbnwLexDMqG4UpWjqVgNzbTgM8NiVdV0o3BKeM2KhvbgsstwYP9OLIYfUmxdyzqnA13sz0s2rk5AS3EhiHXq6xCbSGLi7QGBL3vEl54y29AhS7bGlNSCNuCX08jc7nY9eUOtsGByu5wS56hfVUMyLhzClcTePFX17aHxjnfXtjQdSLHPwclzBuFuqVtBrAUcKQlLjbTX0I1zkmQpigwEXwqFXB0FYqzrOEDKo14cQfa13zD4KXTRidzRga3V52ql59emi057dz36PGamlzwIvrkGpt3AGWFdX795e9qNsbDmN6sxdrDnrsUrItKGUizTNNT8Tqepedd3uxY4fGdS14B527PA4ogEoEaebNwAep03KPZYOLPFdamr4LRUENEUGJ2Suh6tg1sQ06ULdXaF6eUYJ2RZAkQzuZod0y02xe8b7BVMAimu70K2nantGfEqkncG39a45N0vpSm8MfNZKJJPLOqETsQTyHYgnQHTMSYlt2J3efyk2738WuTK11aUgBjer2Sqb17VeZK6iH8ttiZ8ggJ04UOCDDoHZn3ZBLKc8BtaC2UurLetzAMNzGb6hMdub90RbNdHu6CkPFtv6IDj9Vs0I7aDInz13hxC2SgKNRWAVlp4Q56qsb3JZ6AKiQ5NKhT1wUrDf4e4YS7YRZDNEiWINjBfLE0wUOww5JRRfEVwiY1bVliybfLtEEdkDwKxXUiskit1098dogsPLAhP9eKb5A8meSnicbV0ambNftlZYGti5gJbGxWiUdvjlo3pgJPCpVSo1nlN0bHLcXg2D5W642lXbOyQPzTdffVd9RryNBwvAOVVi8ghXdEke6IPLty6I9s0XUKsnEvm6oPUNmqah8G2AYv2tGth0M4FiQpGc2Y0zF1IldXJaXpU0HdQkX6AMQhi0QAjGGJ4Bk9t1oZx6eriMfA1jBg0WEsVApR87dY0nC0WQNfGuI6sdl9eq2Y8qJ7nqbZkt5ux86mCUo7va8CqZt4B8TL1y4NrZ7uSpWTvMsW9h4d6WqhFgbTcmhtFGmfjw1zqEYwVYdG5ollknOv47ED26B2CE9SLjUqv1nNL4zZAJAhQo7FktStELBpWGUSCMcUY6DMIxN5vr0V7wFWJbkbutroVcDa6nb2nRusF7biUcJRWoJQF0hQCsXCV5DfoQP40oduGAsqcvVg14zYDCoiYwES46DV4dANK9umWeONRA2czbC0dpWmLQNWHgJWMcGe4ieHc20IUs707qwnL8gQUFlxR7M4nU8bWwAqdqk6Si8kLbQ5WVA2LXaA2JM9kEjqK5yogVR5S03L3fAVGH3odgcjsToeyIV76uyN05cc4oqkmKwY6zvl7h1Y52IYuNcAiEHYJqMCs1YnyArJj8HOrhULzZBue2vBSHLU0v3gfmJM2m59IEtUJJ79tXobY2KN1JOgYBZ8BoV3HLFXNqH5VyBGROVQ3UP5KcDpPPqr42pBGeK1zxde3nRbszvHZqgMHwRHbebmPkebA8Rcz7l6eBOD5qIBtX7sbXymHEegwD7c81mIFkUOc1eDDVAdwNwSQhFCN2wbPKtBUOjBIDu33i0UOIFHUYI1m2th4yU95XrEKoJLiyJlH1DtKh6fZwnmeBBGxDWohEqvWRWlvWNiQt7MJfIzPWl1fj5d4DS7wUHrW9LO7BSqqWFVUMN1lhCbMBX5x9NlVHOQNXhK3iMf3P3xHUFj71OMZsJm4wvcXSkrcRtSYeQK4DzbnYXvCNS3czDRl3sA6ExwnwsxNJhhQcuFDRQyhwID3Umt5MktO8GW4qy93QRtxsu3IweNoZiUPzBYRwa7XFEh1MGfk9j46gMI6QEMOTkY4svnJAbqJ51k4g9jw4XFL57emkzAdSVLCOPO3UgQKG6FLhsLidZdjjJu9Es56Qi5vZNjRsUu4V8HmLAzcBHqQOz4kUkVsWu8fiOSjzdjvjCEvAFDispV2lbxAb0qmtsCWefCDgTyiAKGvQbDBpJPTsiKQgUgdtK917BgEQzBsOM4TGUvCtIvWNZyYqFrlz3z3b9T3vhxPtUrfYCDUA6BC1QprwplOPJgdUmrgxuH2o4Kz3rDhlWL4CPunwMbAbXuG8iwGqdAkZHZqxW2mkoCgpSx4Ckf4HDgAJ9nuhaUuqvdFZGkICdsttXpu4ooWKk9iVCF2YAlnGjYPjxv0hsziGZTQbrs4gRu9oHVVZAz27tj9X9cFbqhBsovGrsm14lakdrPw2m4NZXiMRld9tBugaHI9QUSHFuG5fVJWCNbxO4XWxyOZvx6AHE0a644vng73AvWBvja9zbkk0IFJFrMErnfJxc0uwqgqZtBsvtt8jcoep0nzhrM0VaxBhUS3fRVZlktnHZfME1Pj0nuu870p7dAO9WEaUCsKyw7oz0KH6Ej5RviuA9xDDx1v5brWdS8tqPlA0etiWuFaXCPSotUnYVWnBU88aO9gMRUW0qztIY6OvKJLpTAKEDMc93CUyMaPoEw7p3gBT2bOCVYqM7bM4K0UyILrf8GEVfvFMggYlG7OGCl3QwTMwKejkCH1ruUVXuFnKySG7zRrsCS4PTD81uEadEYVi437UHjVNnjAZBI2BZGqkpt5dZMyiuouZn5vblKzKNM97QyAoqCiVfO2fIp479tT8sr9XDA3XDSB7aEa6jpJoyCt2afyvU6Kqidb514Pf30awVfwehRjUlfmpwbQSxXTCq7bHJB0J9d8VeLs0fMUP9NV3JHQI8NcX53Udv0IG5eAt2GKG6800feRBXVFWmyHFBpWI6Hhs6Eemd68Yn3UqkDuZxEz9ll1RZefTIOqrL91KJEgyVuf7nWQby7NsfmpDaWjTC6Bh5p8TlEDS4q0cQ63l0RaIhNYBrueY9tYettvPsjS6y7v3KIsV05r2GwsVCvfHxtqPP5xyxtLTrrsQQH1SQvi8ngHoS7mHLoRAoatKumIyVVzcDTQ6t9i3iOMaBERV5QgBeIwzT2FvkYuH0ck7uQVJoVHO5Sc9y0TCWclsi4Zq55BpbuHFmwD3hgZ8gEhuyPAIRKDZmFqB8j8zhnmtOaMljJzylefudxAQCtzrTDc4wuG45biA9XDd1iEzPiDNuLf3IjSnLif0ADJ8SyzFKjgBAva5AKBgGnvmqqmr2VKT9PMC7X8FuyvBKdmlt8lPRS6irOHVIfxF8n2qCtLCEs8LtDJZqvcUcKdDNfgWrvuj0hWh0ajLRjDTmPBHM21vI6HIQkTi2RbFGxy3um70uwBRPF69PclgKxcug8OEv7i5FjHwxIaTblkdaSB86I4F58agnMyuIG820EKKstjFXhXJuEmo7maL6WVnKgXzO8qd3b5GtfzMaKKKxj7ctQhQL8JzeyYbsEegIo2T7C3iGZOYM79wZ8ELi7NpiaVuw3eI4whusJtBBEfpmjIeFahhP0w8yukvkIRa7geCLUIfgw4k3tojerRxUoCchwnLNjK2UjJSkyZTadFnp8O7jocxB8TfEYMWh7m7KquNCPQoEOHVUqd2fU0HJQsojJp6zdMsnt75T5zm5RW4MasISwuFHhdqUWAHqBKQAPmWQ5G3y5kqygDLpPVY6MsYYUFdHZEW8X6A3iKfmk2IXKMPp9nQ8C446MKWmXp7FjdKIQnzxyRUknt2O07QQmsaVJVLsnERbnA9ZiHqtMZSC0oiD72uRw2i9r3VwwR4ToUujQmh5Jgxn2bGdyANSH0MB34sWzghYw0gZqiJ4yIN0X5hyJIyNRRWI4eER780738UDdiOpteLU0aNL3MgHotwcjkhWppdWggbysIwZ2bo8hjHGz8JTvcwbg7X7QZWiMYX1Qd6zdqLlhtaHjTECbSjyPomx6zVp4netLwHRz1wkNUTeBhFFptYsHuaTdpQLNGsiwWrfphmvxfNM55ZxiTSI8BdW8QtdeFZPJzCxkZX64aVW7bcNrFQePA7Jgms3P9Qiy1WGuzFTSKDwmziVYKoQXqv32DtH9Zd34rOVb2fSlkvZjp2xcke4ilGsQlGcbwcv8zV7pFsfxBoCGlW9bk2hPFqrMPuzRO2sNDi5hQ80Sg5p0rNkzzrb1rofgx512Xw5FA6J73f9HGduwC4JsLcuZr9cUGaewyzV9owYQEovrdVbgvVEGIv7qehrxf9o27JVXwoNHewNDDoImg2GHTgR8SdCvcKHcaaWMW34UapTWOKtO2CZpMQovvb3EqXFbplXcn4JuXSNNmKkgVF7bWG4uD4ZiwJLf9u1q65ZCM84c86TGZI2MYaRmTxA7R4BHgo8vSnAWP2uy1NCrdSwFHqt6dAWrqlgAwKi5yivFBsNrnKq8po3Zmva2TblBS5TJ9EOO3sZ16wbUR5R6haydsohHZgOQuBjwvyp95fSk128ZNE2a1uCt2ENkL00alEWv0bKeWsnkwc79Gk5xjQH3X3IV1VUsnZgLZStYw2zy4ODkbAYBjgOqdKfR6V636OMsyZBLv6HjRI9oqR9lU5CPPErnjgrKRWtLPuME9cZRJA2jHp6tQtGBO4E1TJEySy75LXcQVrvFfzLzCcxvlHerzEFd6r2xwx5bV3Bt0B1mGCbIMCopmzmZpuauRz9J49m4Z1NfLz5fzrriP8shYdRBS7Ya9w96bzHgk8wuiyS1MhyIIZZF15Lw8bUOotbUPY4ophDkJaIkKyaNCGMQTakfdsJ1NyOFO1qtw34GmaKxfRi5xuyzb9u6fZ2sOsZPGw3LYj8G9iNCTjSz2Lz31si8LhmWamfhpfmlqfNkKe84sFZWKcU1Itcb4Ia3lr3tPp7P1Fft2Af7Mw8V5LCIZCl82P4Unuepmszl2ozdzHUyvsLxAsj35F1gl0S7Fygtspt5Xl2rIvajIDCHhQrO5BTc93aL46j3WcJEjNivkQh0De44ft76AbkE3RRfahKVztD11fU2l74l0OuQnhvs354xIAhObadbqbIEqjuaMcOcAVfSYHPrFJH8QWhmaXP3XTlpugvkokDD84ru9AI5LuIARAIKzpEymGcpSdJ7zkBXSoBuByW0xvCDmNXaOKR38pkTfv3i7J3NWLRQ2P1SrfHCgZIVIIbreDfAzdJyiXAvTXKDzSsDNIRHRQzgjnrdsl0sv3y9SxBnQB7PmAGe069MVF5PKpv73S6czHFdbtGziA7hcLPsc6kfiQSpXqEb1r1wwpZjyunVsY26mTmqJ6YfsdJU1xIM5ErX3qhRQsz3dsg9JgCFPPkLuboOitM8EBcx9HkVIjKx3KMgRlUt3jQ7lDImJ6EtsK72QYSaF6KatMjZoEOkw2EUrrL31sDmWWbBVgGzcBnxGKJn56ntNaUjHltaZxrUsoFQ0pRmaGNop24d3Ywec7PGkao4ZXJc5rUwPBWiG5E9RPPFbdpROPM4xvijquV8gPOfFOWCpt88qgBvoqLZK5rFFQFr8XjsRHg8W2fVrVxCdSzNI5k3vTGlb04znMt5eldj6GLXtev2qpfqquh2M3AEVuIAi2MfV9j3ujqGQjAOh7nJvS6jW2q6GtKhytgyMpgCeGSOTJ6sIBT2rpdAcqaH1C2Ddl2BPR3LnzCU1QlqU8T9IwHxdFSBcq5bWEv4wZlK6Ze0JMMN26dDoufHucXHN3cVGGgdQC1jxYKSgE8gBvslEpgqXskM7aDwjpxZOX4DGamOQxL39zjoOqpyea5bjkWVW49DIMbiScG8PoMVqsnjJP6iRS8Qp6b03mCSfjAezCRDKo5xQzSdjt68be8YYGmnhdUEaQANklhAYG1ye9JE8BuSFmsUPkVrlHuHejmyQIPRVPXhKi6vt5QItYJLhSLCAEyd5U4Bj145dOVKVN0OIDhygVbrPCRkBXr7E10hBqqdtbTiUibXuuGDhBiJJIKN0Gc3xoj26p5TUxAzdseoSBw3jT4vbNaWR2Txosv68LlsgJAfNbJ7HwnIJIN9yRg8hBcrskSBNV9hBzMmdUoWNFQX5IIVWJRRQnL5Tn6jj9hsmRK3GgQlrVukvISIUJPpSn9Dj3Tf370a5EmjzVZMcBEZxYqjCghjClHhZNHX65MowUZcD1PijlF4by1ezNxJtyunZe7BNaczvbWNCRTzNEmYIB4xlX54gUIK98dwW8BJuyBJR7Qo58fzxowgmcoaDiGY9xKjHDHF8kouI1cG0DnVJ'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,config,chead,ctail):
	# return base64.b64encode('{}\b{}\b{}'.format(chead,json.dumps(config,ensure_ascii=False),ctail).encode(encoding='utf-8')).decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}').decode('UTF-8')
	# return AES_Encrypt(password,f'{chead}\b{json.dumps(config,ensure_ascii=False)}\b{ctail}')
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	# for i in range(0,encryptCount-1):
	# 	encConfigStr=base64.b64encode(AES_Encrypt(password,encConfigStr)).decode('UTF-8')
	# encConfigStr=AES_Encrypt(password,encConfigStr)
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,data):
	# decData=AES_Decrypt(password,data)
	# # config=base64.b64decode(data).decode(encoding='utf-8').split('\b')[1]
	# config=decData.decode(encoding='utf-8').split('\b')[1]
	# return json.loads(config)
	
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	# decData=AES_Decrypt(password,data)
	# for i in range(0, encryptConfigRepeatCount[1]):
	# 	decData=AES_Decrypt(password,base64.b64decode(decData))
	# 	try:
	# 		decSplit=decData.decode(encoding='utf-8').split('\b')
	# 		if len(decSplit)==3:
	# 			config=decSplit[1]
	# 			try:
	# 				return json.loads(config)
	# 			except:
	# 				pass
	# 	except:
	# 		pass
	# return False
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___qgXOArQRiAOY0RUHY9tXBOH9WcWCGRNuPhISTE2fm8feHJZ0PnNJ5q6aPJxyqYeU23='qgXOArQRiAOY0RUHY9tXBOH9WcWCGRNuPhISTE2fm8feHJZ0PnNJ5q6aPJxyqYeU23LYEgp3qGuUmquoBY0GO0gOHKNYnb10iTA6EEHKRJ9CIZkPDOvUSIppHjRqoEpTK6QfQmjfz0FAatZGkONd4R1CcKgi5EqUejGEoX6WfDDEm3rncqRjU5PdCgWLOZ2DmaXJKigBvT9TgpDkIUkrUjpShhPZbHdF3wKdbvBNcK3C1o0fNF5ippylXcOJkj5GToP76mGF7NgDU64MTBelyXJijnwElKfxzsdllHpUFm97MAa9vuIEebAZwuH55hkBnykKoeeCOC9NWEBYQ9X6TOKBgXjaMMvnKft9K1UHDWkuFVrvx6C8P1DPR5oGILQSAae8uanta2NtfJmyDR5FJelTBF9dFrC8qEOaazgp4RpUqt2ylDa19kwKCLl7Pltsdam18V41M0nrtVvhdkikyCW7KkzRD2DqILls4rmYMdefyNlkRyznsUIVxSskqTY9OqIh4fm4Zaal3Ln0g69qJsZ8Xuodg2dk0yCAXK1cGt0yCkiw4WyvOWBg2tICinTcVMioRRFdacukh5cdzZseIng0a0jncKbhfxhOcz3g6E4J3IPht9fGtcsarhdwAH6vNj1zGl5JiZwDnyU4SYxySSNKgvl6Irr0o8IUFyFAo5kiiGAgYcbBBW4h5EkGcqViyablcxtDRj3m0ViMvDRabzkT1jYcYx3WrkyVQFDBWiEytOVhAcR6crfG6FwhJdLs0aeTCLV1R6FPPdiNvFQ7GZ6zuPAhv4jmtoUKMkVE50SR6GZahROUd5cY7xrJoYW9O2JmIHNIyOemSrzpqdHEdVGJT29eDCmnA26fQx76Gt69EH5mQdP8tF0nqYMhbt8lMGkI3twoMxnKPruR1CExmTvB7SPHdC0Glopv2dpCZBsItNKFyRjLO1BxQf53oUCBDLkO7lkRjiS50e2ZOWVSLDUeNXGwoteg2k10iST2xnYVF0tkt5HtdFmUddD24vd3FCZ55mMFD3QI0w8pB3WLbYw6j72QOeI7o9l9uK78APz7uAVWnjtebWbuZUxWu62l2SOyxXo9kp3JeYbPcQnwEDUzwJrLfy2qNqGlqiaz7sTYSab09nNOIcsGxQjA6R9lC1kFRSAGR7Uzwpb3Vr5tcVKOVtOTEmR24JJMusDYE3bhNZ2BwHk1FRj4kTiS0dyek6LJ4GznFfiKwtdYy5zjsFNNidHmJ9HmackU6An66LdGfepDp2kky5qHMEy4WbLet64nDoCZoHu7T29CpJXwQJ5OPLcG4fDU0APHi9UCpK0UvWwAzaZlSTG9POw2EK5hdzNPQytf3OBPBOWhSmuc65yq7da9C0z4ZL0L63TKtv2zsKGKW5G'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___WpF7Uq7xO1OvXstBPnPweIZWDhFAhsfOEPtVtdbc0NPWBHT2118ZoplZzuIoXpgaN0HucTpKP099MGyIcBuc4se9VsW86s=''
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def beginEncryptFiles(file):
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize'])),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		desc=input('请输入留言，如果不需要，请留空：\n')
		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=makeOutputDir(genSalt())
		projCfgname='cfname'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		cmdParms={
			'projOutputDir':projOutputDir,
			'encryptKey':encryptKey,
			'volumeSize':volumeSize,
			'fileName':targetFileData['name'],
			'filePath':targetFileData['path'],
			'fileSize':targetFileData['fileSize'],
		}
		cmdStr='@echo off\n"{projOutputDir}\\7z.exe" a -p{encryptKey} -mhe=on -v{volumeSize}b "{projOutputDir}\\{fileName}.7z" "{filePath}"'.format(**cmdParms)
		runBat(cmdStr,'output\\')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		os.remove(f'{projOutputDir}\\7z.exe')
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outC('正在重命名文件……','cyan','black',1)
		for fp in getAllFileList(projOutputDir):
			fileName=fp.split('\\')[-1]
			fakeName=genSalt()
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
			})
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
		# renStr=f'@echo off\ncd {projOutputDir}\n'
		# for fp in getAllFileList(projOutputDir):
		# 	fileName=fp.split('\\')[-1]
		# 	fakeName=genSalt()
		# 	renStr+=f'ren "{fileName}" "{fakeName}"\n'
		# 	encryptConfig['fileList'].append({
		# 		'fileName':fileName,
		# 		'fakeName':fakeName,
		# 	})
		# runBat(renStr,'output\\')
		out.outlnC('[完成]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在生成混淆配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genSalt()
		decryptConfigString=encryptEncryptConfig(password, encryptConfig, confuseHead, confuseTail)
		writeFile(f'{projOutputDir}\\{configName}',decryptConfigString,'wb')
		# writeFile(f'{projOutputDir}\\{projCfgname}',configName) # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		writeFile(f'{projOutputDir}\\{projCfgname}',xorEncConfigName(configName),'wb') # 用python将文件名写入到临时文件中，以待后续合并使用。不能使用bat的echo，会输出空行
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		originFile=sys.argv[0]
		originFileName=originFile.split('\\')[-1]
		if(originFileName.split('.')[-1]!='exe'):
			out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		else:
			targetFile=projOutputDir+'\\'+originFileName
			copyfile(originFile, targetFile)
			# 混淆exe并重命名
			cpyStr =f'@echo off\ncd "{projOutputDir}"\n'
			cpyStr+=f'copy /b {originFileName}+{configName}+{projCfgname} {genSalt()}.exe>nul\n'
			cpyStr+=f'del {projCfgname}>nul\n'
			cpyStr+=f'del {originFileName}>nul\n'
			runBat(cpyStr,'output\\')
			out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___KzdklfqH1vU0Geo7uMimGzeZeSlyjWlKiXpfxpTZ69aatvB0hV2wfChCx0oxLbwhs4KLyGzEl=''
########## CONFUSE ##########

def beginDecryptFiles():
	execFile=sys.argv[0]
	execFileName=execFile.split('\\')[-1]
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	f=open(execFileName,'rb')
	fileData=f.read()
	f.close()
	# configName=fileData[-32:].decode('utf-8')
	configName=xorDecConfigName(fileData[-33:])
	alreadyTiped=False
	while True:
		if not exist(configName):
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig={}
	while True:
		password=''
		encryptConfig={}
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		out.outC('正在解密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			encryptConfig=decryptEncryptConfig(password, loadFile(configName,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC('[解密失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC('[解密错误！算法有误？]','red','black',1)
			out.outlnC(e,'red','black',1)
	
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	out.outC('正在重命名文件……','cyan','black',1)
	zFileName=''
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		fakeName=fl['fakeName']
		if fileName.split('.')[-1]=='001':
			zFileName=fileName
		os.rename(fakeName,fileName)
	# renStr='@echo off\n'
	# for fl in encryptConfig['fileList']:
	# 	fileName=fl['fileName']
	# 	fakeName=fl['fakeName']
	# 	renStr+=f'ren "{fakeName}" "{fileName}"\n'
	# 	if fileName.split('.')[-1]=='001':
	# 		zFileName=fileName
	# runBat(renStr)
	out.outlnC('[完成]','green','black',1)

	# 进行7z文件解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=zFileName
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
		targetData=targetFile.read()
		originFile.write(targetData)
		originFile.seek(0x00)
		originFile.write(originHead)
		originFile.flush()
	os.remove(firstFileName)
	os.rename(f'{firstFileNameTmp}',firstFileName)
	out.outlnC('[完成]','green','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	cmdStr=f'@echo off\n"7z.exe" x -p{encryptKey} "{zFileName}"'
	runBat(cmdStr)
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def main():
	os.system('cls')
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	if len(sys.argv)<2:
		os.system(f"title 资源解密解压工具 {version}")
		out.outlnC('-=<欢迎使用资源解密解压工具！>=-','purple','black',1)
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		os.system(f"title 资源加密压缩工具 {version}")
		out.outlnC('-=<欢迎使用资源加密压缩工具！>=-','purple','black',1)
		out.outlnC('请在开始加密前，清空output文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			out.outlnC(e,'red','black',1)
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___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'
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___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'
########## CONFUSE ##########
