########## CONFUSE ##########
___XjmzP46yjRHatIT34LwNMK4LJRLbos9pJYasGpm6i5KRl='XjmzP46yjRHatIT34LwNMK4LJRLbos9pJYasGpm6i5KRlPziUhEo8EAvnN7yXoIbf4DLdKXcPUO2HTwKuRzyS3ef8ollWx3xdOix6AHRtuYdBai2m2rzNdSv3EkmewRzopYtvCeRP5kdYj3KScr3uyDfHH322lJtdNp4pxCDvqxcEgygv0otH16ZygIBhGDcAPbthd6DJnM6hyQhnwzDt5qq4Ll7knnDnrtGUp23Z7o5yIbRfGCe3dr8y8dX2uaX189NHCLcL1QZwTUiPq2roh55NEcNe9fYjKCbS1RDw9L0kuTM4L80EIjxwLpMquUzIR6pztXI8VUFOIPQU1T46rihbjgLxeg0FtDpzJVxllN8OYqJ15OZYo86EaJX1LOiwv4xbaEpVdsbeOLc1TSKZyeTrO97tStA9Q2oOQcD1ja6eOtS6uHJ8uTtqfB1BeozQHh04Gn7r9Kl0MIthMXWtcuve8Ti7jGIr804oxU4UtTfcwwrLve1RBe5mRxMeiuh60P3P2hILJjwAQfaPyzh2YWIixbi8ILAlrYvh88AuhYxFMDdj8djOp06JF2ND1uXoRz4fM927v7BNE2mC9FdOj8rmmzvR4IlPtLPyjEBuHan5VZyBU1uMEZlnkqNsiabbbenE0Cw1BvgvBINTQcjMw0DmnQd3bJdnLtD4Xw5rfOOUEBL0usGPveo2bdDyVYjYkKZl19N1rIhYpROEnPInx536YiiSxr8gJxB9HzFgRDZHonIZRfCoufN2JViW3WJtMkDt7vXNL7d1f2qz4XJdFHu3FBV4Zm47iqzl5nXDnRWKfA60LlXfAdCsI6dMyYIQX8D9TWr8N7cOECQHGEdXKdcygZUr0VwLPHg7ZNJruGAwscYtNxlYDsSPCiAfYogIhHAKIf32VaGlc86ArOdpNZxcvfVM4YqMIubdsefSgmjdC1Sxwe4AUuCCwdT7sgAofMd3WruTzHS5zrDweLEuTg0Q2SQX2qBLrrWcgLwthlUs7IMb7y7uLH8JfI2UFyOZtD8TWv6ajbaEQ2HDybFgLJKh8JGgSmaQvkKuCOmdvmnLD8ekKQ7WwSUEucVIKsxKpWqw0RcgzDGWFIV67QUlfk8hSgadK2Ffq5izF3VzFQCHzanyurbC3DfeynFoxSf4cEpt54ovuFAdZbB9dLXBFh6gkVOAc8nxDnBZWVLtdN4CrT49qw6g5Uo5DeihXJP3PnsTSG4SqQziQ7yPW7iNTxVwnc692uSvibQMkhufimfnuNQo3VIPdSe8NkQQVlHIdYR4ms3FXNNAFNR3N1oMNwyw0JRXu4jEZ1gXzpm4NIbShbjVUnekaaGi4CwdnAYWQ9lOURhKff72LxlYx0kO910qhftaZklgW0goOCWhzQhNPI2JeHB4xymeMxchmFW8AdeywsGg6PAJ5B2gGdK2y0rXxMnMuIgko5OJspnBnPJ5tWgeraaNkHfsLSgC2QfO0B5EsA5XQ5US9iLabVoJ5YT0lANgMqLFFzEhKmv5a7AIQ3OIzEqtqwtMma2KST36HEmWbMAdSeUt0uXLi0couccaRFPLe6nOCdovI2spmjxzVdHQeahjnQKSn6L7jtTqbdps45LR5bgVV3sSFgxNq7Najxeu8ER8aUGl8GuZwrSQ8JGBtqkDk012btwfHiiqNqbrKh8qGPYo4g0LCnLWdzseBq4wJe1wyCrOH4EfBv71XEkfF0Y3dGLe60qozfA8kxuYXm9vC36Gj5kbbrorjEi1NvEwaUpD8dmgtW10cGx4ZiFaNOoH9PC6vNkV3OGyk3rCU8cwmevKZoZJGSZvulAdCl3zuWP'
########## CONFUSE ##########

import os
import sys
import glob
import math
import time
import random
from random import shuffle
import base64
from Cryptodome.Util.Padding import pad
from Cryptodome.Cipher import AES
from loguru import logger
import platform
import hashlib
import colorout as out
import json
import send2trash
from shutil import copyfile
import struct
import subprocess

import _7zexe as _7z
import disguise

########## CONFUSE ##########
___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'
########## CONFUSE ##########

VERSION={
"appName":"ResEncryptor",
"appNameCN":"资源加密压缩工具",
"versionUpdate":[
{
	"mainVersion":"1.3",
	"dateVersion":"20241015",
	"versionDesc":[
		"调整菜单选择顺序。",
		"文件名支持使用原始文件名和自定义文件名。",
	""]
},
{
	"mainVersion":"1.2.2",
	"dateVersion":"20241012",
	"versionDesc":[
		"支持空密码。空密码时，使用默认盐作为密码。",
	""]
},
{
	"mainVersion":"1.2.1",
	"dateVersion":"20231115",
	"versionDesc":[
		"调整AES密钥算法，提升安全性。",
	""]
},
{
	"mainVersion":"1.2.0",
	"dateVersion":"20231101",
	"versionDesc":[
		"优化代码结构，移除不必要的代码。",
		"修复在非标准路径下，解密失败的bug。",
	""]
},
{
	"mainVersion":"1.1.9",
	"dateVersion":"20231031",
	"versionDesc":[
		"将7Z执行方式更换为subprocess。",
		"优化报错信息便于定位问题。",
		"修复打包路径中含有空格时，会报错的bug。",
	""]
},
{
	"mainVersion":"1.1.8",
	"dateVersion":"20231030",
	"versionDesc":[
		"加入禁用声明。",
		"加入重命名的用时统计。",
		"调整打包时临时文件的位置，以实现多个脚本并行。",
	""]
},
{
	"mainVersion":"1.1.7",
	"dateVersion":"20231027",
	"versionDesc":[
		"加入双文件模式。",
		"加入单文件大小验证和警告显示。",
		"加入数字累加和字母累加的文件名伪装模式。",
		"调整文件名乱序位置，以确保累加前完成乱序。",
		"优化单文件模式最大体积限制的算法。",
	""]
},
{
	"mainVersion":"1.1.6",
	"dateVersion":"20231020",
	"versionDesc":[
		"加入压缩完成后，验证解密数据功能，以确保成功打包即能成功解包。",
		"更新伪装词库。",
		"修复使用文件名伪装时，有概率出现同名文件的bug。",
	""]
},
{
	"mainVersion":"1.1.5",
	"dateVersion":"20231019",
	"versionDesc":[
		"调整文件名伪装策略，主EXE文件与文件夹同名。",
		"修复重复执行但未找到压缩包末尾文件时，会误伤其他文件的bug。",
		"修复小概率下，解密文件名包含非字母数字的内容时仍可拆分解密配置数据，导致无法解密的bug。",
	""]
},
{
	"mainVersion":"1.1.4",
	"dateVersion":"20231018",
	"versionDesc":[
		"加入4G单文件大小限制。",
		"加入单文件进度和用时显示。",
		"加入生成的文件伪装文件名和后缀功能。",
		"优化部分流程以提升体验。",
	""]
},
{
	"mainVersion":"1.1.3",
	"dateVersion":"20231017",
	"versionDesc":[
		"加入单文件整合模式。",
		"加入解密文件列表乱序功能。",
		"将解密配置数据整合进exe文件中。",
		"优化程序结构以提升性能。",
	""]
},
{
	"mainVersion":"1.1.2",
	"dateVersion":"20230704",
	"versionDesc":[
		"调整加解密迭代次数，优化用户体验。",
	""]
},
{
	"mainVersion":"1.1.1",
	"dateVersion":"20230703",
	"versionDesc":[
		"加入随机文件名变长功能。",
		"调整混淆数据和随机文件头的长度。",
		"修复解密时，文件不存在会异常退出的bug。",
	""]
},
{
	"mainVersion":"1.1.0",
	"dateVersion":"20230628",
	"versionDesc":[
		"加入混淆压缩包最后一个文件尾部功能，以减少特征。",
		"修复极小的文件，混淆头尾会溢出的bug。",
	""]
},
{
	"mainVersion":"1.0.9",
	"dateVersion":"20230627",
	"versionDesc":[
		"调整AES密钥结构。",
		"调整混淆数据大小范围。",
		"调整解密配置数据编码方式为base64。",
		"调整解密配置分隔符为默认盐，以增强兼容性。",
		"修复极小概率情况下，输入正确密码也会解密失败的bug。",
	""]
},
{
	"mainVersion":"1.0.8",
	"dateVersion":"20230626",
	"versionDesc":[
		"加入自动更新混淆数据功能。",
		"加入压缩、解压用时统计功能。",
		"解密配置加入项目名、版本字段。",
		"调整解密配置混淆数据随机范围。",
		"调整输出的项目文件夹改为随机字符串。",
	""]
},
{
	"mainVersion":"1.0.7",
	"dateVersion":"20230625",
	"versionDesc":[
		"调整解密配置文件名的附加算法，改为随机异或。",
		"调整解密配置重复迭代算法，减小密文数据体积。",
		"调整解密配置重复迭代次数，大幅提升暴力破解时间成本。",
	""]
},
{
	"mainVersion":"1.0.6",
	"dateVersion":"20230620",
	"versionDesc":[
		"更换混淆数据。",
		"将重命名功能改为Python内置库。",
		"调整混淆文件头的数据长度阈值。",
		"加入解密配置重复迭代功能，以对抗暴力破解。",
	""]
},
{
	"mainVersion":"1.0.5",
	"dateVersion":"20230619",
	"versionDesc":[
		"更换混淆数据。",
		"统计文件时，加入文件夹的统计。",
		"加入混淆7Z压缩包文件头功能，规避文件头识别。",
	""]
},
{
	"mainVersion":"1.0.4",
	"dateVersion":"20230613",
	"versionDesc":[
		"更换混淆数据。",
		"略微调整解密流程。",
		"去除配置文件编码base64的操作。",
	""]
},
{
	"mainVersion":"1.0.3",
	"dateVersion":"20230612",
	"versionDesc":[
		"加入密钥随机大小写功能。",
		"加入分卷大小随机增量功能。",
		"在代码中随机位置加入混淆数据。",
	""]
},
{
	"mainVersion":"1.0.2",
	"dateVersion":"20230609",
	"versionDesc":[
		"加入自动清理压缩包功能（移入回收站）。",
		"加入在找不到配置文件时，手动输入配置文件名功能。",
		"将字符串中format引用变量的方法改为f''。",
	""]
},
{
	"mainVersion":"1.0.1",
	"dateVersion":"20230608",
	"versionDesc":[
		"完善功能提示。",
		"完成解密解压功能。",
		"修复文本错误。",
	""]
},
{
	"mainVersion":"1.0",
	"dateVersion":"20230607",
	"versionDesc":[
		"实现基础功能。",
		"完成加密压缩功能。",
	""]
}
]
}

########## CONFUSE ##########
___QfuANANvOVl0CuNwyYdgkjwWGzAwk5FuNSwuy020a2ehBHKNefvPFBrthT3nXr4lamDWkwW25EbqmTjK445=''
########## CONFUSE ##########

'''
Configs
'''
# 输出目录
outputDir=f'{os.getcwd()}\\output'
# 分卷范围（此范围是压缩前的分卷范围，压缩后的情况不可知）。[最少分卷，最多分卷，分卷增量上限]
volumeRange=[20,50,65536]
# 默认盐，和配置文件加解密有关，不可随便更换，否则不兼容其他版本
defaultSalt='KnWn7ZYSa309KyYnruB0JXF9zIRAsQNx'
# 随机文件头长度范围
randomHeadLengthRange=[4096,65536]
# 解密配置数据重复加密迭代次数
encryptConfigRepeatCount=[5000,5000]
# 混淆数据长度范围
confuseLength=[1024,65536]
# 解密配置与混淆数据的分隔符
encryptConfigSplit=defaultSalt
# 随机文件名长度范围
fakeFileNameLengthRange=[16,64]
# 默认异或数
defaultXorEncNum=206
# 单文件模式最大文件大小
singleFileSizeLimit=4294967000
singleFileEConfigLimit=5242880
# EXE文件查找配置数据读取大小限制
execSeekSizeLimit=-5242880
# EXE临时文件名
exeMergeFileName='merge'
# 双文件模式临时文件名
mergeFirstFileName='first'

########## CONFUSE ##########
___ilXcUhKFP09OZlCyPNJj1UwMFmFwqzz7eyftGla1cWctVRIOERO9BYpOmmL7dJv8oN4b5I2bWluvRXIZeY6pTdBIEbecZdi=''
########## CONFUSE ##########

'''
Utils
'''
def cmd(c):
	os.system(c)

def wait(n):
	time.sleep(n)

def runBat(batStr,output=''):
	batFile=f'{output}temp.bat'
	writeFile(batFile,batStr)
	if not exist(batFile):
		logger.error(f'{batFile} not exist!')
		return
	os.system([rf'"{batFile}"'])
	os.remove(batFile)

def run(exe='', params=[]):
	exeList=[exe]+params
	return subprocess.call(exeList)

def pause(c=None):
	if c:
		print(c)
	cmd('pause>nul')

def cwd():
	return os.getcwd()

def exist(dirs):
	return os.path.exists(dirs)

########## CONFUSE ##########
___GM8a1rvF00j591ZZ2vudeBB51ErRHUMRYTcB='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'
########## CONFUSE ##########

def loadFile(file,tp='r'):
	try:
		f=open(file,tp)
		fs=f.read()
		f.close()
		return fs
	except:
		return None

def writeFile(file,data,tp='w'):
	try:
		f=open(file,tp)
		f.write(data)
		f.close()
		return True
	except:
		return False

########## CONFUSE ##########
___xWj1Ne2GULsY75tgpxqOkEUwpzX8GPjHQxXtVkkwQelNdWLi1zuZlabpoVKoiMAtufhPM8VnO7aXjOvtEvN2yDp7=''
########## CONFUSE ##########

def getAllFileList(addr,includeFolders=False):
	allFileList={'files':[],'folders':[]}
	if not exist(addr): #路径不存在的情况
		pass
	elif not os.path.isdir(addr): #路径为文件的情况
		allFileList['files'].append(addr)
	else: #路径为文件夹的情况
		for root, dirs, files in os.walk(addr):
			for name in files:
				allFileList['files'].append(os.path.join(root, name))
			for name in dirs:
				allFileList['folders'].append(os.path.join(root, name))
	if includeFolders==True:
		return allFileList
	else:
		return allFileList['files']

def max7zVolume(fileList):
	current=0
	index=0
	if len(fileList)>0:
		for i in range(len(fileList)):
			f=fileList[i]
			fs=f.split('.')[-1]
			fn=0
			try:
				fn=int(fs)
			except:
				pass
			if fn>current:
				current=fn
				index=i
		return fileList[index]
	else:
		return None

def getAllFileSize(fileList):
	fileSize=0
	for file in fileList:
		fileSize+=os.path.getsize(file)
	return fileSize

def formatFileSize(b):
	units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	size = b
	unitIndex = 0
	while size >= 1024 and unitIndex < len(units) - 1:
		size /= 1024
		unitIndex+=1
	
	# 保留两位小数，四舍五入
	size = round(size * 100) / 100
	return f'{size} {units[unitIndex]}'

def randomPassword(length=10):
	pasArr = [
		'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
		'0','1','2','3','4','5','6','7','8','9',
		# '\'','~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']','\\',';',''',',','.','/','{','}','|',':','"','<','>','?',
		# '~','!','@','#','$','%','^','&','*','(',')','-','=','_','+','[',']',';',''',',','.','/','{','}','|',':','"','<','>','?',
	]
	password = ''
	pasArrLen = len(pasArr)
	for i in range(0,length):
		password += random.choice(pasArr)
	return password

def genSalt():
	return randomPassword(32)

def randomBin(length=10):
	return os.urandom(length)

def genCapsList(length):
	capsList=[]
	for i in range(length):
		isCaps=random.randint(0,1)
		if isCaps==1:
			capsList.append(i)
	return capsList

def formatSeconds(s):
	timeObj=time.gmtime(s)
	timeStr=''
	if s<60:
		timeStr=f'{round(s,2)}秒'
	else:
		if timeObj.tm_yday-1>0:
			timeStr+=f'{timeObj.tm_yday-1}天'
		if timeObj.tm_hour>0:
			timeStr+=f'{timeObj.tm_hour}小时'
		if timeObj.tm_min>0:
			timeStr+=f'{timeObj.tm_min}分'
		if timeObj.tm_sec>=0:
			timeStr+=f'{timeObj.tm_sec}秒'
	return timeStr

def getCWDPath():
	argv=sys.argv
	cwd=os.getcwd()
	executable=sys.executable
	return {
		'execFileName':argv[0].split('\\')[-1],
		'executable':executable,
		'argv0':argv[0],
		'argv':argv,
		'cwd':cwd,
		'realPath':os.path.realpath(sys.executable),
		'dirname':os.path.dirname(os.path.realpath(argv[0])),
		'realDirname':os.path.dirname(os.path.realpath(sys.executable)),
	}

########## CONFUSE ##########
___ODiY9CcJodGGU1E9WAk2h98NS5Tewv=''
########## CONFUSE ##########

'''
AES加密
'''
# 将明文用AES加密
def AES_Encrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return base64.b64encode(obj.encrypt(pad(data.encode(),16)))
	# 对于字符串数据，将它转化为bytes
	if isinstance(data,str):
		data=data.encode(encoding='utf-8')
	return obj.encrypt(pad(data,16))

def AES_Decrypt(password, cname, data):
	key=hashlib.md5((f'{password}|{cname}|{defaultSalt}').encode(encoding='utf-8')).hexdigest()
	iv=hashlib.md5((key).encode(encoding='utf-8')).hexdigest()[0:16]
	obj = AES.new((key).encode(), AES.MODE_CBC, (iv).encode())
	# return obj.decrypt(base64.b64decode(data))
	return obj.decrypt(data)

def xorStr(s,k):
	r=b''
	for c in s:
		if isinstance(c,str):
			c=ord(c)
		r+=struct.pack('B',c^k)
	return r

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
App
'''
targetFileData={}
def applyFileData(file):
	targetFileData['path']=file
	targetFileData['name']=file.split('\\')[-1]
	pathList=getAllFileList(targetFileData['path'],True)
	fileList=pathList['files']
	fileSize=getAllFileSize(fileList)
	folderList=pathList['folders']

	targetFileData['fileList']=fileList
	targetFileData['fileCount']=len(fileList)
	targetFileData['folderCount']=len(folderList)
	targetFileData['fileSize']=fileSize

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
生成配置数据
参数：混淆头，混淆尾
'''
def genEncryptConfig(chead, ctail, desc):
	# ctype=1：混淆头尾合并；ctype=2：混淆头尾拆分
	ctype=random.randint(1,3)
	config={
		'salt':genSalt(),
		'name':'',
		'description':desc,
		'timestamp':int(time.time()),
		'fileList':[],
		'capsList':genCapsList(128),
		'originHead':'',
		'originTail':'',
		'confuseFile':['',''],
		'isSingleFile':False,
		'version':VERSION['versionUpdate'][0],
	}
	if ctype==1:
		config['confuse']=chead+ctail
	elif ctype==2:
		config['confuseHead']=chead
		config['confuseTail']=ctail
	elif ctype==3:
		config['confuseHead']=chead
		config['confuseMidd']=chead+ctail
		config['confuseTail']=ctail
	# 随机配置序列
	ckeys=list(config.keys())
	random.shuffle(ckeys)
	cconfig={}
	for k in ckeys:
		cconfig[k]=config[k]
	return cconfig

def xorEncConfigName(configName, num=None):
	if num!=None:
		return xorStr(configName,num)
	else:
		configNameXorNum=random.randint(8,255)
		# 返回n+1字节，其中n字节为异或后的bytes，最后一位为异或码
		return xorStr(configName,configNameXorNum) + struct.pack('B',configNameXorNum)

def xorDecConfigName(configNameXorAll, num=None):
	if num!=None:
		return xorStr(configNameXorAll, num)
	else:
		configNameXorStr=configNameXorAll[0:-1]
		configNameXorNum=configNameXorAll[-1]
		return xorStr(configNameXorStr, configNameXorNum)

def b64encode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64encode(s).decode('utf-8')
def b64decode(s):
	if isinstance(s,str):
		s=s.encode(encoding='utf-8')
	return base64.b64decode(s).decode('utf-8')

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
加密配置数据
参数：配置，混淆头，混淆尾
'''
def encryptEncryptConfig(password,cname,config,chead,ctail):
	# 使用多次加密迭代，增加解密时间成本，抗暴力破解
	encryptCount=random.randint(encryptConfigRepeatCount[0], encryptConfigRepeatCount[1])
	encConfigStr=f'{chead}{encryptConfigSplit}{b64encode(json.dumps(config,ensure_ascii=False))}{encryptConfigSplit}{ctail}'
	for i in range(0,encryptCount):
		encConfigStr=AES_Encrypt(password,cname,encConfigStr)
	return encConfigStr
'''
解密配置数据
参数：已加密的配置数据
'''
def decryptEncryptConfig(password,cname,data):
	decConfigStr=data
	for i in range(0, encryptConfigRepeatCount[1]):
		try:
			decConfigStr=AES_Decrypt(password,cname,decConfigStr)
		except:
			# 当AES无法正确解码时，循环终止，进行后续处理
			break
	decSplit=decConfigStr.decode('utf-8','ignore').split(encryptConfigSplit)
	if len(decSplit)==3:
		config=decSplit[1]
		try:
			return json.loads(b64decode(config))
		except:
			return False
	else:
		return False

########## CONFUSE ##########
___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'
########## CONFUSE ##########

'''
根据配置计算压缩包密钥
参数：密码，配置数据
'''
def calcEncryptKey(password, config):
	# 生成盐和盐的MD5
	salt=config['salt']
	saltMd5=hashlib.md5((salt).encode(encoding='utf-8')).hexdigest()
	# 生成密码的MD5
	passwordMd5=hashlib.md5((password+salt).encode(encoding='utf-8')).hexdigest()
	# 生成时间戳和时间戳的MD5
	timestamp=config['timestamp']
	timestampMd5=hashlib.md5((f'{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成【密码的MD5|盐|时间戳】拼合的MD5
	comitMd5=hashlib.md5((f'{passwordMd5}|{salt}|{timestamp}').encode(encoding='utf-8')).hexdigest()
	# 生成密钥：【密码的MD5盐的MD5时间戳的MD5拼合的MD5】，每个MD5长度32位，总密钥长度128位
	encryptKey=f'{passwordMd5}{saltMd5}{timestampMd5}{comitMd5}'
	# 根据capsList更改大小写
	encryptKeyList=list(encryptKey)
	for caps in config['capsList']:
		encryptKeyList[caps]=encryptKey[caps].upper()
	encryptKey=''.join(encryptKeyList)

	return encryptKey

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def makeOutputDir(addr):
	dirs=f'{outputDir}\\{addr}'
	if not exist(dirs):
		os.makedirs(dirs)
	return dirs

randomFileNameAlready=[]
def genRandomFileName():
	rp=randomPassword(random.randint(fakeFileNameLengthRange[0],fakeFileNameLengthRange[1]))
	if rp in randomFileNameAlready:
		rp=genRandomFileName()
	randomFileNameAlready.append(rp)
	return rp

########## CONFUSE ##########
___JoGDgVEgiGwuIrQ4ak3Ny33qZJMN6Nf87P7FUYSKHjY1O1nw9WE9j6OR57Whwu9RkFp4ymqMzu6BCBjQrIklXaSern=''
########## CONFUSE ##########

disguiseModeMap={
	'-1':'原始文件名',
	'0':'随机大小写字母+数字（默认）',
	'1':'随机英文单词',
	'2':'数字顺序累加',
	'3':'字母顺序累加',
	'任意字符串':'指定文件名',
}
singleFileModeMap={
	'0':'多文件分卷模式（默认）',
	'1':'单文件模式（小于4GB）',
	'2':'双文件模式',
}
def beginEncryptFiles(file):
	if(sys.argv[0].split('.')[-1]!='exe'):
		out.outlnC('[请不要直接运行源码，否则无法解包！]','yellow','black',1)
		return False
	
	applyFileData(file)
	if targetFileData['path']:
		if targetFileData['fileCount']<1:
			out.outlnC('文件数量为0，无法继续进行操作！','yellow','black',1)
			return 0
		out.outlnC('加载文件：【{path}】\n共{fileCount}个文件，{folderCount}个文件夹，总大小：{fSize}（{tSize} B）'.format(**targetFileData,fSize=formatFileSize(targetFileData['fileSize']),tSize=targetFileData['fileSize']),'green','black',1)
		password=''
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
				if password=='':
					password=defaultSalt
		desc=input('请输入留言，如果不需要，请留空：\n')

		# isSingleFile=input('是否启用单文件压缩？如果不需要，请留空，否则请输入1：')
		global singleFileModeMap
		out.outlnC('请选择文件输出模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(singleFileModeMap.keys()):
			out.outln(f'  {d}：{singleFileModeMap[d]}')
		isSingleFile=input('请选择：')
		if isSingleFile=='' or not isSingleFile.isdigit():
			isSingleFile=False
		else:
			isSingleFile=int(isSingleFile)
		
		# isDisguiseMode=input('是否启用文件名伪装？如果不需要，请留空，否则请输入：')
		global disguiseModeMap
		out.outlnC('请选择文件伪装模式，如果不需要，请留空，否则请输入对应数字：','yellow','black',1)
		for d in list(disguiseModeMap.keys()):
			out.outln(f'  {d}：{disguiseModeMap[d]}')
		isDisguiseMode=input('请选择：')
		if isDisguiseMode=='':
			isDisguiseMode=False
		elif isDisguiseMode=='-1':
			isDisguiseMode=-1
		elif not isDisguiseMode.isdigit():
			pass
		elif isDisguiseMode.isdigit() and int(isDisguiseMode) > len(singleFileModeMap):
			isDisguiseMode=f'%HEADER%{isDisguiseMode}'
		else:
			isDisguiseMode=int(isDisguiseMode)
		# if isSingleFile==False and isDisguiseMode==-1: # 非单文件模式下，禁用原始文件名方案
		# 	isDisguiseMode=0

		print()
		out.outlnC('开始进行加密压缩！','black','green',1)

		# 生成混淆头尾和配置数据
		out.outC('正在生成混淆数据……','cyan','black',1)
		confuseHead=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		confuseTail=base64.b64encode(randomBin(random.randint(confuseLength[0],confuseLength[1]))).decode('UTF-8')
		encryptConfig=genEncryptConfig(confuseHead, confuseTail, desc)
		encryptConfig['name']=targetFileData['name']
		out.outlnC('[完成]','green','black',1)

		#生成加密KEY
		out.outC('正在生成加密密钥……','cyan','black',1)
		encryptKey=calcEncryptKey(password,encryptConfig)
		out.outlnC('[完成]','green','black',1)

		# 创建输出目录，并写入必备文件
		out.outC('创建输出目录并写入必备文件……','cyan','black',1)
		projOutputDir=''
		projOutputExe=''
		if isDisguiseMode==-1:
			# 原始文件名
			projOutputExe=encryptConfig['name']
		elif isDisguiseMode==1:
			# 随机英文单词
			projOutputExe=disguise.randomSelectName()
		elif isDisguiseMode==2:
			# 数字累加
			projOutputExe=disguise.numberSelectName()
		elif isDisguiseMode==3:
			# 字母累加
			projOutputExe=disguise.charSelectName()
		elif not isDisguiseMode.isdigit():
			# 任意字符串
			projOutputExe=isDisguiseMode.replace('%HEADER%','')
			escapeList=['\\','|',':','"','<','>','/','?','*']
			for e in escapeList: # 处理特殊字符
				projOutputExe=projOutputExe.replace(e,'_')
		else:
			# 随机大小写字母+数字
			projOutputExe=genRandomFileName()
		if isSingleFile==1:
			projOutputDir=makeOutputDir('')
		else:
			projOutputDir=makeOutputDir(projOutputExe)
		# projCfgname='cfname'
		# projCfgnameOrigin='cfnameo'
		_7z.output7zExe(f'{projOutputDir}\\7z.exe')
		volumeCount=random.randint(volumeRange[0],volumeRange[1])
		volumeSize=int(targetFileData['fileSize'] / volumeCount)+random.randint(0,volumeRange[2])
		out.outlnC('[完成]','green','black',1)

		# 调用7Z进行加密压缩
		out.outlnC('开始进行压缩，这可能需要一定时间……','cyan','black',1)
		zBeginTime=time.time()
		fileName=targetFileData['name']
		filePath=targetFileData['path']
		zexeFile=f'{projOutputDir}\\7z.exe'
		zexeParams=[
			'a', '-mhe=on',
			f'-p{encryptKey}', f'-v{volumeSize}b',
			f'{projOutputDir}\\{fileName}.7z', f'{filePath}'
		]
		run(zexeFile,zexeParams)
		os.remove(f'{projOutputDir}\\7z.exe')
		zEndTime=time.time()
		out.outlnC(f'压缩完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

		# 进行7z文件头混淆
		out.outC('正在混淆文件头……','cyan','black',1)
		firstFileName=f"{projOutputDir}\\{targetFileData['name']}.7z.001"
		firstFileNameTmp=f'{firstFileName}.tmp'
		firstFileLength=os.path.getsize(firstFileName)
		randomHeadLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomHeadLength > firstFileLength:
			randomHeadLength=firstFileLength
		randomHead=randomBin(randomHeadLength)
		with open(firstFileName,'rb') as originFile, open(f'{firstFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originHead']=base64.b64encode(originData[0:randomHeadLength]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(0x00)
			targetFile.write(randomHead)
			targetFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		encryptConfig['confuseFile'][0]=firstFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 进行7z文件尾混淆
		out.outC('正在混淆文件尾……','cyan','black',1)
		lastFileName=max7zVolume(getAllFileList(f'{projOutputDir}'))
		lastFileNameTmp=f'{lastFileName}.tmp'
		lastFileLength=os.path.getsize(lastFileName)
		randomTailLength=random.randint(randomHeadLengthRange[0],randomHeadLengthRange[1])
		if randomTailLength > lastFileLength:
			randomTailLength=lastFileLength
		randomTail=randomBin(randomTailLength)
		with open(lastFileName,'rb') as originFile, open(f'{lastFileNameTmp}','wb') as targetFile:
			originData=originFile.read()
			encryptConfig['originTail']=base64.b64encode(originData[-randomTailLength:]).decode('UTF-8')
			targetFile.write(originData)
			targetFile.seek(-randomTailLength,2)
			targetFile.write(randomTail)
			targetFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		encryptConfig['confuseFile'][1]=lastFileName.split('\\')[-1]
		out.outlnC('[完成]','green','black',1)

		# 对文件进行乱序重命名
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		totalFileSize=0
		allFilesList=getAllFileList(projOutputDir)
		random.shuffle(allFilesList)
		fileListLength=len(allFilesList)
		fileListLengthStr=f'{fileListLength}'
		for i,fp in enumerate(allFilesList):
			fileName=fp.split('\\')[-1]
			fakeName=''
			if isDisguiseMode==1:
				# 随机英文单词+随机池后缀
				fakeName=f'{disguise.randomSelectName()}.{disguise.randomExt()}'
			elif isDisguiseMode==2:
				# 数字累加
				fakeName=f'{disguise.numberSelectName()}'
			elif isDisguiseMode==3:
				# 字母累加
				fakeName=f'{disguise.charSelectName()}'
			else:
				# 随机大小写字母+数字
				fakeName=f'{genRandomFileName()}'
			fileSize=os.path.getsize(f'{projOutputDir}\\{fileName}')
			encryptConfig['fileList'].append({
				'fileName':fileName,
				'fakeName':fakeName,
				'fileSize':fileSize,
			})
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			os.rename(f'{projOutputDir}\\{fileName}',f'{projOutputDir}\\{fakeName}')
			out.outlnC('[完成]','green','black',1)
			totalFileSize+=fileSize
		renameEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)

		execFile=sys.argv[0]
		execFileName=execFile.split('\\')[-1]
		execTargetFile=projOutputDir+'\\'+exeMergeFileName
		copyfile(execFile, execTargetFile)

		if isSingleFile==1 or isSingleFile==2:
			#                   exe文件大小（实际）              压缩包大小(实)  解密配置数据大小（5MB余量）
			singleMergeFileSize=os.path.getsize(f'{execFile}') + totalFileSize + singleFileEConfigLimit
			if singleMergeFileSize>singleFileSizeLimit and isSingleFile==1: #如果文件大小超过4GB，则单文件模式将无法执行，因此禁止。
				out.outlnC('单文件最终大小超过4GB，无法使用单文件模式！','yellow','black',1)
			else:
				out.outlnC('正在整合文件，这可能需要一定时间……','cyan','black',1)
				mergeBeginTime=time.time()
				encryptConfig['isSingleFile']=isSingleFile

				if isSingleFile==1:
					mergeFileName=execFileName
					mergeFilePath=execTargetFile
					# 文件偏移位置初始值为exe自身的大小，然后依次加上压缩包的大小
					lastFileSize=os.path.getsize(sys.argv[0])
				elif isSingleFile==2:
					mergeFileName=mergeFirstFileName
					mergeFilePath=f'{projOutputDir}\\{mergeFileName}'
					mergeFinalFileName=encryptConfig['fileList'][0]['fakeName']
					mergeFinalFilePath=f'{projOutputDir}\\{mergeFinalFileName}'
					lastFileSize=0
				
				fileListLength=len(encryptConfig['fileList'])
				fileListLengthStr=f'{fileListLength}'
				for i,fp in enumerate(encryptConfig['fileList']):
					fileName=fp['fileName']
					fakeName=fp['fakeName']
					currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
					out.outC(f'正在整合文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
					encryptConfig['fileList'][i]['fileOffset']=lastFileSize
					with open(f'{projOutputDir}\\{fakeName}','rb') as originFile, open(f'{mergeFilePath}','ab') as targetFile:
						targetFile.write(originFile.read())
						targetFile.flush()
					lastFileSize+=os.path.getsize(f'{projOutputDir}\\{fakeName}')
					os.remove(f'{projOutputDir}\\{fakeName}')
					out.outlnC('[完成]','green','black',1)
				
				if isSingleFile==2:
					os.rename(mergeFilePath,mergeFinalFilePath)
				mergeEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)

		# 生成混淆后的配置数据
		out.outC('正在加密配置数据……','cyan','black',1)
		configBeginTime=time.time()
		configName=genRandomFileName()
		encryptConfigString=encryptEncryptConfig(password, configName, encryptConfig, confuseHead, confuseTail)
		configEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)

		# 复制执行文件到输出目录
		out.outC('正在生成解压程序……','cyan','black',1)
		with open(f'{execTargetFile}','ab') as ef:
			ef.write(xorEncConfigName(configName, defaultXorEncNum))
			ef.write(encryptConfigString)
			ef.write(xorEncConfigName(configName))
			ef.flush()
			ef.close()
		execFilePath=f'{projOutputDir}\\{projOutputExe}.exe'
		os.rename(f'{execTargetFile}',execFilePath)
		out.outlnC('[完成]','green','black',1)

		testResult=beginDecryptFiles('test', execFilePath, password)

		# 删除不需要的文件
		out.outC('正在清理不必要的文件……','cyan','black',1)
		out.outlnC('[完成]','green','black',1)

		print()
		out.outC(f'输出目录：','cyan','black',1)
		out.outlnC(f'【{projOutputDir}】','green','black',1)
		print()
		if testResult==True:
			if os.path.getsize(execFilePath)<=singleFileSizeLimit:
				out.outC('加密压缩已完成，您可以分享您的文件了！','black','green',1)
			else:
				out.outC('单文件最终大小超过4GB，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		else:
			out.outC('验证解密数据错误，您的文件可能无法解压，请重新加密压缩！','black','yellow',1)
		out.outlnC('','white','black',0)

		return 0

########## CONFUSE ##########
___4u451RVSaV20Srk80X6BiHyj3jMuPpBG1nNVvgg7WLtzdX69LpE8TP=''
########## CONFUSE ##########

def beginDecryptFiles(mode=None, eFile=None, ePassword=''):
	if mode!=None:
		execFile=eFile
		execFileName=eFile
	else:
		execFile=sys.argv[0]
		execFileName=execFile # 此处的EXE使用绝对路径（参数0提供的路径），避免因为工作路径不同导致的无法读取问题
		# execFileName=execFile.split('\\')[-1]
	if not exist(execFileName):
		cp=getCWDPath()
		logger.error(f'{cp["execFileName"]} file not found!')
		logger.error(f'Sys.argv: {cp["argv"]}')
		logger.error(f'CurWorkDir: {cp["cwd"]}')
		logger.error(f'Executable: {cp["realPath"]}')
		logger.error(f'Sys.argv0 Dirname: {cp["dirname"]}')
		logger.error(f'Executable Dirname: {cp["realDirname"]}')
		return
	# 读取exe文件，并获取末尾32位字符串作为解密配置文件名
	fileData=None
	with open(execFileName,'rb') as f:
		# 只读取文件末尾5MB的数据，以获取解密配置数据
		f.seek(execSeekSizeLimit,2)
		fileData=f.read()
		f.close()

	# 按照范围遍历来确定配置文件名
	configName=''
	configNameReal=''
	configFromSelf=None
	for i in range(fakeFileNameLengthRange[0], fakeFileNameLengthRange[1]+1): # range包含左但不包含右，因此要+1
		configName=xorDecConfigName(fileData[-(i+1):])
		fileDataSplit=fileData.split(xorDecConfigName(configName, defaultXorEncNum))
		if exist(configName):
			configNameReal=configName.decode('utf-8')
			break
		elif len(fileDataSplit)>1:
			if configName.isalnum(): # 为避免潜在的configName包含非字母数字且又能拆解fileData的情况，只有configName仅包含字母和数字时，才会进行拆解。
				configFromSelfTemp=fileDataSplit[1][0:-(i+1)]
				if len(configFromSelfTemp)%16==0: # 保护性措施：只有配置数据长度为16的倍数时，才允许赋值
					configFromSelf=configFromSelfTemp
					configNameReal=configName.decode('utf-8')
		elif len(fileDataSplit)<=1:
			break
	alreadyTiped=False
	while True:
		if not exist(configName) and configFromSelf==None:
			out.outlnC('找不到解密配置文件！','black','red',1)
			if not alreadyTiped:
				out.outlnC('如果需要进行加密压缩，请将文件或文件夹拖放到程序图标上！','cyan','black',1)
				alreadyTiped=True
			configName=input('如果您知道配置文件名，请在此处输入：')
		else:
			break
	
	password=''
	encryptConfig=False

	while True:
		password=ePassword
		encryptConfig=False
		while True:
			if password!='':
				break
			else:
				password=input('请输入密码：')
				if password=='':
					password=defaultSalt
		
		# out.outlnC('开始进行解压！','black','green',1)
		# 解密配置数据
		if mode=='test':
			modeText='验证'
		else:
			modeText='解密'
		
		out.outC(f'正在{modeText}配置数据……','cyan','black',1)
		configBeginTime=time.time()
		try:
			if configFromSelf!=None:
				encryptConfig=decryptEncryptConfig(password, configNameReal, configFromSelf)
			else:
				encryptConfig=decryptEncryptConfig(password, configNameReal, loadFile(configNameReal,'rb'))
			if encryptConfig!=False:
				configEndTime=time.time()
				out.outlnC(f'[完成，用时{formatSeconds(configEndTime - configBeginTime)}]','green','black',1)
				break
			else:
				out.outlnC(f'[{modeText}失败！密码错误？]','red','black',1)
		except Exception as e:
			out.outlnC(f'[{modeText}错误！算法有误？]','red','black',1)
			logger.exception('Exception')
			out.outlnC(e,'red','black',1)

		if mode=='test':
			return encryptConfig!=False

	if mode=='test':
		return encryptConfig!=False
	# 输出项目名
	if encryptConfig['name']!='':
		out.outln('')
		out.outln(encryptConfig['name'])
		out.outln('')
	# 输出描述和欢迎信息
	if encryptConfig['description']!='':
		out.outln(encryptConfig['description'])
		out.outln('')

	out.outlnC('开始进行解压！','black','green',1)
	# 对文件进行乱序重命名
	if encryptConfig['isSingleFile']==1 or encryptConfig['isSingleFile']==2:
		out.outlnC('正在分离文件，这可能需要一定时间……','cyan','black',1)
		mergeBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		if encryptConfig['isSingleFile']==1:
			mergeFileName=execFileName
		elif encryptConfig['isSingleFile']==2:
			mergeFileName=mergeFirstFileName
			try:
				os.rename(encryptConfig['fileList'][0]['fakeName'],mergeFileName)
			except Exception as e:
				out.outlnC(e,'yellow','black',1)

		mergeFileFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			fileSize=fl['fileSize']
			fileOffset=fl['fileOffset']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在分离文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			try:
				with open(mergeFileName,'rb') as originFile, open(fileName,'wb') as targetFile:
					originFile.seek(fileOffset)
					targetFile.write(originFile.read(fileSize))
					targetFile.flush()
				out.outlnC('[完成]','green','black',1)
			except Exception as e:
				mergeFileFailList.append(fakeName)
				out.outlnC(f'[错误：{fileName} -> {e}]','yellow','black',1)
		
		mergeEndTime=time.time()
		out.outlnC(f'[完成，用时{formatSeconds(mergeEndTime - mergeBeginTime)}]','green','black',1)
	else:
		out.outlnC('正在重命名文件……','cyan','black',1)
		renameBeginTime=time.time()
		fileListLength=len(encryptConfig['fileList'])
		fileListLengthStr=f'{fileListLength}'

		renFileNameFailList=[]
		for i,fl in enumerate(encryptConfig['fileList']):
			fileName=fl['fileName']
			fakeName=fl['fakeName']
			currentIndex=f'{i+1}'.zfill(len(fileListLengthStr))
			out.outC(f'正在重命名文件：{currentIndex}/{fileListLength}【{fileName}】……','cyan','black',1)
			if exist(fakeName):
				os.rename(fakeName,fileName)
				out.outlnC('[完成]','green','black',1)
			else:
				renFileNameFailList.append(fakeName)
				out.outlnC(f'找不到文件【{fakeName}】！','yellow','black',1)
		renameEndTime=time.time()
		if len(renFileNameFailList)<=0:
			out.outlnC(f'[完成，用时{formatSeconds(renameEndTime - renameBeginTime)}]','green','black',1)
		else:
			out.outlnC('[警告，用时{formatSeconds(renameEndTime - renameBeginTime)}]','yellow','black',1)
			# for f in renFileNameFailList:
			# 	out.outlnC(f'找不到文件【{f}】！','yellow','black',1)

	# 进行7z文件尾解混淆
	# 由于加密时是先头后尾，则在压缩后，只有一个分卷且极小时，原始尾的数据是混淆头，因此还原时必须先尾后头
	out.outC('正在解混淆文件尾……','cyan','black',1)
	# lastFileName=max7zVolume(getAllFileList('.\\'))
	lastFileName=encryptConfig['confuseFile'][1]
	lastFileNameTmp=f'{lastFileName}.tmp'
	originTail=base64.b64decode(encryptConfig['originTail'])
	try:
		with open(lastFileName,'rb') as targetFile, open(f'{lastFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(-len(originTail),2)
			originFile.write(originTail)
			originFile.flush()
		os.remove(lastFileName)
		os.rename(f'{lastFileNameTmp}',lastFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{lastFileName} -> {e}]','yellow','black',1)

	# 进行7z文件头解混淆
	out.outC('正在解混淆文件头……','cyan','black',1)
	firstFileName=encryptConfig['confuseFile'][0]
	firstFileNameTmp=f'{firstFileName}.tmp'
	originHead=base64.b64decode(encryptConfig['originHead'])
	try:
		with open(firstFileName,'rb') as targetFile, open(f'{firstFileNameTmp}','wb') as originFile:
			targetData=targetFile.read()
			originFile.write(targetData)
			originFile.seek(0x00)
			originFile.write(originHead)
			originFile.flush()
		os.remove(firstFileName)
		os.rename(f'{firstFileNameTmp}',firstFileName)
		out.outlnC('[完成]','green','black',1)
	except Exception as e:
		out.outlnC(f'[错误：{firstFileName} -> {e}]','yellow','black',1)

	# 生成解密KEY
	out.outC('正在生成解密密钥……','cyan','black',1)
	encryptKey=calcEncryptKey(password,encryptConfig)
	out.outlnC('[完成]','green','black',1)

	# 创建输出目录，并写入必备文件
	out.outC('创建输出目录并写入必备文件……','cyan','black',1)
	_7z.output7zExe('7z.exe')
	out.outlnC('[完成]','green','black',1)

	# 调用7Z进行加密压缩
	out.outlnC('开始进行解压，这可能需要一定时间……','cyan','black',1)
	zBeginTime=time.time()
	zexeFile=f'7z.exe'
	zexeParams=['x', f'-p{encryptKey}', f'{firstFileName}']
	run(zexeFile,zexeParams)
	
	zEndTime=time.time()
	out.outlnC(f'解压完成！用时{formatSeconds(zEndTime - zBeginTime)}。','green','black',1)

	# 删除不需要的文件
	out.outC('正在清理不必要的文件……','cyan','black',1)
	os.remove('7z.exe')
	out.outlnC('[完成]','green','black',1)

	out.outC('解压成功，请尽情使用吧！','black','green',1)
	out.outlnC('','white','black',0)
	print()
	out.outC('按任意键清理压缩包，如果不需要，请关闭窗口！','cyan','black',1)
	pause()
	# 删除压缩包和解压配置（移入回收站）
	if exist(configName):
		try:
			send2trash.send2trash(configName)
		except:
			pass
	if exist(exeMergeFileName):
		try:
			send2trash.send2trash(exeMergeFileName)
		except:
			pass
	if exist(mergeFirstFileName):
		try:
			send2trash.send2trash(mergeFirstFileName)
		except:
			pass
	for fl in encryptConfig['fileList']:
		fileName=fl['fileName']
		try:
			if exist(fileName):
				send2trash.send2trash(fileName)
		except:
			pass
	out.outC('[完成]','green','black',1)
	out.outlnC('','white','black',0)

########## CONFUSE ##########
___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'
########## CONFUSE ##########

def printTitle(tp='e'):
	tpMap={
		'e':'加密压缩',
		'd':'解密解压',
	}
	version=f"v{VERSION['versionUpdate'][0]['mainVersion']} Build {VERSION['versionUpdate'][0]['dateVersion']}"
	os.system('cls')
	os.system(f"title 资源{tpMap[tp]}工具 {version}")
	out.outlnC(f'-=<欢迎使用资源{tpMap[tp]}工具！>=-','purple','black',1)
	out.outlnC('-=<本工具开源免费，禁止用于商业及非法用途！>=-','red','black',1)
	return version

def main():
	os.system('cls')
	out.outlnC('正在读取数据，请稍候……','cyan','black',1)
	if len(sys.argv)<2:
		printTitle('d')
		try:
			beginDecryptFiles()
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0
	elif len(sys.argv)>2:
		printTitle('e')
		out.outlnC('请只拖入一个文件或文件夹！','red','black',1)
		out.outln('按任意键退出。')
		pause()
		return 0
	else:
		version=printTitle('e')
		
		if sys.argv[1]=='-v' or sys.argv[1]=='--version':
			out.outlnC(version,'yellow','black',1)
			for vd in VERSION['versionUpdate'][0]['versionDesc']:
				if vd!='':
					out.outlnC(f'  - {vd}','white','black',1)
			return
		elif sys.argv[1]=='-c' or sys.argv[1]=='--cwd':
			out.outlnC('Get CWD path','yellow','black',1)
			cp=getCWDPath()
			for key in cp:
				out.outlnC(f'  - {key}: {cp[key]}','white','black',1)
			return

		out.outlnC(f'请在开始加密前，清空【{outputDir}】文件夹，以免造成文件污染！','yellow','black',1)
		try:
			beginEncryptFiles(sys.argv[1])
			out.outln('按任意键退出。')
		except Exception as e:
			out.outlnC('程序执行错误！','black','red',1)
			# out.outlnC(e,'red','black',1)
			logger.exception('Exception')
			out.outln('按任意键退出。')
		pause()
		return 0

########## CONFUSE ##########
___SUvLnx4e1y2OhP0meYmsQtZtW2fM=''
########## CONFUSE ##########

if __name__=='__main__':
	main()

########## CONFUSE ##########
___nPudoLkIUefEdowbofC0FVZbzPG6GQaZ4vIKWcD9fRj13A7oFPiOD3BI60ZQPM9pKLAXIDLIxDpLxQxRw8=''
########## CONFUSE ##########
